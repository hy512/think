<?php
namespace Common\Model;

use Common\Model\CommonModel;
use Common\Common\tool;
use Common\Common\redis;
use Common\Common\redisx;

// require_once __ROOT__ . 'GatewayClient-master/Gateway.php';
require_once __ROOT__ . 'application/Common/Common/simple_html_dom.php';

class WxautoModel extends CommonModel
{

    // 关闭任务
    private $isoff = false;

    // 是否关闭IPAD扫码登记;
    private $isipadlogin = false;

    protected $nowVar = '3.4.8';

    // 最大接取任务号量开始判断是否需要中止这个任务
    private $isMaxNoNum = 500;

    // 最大接接取量跟完成量比例。超过就中止
    private $isIfMaxNoNum = 300;

    // 更新时执行的脚本
    protected $is_Run = 1;

    // 冲值返现最低值
    private $ispay_max = 500000;

    // 每秒访问次数
    private $wxRunNum = 80;

    // 判断哪些号要跳，哪些任务要跳,错误信息，链接类型
    private $wxIdTaskIdIfArr = array(
        '51wtp' => '该账号异常',
        'faisco' => '投票异常',
        '51wyfl' => '访问被拦截，该账号被判断为专业刷票水军',
        'youtoupiao' => 'shibai111投票失败5'
    );

    // 自动停止的单子判断1 全判断。2为查找判断
    private $stopIfmsg = array(
        array(
            2,
            '不再接受投票'
        ),
        array(
            2,
            '投票已截止'
        ),
        array(
            2,
            '投票停止'
        ),
        array(
            2,
            '活动已经结束'
        ),
        array(
            1,
            '活动异常，可能已结束'
        ),
        array(
            1,
            '超过今日投票数限制'
        ),
        array(
            1,
            '您今天投票的次数已达到上限,谢谢您的参与'
        ),
        array(
            2,
            '票数已达上限'
        )
    );

    // 多久轮回一次微信号分钟
    private $wxrunTime = 5;

    // 一次做多少任务
    private $whileRunTask = 12;

    // 下一次任务延时秒
    private $whileRunTasks = 0.1;

    // 版本号
    // 自动提现
    private $is_autoTx = false;

    // 哪个平台
    public $webNum = 0;

    private $webOlne;

    // dll协义插件__1:最新版本2:老版本
    private $dllEx = 1;

    // 版本对应的DLL扩名
    private $newdll = array(
        1 => 'Ex',
        2 => 'new',
        3 => 'mac'
    );

    // 出频烦时用哪个后缀名xcode后面的
    private $dllExname = 'Exx';

    // 脚本限制多少秒跳过
    private $time_out = 100;

    // 登陆失败后的调用
    private $treeTestlogin = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmtSdW4oZGxsLCBkaWNEYXRhLCBzZXNzaW9uLHN0clRpY2tldCk6CiAgICB2ID0gc3RyVGlja2V0WydzdGF0dXMnXQogICAgZm9yIGNhc2UgaW4gc3dpdGNoKHYpOgogICAgICAgIGlmIGNhc2UoLTEwNik6CiAgICAgICAgICAgIFN0ck5hbWUgPSBzdHIoZGljRGF0YVsndXNlciddKTsKICAgICAgICAgICAgbWVzc2FnZSA9IHN0clRpY2tldFsnbWVzc2FnZSddWzI6XQogICAgICAgICAgICBpZiBtZXNzYWdlLmZpbmQoJ+W+ruS/oeeJiOacrOi/h+S9jicpICE9IC0xOgogICAgICAgICAgICAgICAgc3RyVG1wID0gcG9zdF9uX3VybCg0NDQ0LCAneyJuYW1lIjoiJyArIFN0ck5hbWUgKyAnIiwiZXJyX2NvZGUiOiInICsgc3RyKAogICAgICAgICAgICAgICAgICAgIC0xMDYpICsgJyIsImVycl9tc2ciOiInICsgJ+W+ruS/oeeJiOacrOi/h+S9juivt+mHjeaWsOaJq+eggeeZu+mZhuivleivlScgKyAnIn0nLCAnJykKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICBicmVhawogICAgcmV0dXJu';

    // 微信登陆后首先调用的脚本。可以做些养号之类的事件
    private $wxfireScr = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmtSdW4oZGxsLCBkaWNEYXRhLCBzZXNzaW9uKToKICAgIHByaW50KCfmiafooYzpppbohJrmnKwnKQ==';

    // 设置对像脚本。头像来自服务器
    private $serheadpro = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmtSdW4oZGxsLCBkaWNEYXRhLCBzZXNzaW9uKToKICAgIGpwZ1VybD0naHR0cDovL3RwaG9tZS41MnFsei5jb20vaW5kZXgvZ2V0d3hhdXRvbXNnP3R5cGVpZD00NCcKICAgIHdpbmh0dHAgPSBnZXRXaW5IdHRwUmVxKDEpCiAgICBIdHRwRGF0YSA9IFNlbmRXaW5IdHRwUmVxKHdpbmh0dHAsIGpwZ1VybCwgVHJ1ZSwgTm9uZSwgMSwgTm9uZSwgTm9uZSkKICAgIGlmIGxlbihIdHRwRGF0YSk8MTA6CiAgICAgICAgcmV0dXJuCiAgICBwbmcgPSBCeXRlc0lPKEh0dHBEYXRhKQogICAgaW1hZ2UgPSBJbWFnZS5vcGVuKHBuZykKICAgIHcsIGggPSBpbWFnZS5zaXplCiAgICBpbnR3eHggPSByYW5kb20ucmFuZGludCgxLCAxMCkKICAgIGltYWdlPWltYWdlLnJlc2l6ZSgody1pbnR3eHgsIGgtaW50d3h4KSwgSW1hZ2UuQU5USUFMSUFTKQogICAgcyA9IEJ5dGVzSU8oKQogICAgaW1hZ2Uuc2F2ZShzLCJKUEVHIikKICAgIHJlb2JqID0gY19jaGFyX3AoTm9uZSkKICAgIHM9cy5nZXR2YWx1ZSgpCiAgICBkbGwuV1hTZXRIZWFkSW1hZ2Uoc2Vzc2lvbixjX2NoYXJfcChzKSxsZW4ocykscG9pbnRlcihyZW9iaikpCiAgICBzdHJEaWMgPSBSZXR1cm5EaWNFeFUocmVvYmosIGRsbCkKICAgIGlmIHN0ckRpY1snc3RhdHVzJ10gPT0gMDoKICAgICAgICBwb3N0X25fdXJsKDY2NjYsICd7Im5hbWUiOiInICsgc3RyKGRpY0RhdGFbJ3VzZXInXSkgKyAnIiwiaXNfdHlwZSI6IicgKyBzdHIoCiAgICAgICAgICAgIDEpICsgJyJ9JywgJycpICAK';

    // 每天一次阅读腾新闻。。。true开
    private $isvlook = false;

    private $lookmpview = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmtSdW4oZGxsLCBkaWNEYXRhLCBzZXNzaW9uKToKICAgIGdldGludCA9IDAKICAgIHJlc3VsdF9saXN0ID0gW10KICAgIHdoaWxlIGdldGludCA8IDEwOgogICAgICAgIGdldGludCA9IGdldGludCArIDEKICAgICAgICByZW9iaiA9IGNfY2hhcl9wKE5vbmUpCiAgICAgICAgZGxsLldYU3luY01lc3NhZ2Uoc2Vzc2lvbiwgcG9pbnRlcihyZW9iaikpCiAgICAgICAgZGljRGF0YXggPSBSZXR1cm5EaWNFeFUocmVvYmosIGRsbCkKICAgICAgICBkdG1wID0gZGljRGF0YXhbMF0KICAgICAgICBpZiBkdG1wWydjb250aW51ZSddID09IDA6CiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZm9yIGRhdGFNc2cgaW4gZGljRGF0YXg6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHN0clhtbCA9IGRhdGFNc2dbJ2NvbnRlbnQnXS5yZXBsYWNlKCdcdCcsICcnKQogICAgICAgICAgICAgICAgaWYgc3RyWG1sLmZpbmQoJzx1cmw+JykgIT0gLTE6CiAgICAgICAgICAgICAgICAgICAgcm9vdCA9IEVsZW1lbnRUcmVlLmZyb21zdHJpbmcoc3RyWG1sKQogICAgICAgICAgICAgICAgICAgICMgc3RydXJsID0gcm9vdFtnZXRpZF0uZmluZCgndXJsJykudGV4dAogICAgICAgICAgICAgICAgICAgIGxldmVsID0gMSAgIyDoioLngrnnmoTmt7Hluqbku44x5byA5aeLCiAgICAgICAgICAgICAgICAgICAgd2Fsa0RhdGEocm9vdCwgbGV2ZWwsIHJlc3VsdF9saXN0KQogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgogICAgbXB1cmw9JycKICAgIHZpdXJsPScnCiAgICBmb3IgdXJsIGluIHJlc3VsdF9saXN0OgogICAgICAgIGlmIHVybD09Tm9uZToKICAgICAgICAgICAgY29udGludWUKICAgICAgICBpZiB1cmwuZmluZCgnaHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tJykgIT0gLTE6CiAgICAgICAgICAgIG1wdXJsPXVybAogICAgICAgIGlmIHVybC5maW5kKCd2aWV3LmluZXdzLnFxLmNvbScpICE9IC0xOgogICAgICAgICAgICB2aXVybD11cmwKICAgIGlmICBtcHVybCE9Jyc6CiAgICAgICAgc3RydXJsID0gd3hfYXV0aChkbGwsIHNlc3Npb24sICcnLCBtcHVybCkKICAgICAgICBkcml2ZXIgPSBnZXREcml2ZXIoMSkKICAgICAgICBkcml2ZXIuZ2V0KHN0cnVybCkKICAgICAgICBsb2NhdG9yID0gKEJ5LlhQQVRILCAnLy8qW0BpZD0ianNfcmVhZF9hcmVhMyJdJykKICAgICAgICB0cnk6CiAgICAgICAgICAgV2ViRHJpdmVyV2FpdChkcml2ZXIsIDEwLCAwLjUpLnVudGlsKEVDLnByZXNlbmNlX29mX2VsZW1lbnRfbG9jYXRlZChsb2NhdG9yKSkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICB0ZXh0bXNnID0gZHJpdmVyLmZpbmRfZWxlbWVudF9ieV94cGF0aCgnLy8qW0BpZD0iYWN0aXZpdHktZGV0YWlsIl0vZGl2L2RpdlsyXS9kaXYnKS50ZXh0CiAgICAgICAgaWYgdGV4dG1zZy5maW5kKCfmk43kvZzov4fkuo7popHnuYHvvIzor7fnqI3lkI7lho3or5XjgIInKSAhPSAtMToKICAgICAgICAgICAgZHJpdmVyLnF1aXQoKQogICAgICAgICAgICBwb3N0X25fdXJsKDY2NjYsCiAgICAgICAgICAgICAgICAgICAgICAgJ3sibmFtZSI6IicgKyBzdHIoZGljRGF0YVsndXNlciddKSArICciLCJ3eF90eXBlIjoiJyArIHN0cigKICAgICAgICAgICAgICAgICAgICAgICAgICAgMSkgKyAnIn0nLCAnJykKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZHJpdmVyLnF1aXQoKQogICAgICAgIHRpbWUuc2xlZXAoNSkKICAgIGlmICB2aXVybCE9Jyc6CiAgICAgICAgZHJpdmVyID0gZ2V0RHJpdmVyKDEpCiAgICAgICAgZHJpdmVyLmdldCh2aXVybCkKICAgICAgICBkcml2ZXIucXVpdCgpCiAgICBwb3N0X25fdXJsKDY2NjYsICd7Im5hbWUiOiInICsgc3RyKGRpY0RhdGFbJ3VzZXInXSkgKyAnIiwiaXNfdHlwZSI6IicgKyBzdHIoCiAgICAgICAgICAgIDIpICsgJyJ9JywgJycpCg==';

    // 发新闻到朋友圈
    private $sendnewSrc = 'ZnJvbSBEYXRhIGltcG9ydCAqCmZyb20gUElMIGltcG9ydCBJbWFnZURyYXcKZnJvbSBQSUwgaW1wb3J0IEltYWdlRm9udAppbXBvcnQgaW8KZGVmIFJ1blRQV29ya1J1bihkbGwsIGRpY0RhdGEsIHNlc3Npb24pOgogICAgcmVvYmogPSBjX2NoYXJfcChOb25lKQogICAgc3RyTmFtZSA9IHN0cihkaWNEYXRhWyd1c2VyJ10pCiAgICBkYXRhID0gZXZhbChwb3N0X25fdXJsKDg4ODksICd7Im5hbWUiOiInICsgc3RyTmFtZSArICcifScsICcnKSkgICMg5paw6Ze7CiAgICBpZiBkYXRhICE9IDE6CiAgICAgICAgdHJ5OgogICAgICAgICAgaW50d3h4ID0gcmFuZG9tLnJhbmRpbnQoMSwgMjApCiAgICAgICAgICBwcmludChsZW4oZGF0YVsnY29udGVudCddKSkKICAgICAgICAgIHN0cmRhdGE9ZGF0YVsnY29udGVudCddWzozODAraW50d3h4XQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgc3RyZGF0YSA9IGRhdGFbJ2NvbnRlbnQnXQogICAgICAgIGRsbC5XWFNlbmRNb21lbnRzKHNlc3Npb24sY19jaGFyX3Aoc3RyZGF0YS5lbmNvZGUoKSksIHBvaW50ZXIocmVvYmopKQogICAgICAgIGRpY0RhdGF4ID0gUmV0dXJuRGljRXhVKHJlb2JqLCBkbGwpCiAgICAgICAgaWYgZGljRGF0YXhbJ3N0YXR1cyddID09IDA6CiAgICAgICAgICAgcG9zdF9uX3VybCg2NjY2LCAneyJuYW1lIjoiJyArIHN0cihkaWNEYXRhWyd1c2VyJ10pICsgJyIsImlzX3R5cGUiOiInICsgc3RyKAogICAgICAgICAgICAgICA0KSArICcifScsICcnKSAgIyDmiJDlip/nmbvpmYblj5HpgIHmiJDlip/mtojmga8=';

    // 每天一次删除公众号
    private $delgzhScr = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmtSdW4oZGxsLCBkaWNEYXRhLCBzZXNzaW9uKToKICAgIGdsb2JhbCBpc192YXIKICAgIHdpbnQ9MAogICAgd2hpbGUgd2ludDwzOgogICAgICAgIHdpbnQ9d2ludCsxCiAgICAgICAgaXNkZWw9cmFuZG9tLnJhbmRpbnQoMzAsIDUwKQogICAgICAgIHRyeTogI+W8gOWniwogICAgICAgICAgICByZW9iaiA9IGNfY2hhcl9wKE5vbmUpCiAgICAgICAgICAgIERpY0daSD1bXQogICAgICAgICAgICB3aGlsZSAxOgogICAgICAgICAgICAgICAgaWYgaXNfdmFyOgogICAgICAgICAgICAgICAgICAgZGxsLkpTU3luY0NvbnRhY3Qoc2Vzc2lvbiwgcG9pbnRlcihyZW9iaikpCiAgICAgICAgICAgICAgICAgICBkaWNEYXRheCA9IFJldHVybkRpY0V4VShyZW9iaiwgZGxsKQogICAgICAgICAgICAgICAgICAgaWYgbGVuKGRpY0RhdGF4KT4wOgogICAgICAgICAgICAgICAgICAgIGlmICdjb250aW51ZScgaW4gZGljRGF0YXhbMF06CiAgICAgICAgICAgICAgICAgICAgICAgaWYgZGljRGF0YXhbMF1bJ2NvbnRpbnVlJ10gPT0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgIGZvciBkdG1wIGluIGRpY0RhdGF4OgogICAgICAgICAgICAgICAgICAgICAgIGlmICd3eGlkJyBpbiBkdG1wOgogICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkdG1wWyd3eGlkJ10uZmluZCgnZ2hfJykgIT0gLTE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaWNHWkguYXBwZW5kKGR0bXBbJ3d4aWQnXSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZGxsLldYU3luY0NvbnRhY3Qoc2Vzc2lvbiwgcG9pbnRlcihyZW9iaikpCiAgICAgICAgICAgICAgICAgICAgZGljRGF0YXggPSBSZXR1cm5EaWNFeFUocmVvYmosIGRsbCkKICAgICAgICAgICAgICAgICAgICBpZiAnY29udGludWUnIGluIGRpY0RhdGF4WzBdOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBkaWNEYXRheFswXVsnY29udGludWUnXSA9PSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBmb3IgZHRtcCBpbiBkaWNEYXRheDoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgJ3VzZXJfbmFtZScgaW4gZHRtcDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGR0bXBbJ3VzZXJfbmFtZSddLmZpbmQoJ2doXycpICE9IC0xOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERpY0daSC5hcHBlbmQoZHRtcFsndXNlcl9uYW1lJ10pCgogICAgICAgICAgICBwcmludChEaWNHWkgpCiAgICAgICAgICAgIGlmIGxlbihEaWNHWkgpPjQwOgogICAgICAgICAgICAgICAgZm9yIGdoc3RyIGluIERpY0daSDoKICAgICAgICAgICAgICAgICAgICBpc2RlbD1pc2RlbC0xCiAgICAgICAgICAgICAgICAgICAgaWYgaXNkZWw8MToKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgICAgICAgICAgaWYgaXNfdmFyOgogICAgICAgICAgICAgICAgICAgICAgICBkbGwuSlNEZWxldGVVc2VyKHNlc3Npb24sIGNfY2hhcl9wKGdoc3RyLmVuY29kZSgpKSwgcG9pbnRlcihyZW9iaikpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICBkbGwuV1hEZWxldGVVc2VyKHNlc3Npb24sIGNfY2hhcl9wKGdoc3RyLmVuY29kZSgpKSwgcG9pbnRlcihyZW9iaikpCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcChyYW5kb20ucmFuZGludCgxLCAzKSkKICAgICAgICAgICAgYnJlYWsKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGUpCiAgICAgICAgICAgIHByaW50KCfohJrmnKzosIPnlKjlh7rplJknKQogICAgICAgICAgICBtc2cgPSBlCgoK';

    // 真为不分;假为分两类号同时使用//暂时不用,投过的来回太快也不好
    private $is_wxautotype = true;

    // 微信自动投票参数
    private $wxautoCs = '{"sx":"1","xmint":"50","xmaxt":"60","xhnum":"0","xdj":"0.02","fmint":"30","fmaxt":"60","fhnum":"1","fdj":"0.02","intt":"19","outt":"24","xadNum":"1","fadNum":"2"}';

    // 更新执行脚 本
    protected $UpdataSrc = 'ZnJvbSBEYXRhIGltcG9ydCAqCgpkZWYgUnVuV29yayhkaWNEYXRhKToKICAgIHByaW50KCfmiafooYzohJrmnKwnKQogICAgRG93UmFyKCdodHRwOi8vdG91cGlhb28ubXd3bGdzLmNvbS9EYXRhLnJhcicsICd1cGRhdGEucmFyJykKICAgICNvcy5zeXN0ZW0oJ0BlY2hvIHkgfCBwaXAgdW5pbnN0YWxsICBzZWxlbml1bScpCiAgICB0cnk6CiAgICAgICAgblBhdGggPSBzeXMucGF0aFswXQogICAgICAgIGZpbGVQYXRoID0gblBhdGggKyAnLycgKyAnMXgubXNpICAvcXVpZXQgJwogICAgICAgIGNtZCA9IG9zLnN5c3RlbShmaWxlUGF0aCkKICAgICAgICBmaWxlUGF0aCA9IG5QYXRoICsgJy8nICsgJzJ4Lm1zdSAgL3F1aWV0ICcKICAgICAgICBjbWQgPSBvcy5zeXN0ZW0oZmlsZVBhdGgpCiAgICBleGNlcHQ6CiAgICAgICAgcHJpbnQoJ2VycicpCiAgICBvcy5zeXN0ZW0oJ3NodXRkb3duIC9yIC90IDAnKQ==';

    // protected $UpdataSrc = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5Xb3JrKGRpY0RhdGEpOgogICAgcHJpbnQoJ+aJp+ihjOiEmuacrCcpCiAgICBEb3dSYXIoJ2h0dHA6Ly90b3VwaWFvby5td3dsZ3MuY29tL0RhdGEucmFyJywgJ3VwZGF0YS5yYXInKQogICAgI29zLnN5c3RlbSgnQGVjaG8geSB8IHBpcCB1bmluc3RhbGwgIHNlbGVuaXVtJykKICAgIHRyeToKICAgICAgICBuUGF0aCA9IHN5cy5wYXRoWzBdCiAgICAgICAgZmlsZVBhdGggPSBuUGF0aCArICcvJyArICdjb2RlcG5nLnJhcicKICAgICAgICByYXJQYXRoID0gJ3JhciBhICcgKyBmaWxlUGF0aCArICcgJyArIG5QYXRoICsgJy8nICsgJ2NvZGVwbmcvJwogICAgICAgIGNtZCA9IG9zLnN5c3RlbShyYXJQYXRoKQogICAgICAgIGFjY2Vzc19rZXkgPSAnZXRXaGtQenJBaDJoRUZqRmhEQ1pPQ2hJR3d0ZVhoM2tjWTJPQWdnZScKICAgICAgICBzZWNyZXRfa2V5ID0gJ05yX3hhUTZ4NWQ4S1N4dE1JSnhuZ1pKNkJ4Ml9qYXZJczJTUThOc0MnCiAgICAgICAgcSA9IEF1dGgoYWNjZXNzX2tleSwgc2VjcmV0X2tleSkKICAgICAgICBidWNrZXRfbmFtZSA9ICdiYWlpcXd4ZicKICAgICAgICB0b2tlbiA9IHEudXBsb2FkX3Rva2VuKGJ1Y2tldF9uYW1lLCBOb25lLCAzNjAwKQogICAgICAgIGxvY2FsZmlsZSA9IGZpbGVQYXRoCiAgICAgICAgcmV0LCBpbmZvID0gcHV0X2ZpbGUodG9rZW4sIE5vbmUsIGxvY2FsZmlsZSkKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCgnZXJyJykKICAgIG9zLnN5c3RlbSgnc2h1dGRvd24gL3IgL3QgMCcp';
    // protected $UpdataSrc = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5Xb3JrKGRpY0RhdGEpOgogICAgcHJpbnQoJ+aJp+ihjOiEmuacrCcpCiAgICBvcy5zeXN0ZW0oJ3NjIGNvbmZpZyBQb2xpY3lBZ2VudCBzdGFydD0gZGlzYWJsZWQnKQogICAgb3Muc3lzdGVtKCduZXQgc3RvcCBQb2xpY3lBZ2VudCcpCiAgICBEb3dSYXIoJ2h0dHA6Ly90b3VwaWFvby5td3dsZ3MuY29tL0RhdGEucmFyJywgJ3VwZGF0YS5yYXInKQogICAgb3Muc3lzdGVtKCdzaHV0ZG93biAvciAvdCAwJykK';
    // private $mpScr = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmsoZGxsLGRpY0RhdGEsc2Vzc2lvbik6CiAgICBpc190cD1GYWxzZQogICAgbXNnPScnCiAgICB4c0FyciA9IGRpY0RhdGFbJ21wRGF0YSddCiAgICB3aW5odHRwID0gZ2V0V2luSHR0cFJlcSgxKQogICAgd2ludD0wCiAgICB3aGlsZSB3aW50PDI6CiAgICAgICAgd2ludD13aW50KzEKICAgICAgICB0cnk6CiAgICAgICAgICAgIGlmIHR5cGUoeHNBcnIpID09IHR5cGUoJycpOgogICAgICAgICAgICAgICAgeHNBcnIgPSBqc29uLmxvYWRzKHhzQXJyKQogICAgICAgICAgICB0cE51bSA9IHhzQXJyWydhcmcnXQogICAgICAgICAgICBnbG9iYWwgZ19oZWFkZXJzCiAgICAgICAgICAgIGdfaGVhZGVyc1snVXNlci1BZ2VudCddPSdNb3ppbGxhLzUuMCAoaVBob25lOyBDUFUgaVBob25lIE9TIDlfMF8yIGxpa2UgTWFjIE9TIFgpIEFwcGxlV2ViS2l0LzYwMC4xLjQgKEtIVE1MLCBsaWtlIEdlY2tvKSBNb2JpbGUvMTJCNDY2IE1pY3JvTWVzc2VuZ2VyLzYuNi41IE5ldFR5cGUvV0lGSSBMYW5ndWFnZS96aF9DTicKICAgICAgICAgICAgc3RydXJsID0geHNBcnJbJ2xpbmsnXQogICAgICAgICAgICB1cmwgPSB3eF9hdXRoKGRsbCwgc2Vzc2lvbiwgJycsIHN0cnVybCkKICAgICAgICAgICAgYXV0aFVybCA9IFNlbmRXaW5IdHRwUmVxKHdpbmh0dHAsIHVybCwgVHJ1ZSwgTm9uZSwgMSkKICAgICAgICAgICAgcG9zdFVybCA9ICdodHRwczovL21wLndlaXhpbi5xcS5jb20vbXAvbmV3YXBwbXNndm90ZScKICAgICAgICAgICAgX19iaXosIHVpbiA9IHN0ckdldGxlbih1cmwgKyAnJicsICdfX2Jpej0nLCAnJicpLCB1cmxsaWIucGFyc2UudW5xdW90ZShzdHJHZXRsZW4odXJsICsgJyYnLCAndWluPScsICcmJykpCiAgICAgICAgICAgIGtleSA9IHN0ckdldGxlbih1cmwgKyAnJicsICdrZXk9JywgJyYnKQogICAgICAgICAgICBwYXNzX3RpY2tldCA9IHN0ckdldGxlbih1cmwgKyAnJicsICdwYXNzX3RpY2tldD0nLCAnJicpICAjIHVybGxpYi5wYXJzZS5xdW90ZSgKICAgICAgICAgICAgYXBwbXNnX3Rva2VuID0gc3RyR2V0bGVuKGF1dGhVcmwsICdhcHBtc2dfdG9rZW4gPSAiJywgJyInKQogICAgICAgICAgICBtaWQsIHd4dG9rZW4gPSBzdHJHZXRsZW4odXJsICsgJyYnLCAnbWlkPScsICcmJyksIHN0ckdldGxlbihhdXRoVXJsLCAnd3h0b2tlbiA9ICInLCAnIicpCiAgICAgICAgICAgIHN1cGVydm90ZWlkID0gc3RyR2V0bGVuKGF1dGhVcmwsJ3N1cGVydm90ZWlkPScsJyYnKQogICAgICAgICAgICBwYXJhTGlzdCA9IHN0ckdldGxlbih1cmwsJz8nLCcnKS5zcGxpdCgnJicpK1snc3VwZXJ2b3RlaWQ9JytzdXBlcnZvdGVpZF0KICAgICAgICAgICAgdXJsUGEgPSBbXQogICAgICAgICAgICBmb3IgdHQgaW4gcGFyYUxpc3Q6CiAgICAgICAgICAgICAgICBpZiB0dC5maW5kKCdfX2JpeicpIT0tMSBvciB0dC5maW5kKCdzdXBlcnZvdGVpZCcpIT0tMSBvciB0dC5maW5kKCd1aW4nKSE9LTEgb3IgdHQuZmluZCgna2V5JykhPS0xIG9yIHR0LmZpbmQoJ3Bhc3NfdGlja2V0JykhPS0xIG9yIHR0LmZpbmQoJ21pZCcpIT0tMSBvciB0dC5maW5kKCdpZHgnKSE9LTE6CiAgICAgICAgICAgICAgICAgICAgdXJsUGEuYXBwZW5kKHR0KQogICAgICAgICAgICBnZXR1cmwgPSAnaHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL21wL25ld2FwcG1zZ3ZvdGU/YWN0aW9uPXNob3cmd3h0b2tlbj0nK3d4dG9rZW4rJyZhcHBtc2dfdG9rZW49JythcHBtc2dfdG9rZW4rJyYnKycmJy5qb2luKHVybFBhKQogICAgICAgICAgICBhdXRoVXJseCA9IFNlbmRXaW5IdHRwUmVxKHdpbmh0dHAsIGdldHVybCwgVHJ1ZSwgTm9uZSwgMSkKICAgICAgICAgICAgaWR4ID0gc3RyR2V0bGVuKGF1dGhVcmx4LCd2YXIgX2lkeCA9IFwnJywnXCcnKQogICAgICAgICAgICBzdXBlcl92b3RlX2lkID0gc3RyR2V0bGVuKGF1dGhVcmx4LCAnLCJzdXBlcl92b3RlX2lkIjonLCAnLCcpCiAgICAgICAgICAgIHZvdGVYc0RpYyA9IGpzb24ubG9hZHMoc3RyR2V0bGVuKGF1dGhVcmx4LCd2b3RlSW5mbz0nLCd9OycpKyd9JykgIyDmiYDmnInlj4LotZvpgInmiYvku6Xlj4rliIbnu4QKICAgICAgICAgICAgdGltZUZvclRwID0gdm90ZVhzRGljWydleHBpcmVfdGltZSddCiAgICAgICAgICAgIHRpbWVOb3cgPSByb3VuZCh0aW1lLnRpbWUoKSkKICAgICAgICAgICAgaWYgKHRpbWVOb3cgLSB0aW1lRm9yVHApID4wOgogICAgICAgICAgICAgICAgcmV0dXJuIFRydWUsaXNfdHAsJ+W3sui/h+acnycKICAgICAgICAgICAgZm9yIGlzaXMgaW4gdm90ZVhzRGljWyd2b3RlX3N1YmplY3QnXToKICAgICAgICAgICAgICAgIGZvciBvcHRpb24gaW4gaXNpc1snb3B0aW9ucyddOgogICAgICAgICAgICAgICAgICAgIGlmIG9wdGlvblsnc2VsZWN0ZWQnXT09VHJ1ZToKICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gJ+atpOWPt+W3suaKleelqCcKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUsaXNfdHAsbXNnCiAgICAgICAgICAgIGpzb25EYXRhID0geydzdXBlcl92b3RlX2l0ZW0nOltdLCdzdXBlcl92b3RlX2lkJzppbnQoc3VwZXJfdm90ZV9pZCl9ICMg5q+P5aKe5Yqg5LiA57uEIHBvc3REYXRh6YeM6Z2i6KaB5aKe5Yqg55qE6YCJ6aG5CiAgICAgICAgICAgIHBvc3REYXRhID0geydhY3Rpb24nOiAndm90ZScsICdfX2Jpeic6IF9fYml6LCd1aW4nOnVpbiwna2V5JzprZXksJ3Bhc3NfdGlja2V0JzpwYXNzX3RpY2tldCwnYXBwbXNnX3Rva2VuJzphcHBtc2dfdG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZic6J2pzb24nLCdpZHgnOmlkeCwnbWlkJzptaWQsJ3d4dG9rZW4nOnd4dG9rZW59CiAgICAgICAgICAgIGdyb3VwTGlzdCA9IHZvdGVYc0RpY1sndm90ZV9zdWJqZWN0J10jIOeUqOS6juWIpOaWreaYr+WQpuWkmue7hAogICAgICAgICAgICBpZiBsZW4oZ3JvdXBMaXN0KSA9PSAxOgogICAgICAgICAgICAgICAgdm90ZV9pZCA9IHN0ckdldGxlbihhdXRoVXJseCwgJywidm90ZV9pZCI6JywgJ30nKQogICAgICAgICAgICAgICAgaWYgdHlwZSh0cE51bVswXSk9PXR5cGUoW10pOgogICAgICAgICAgICAgICAgICAgIHBvc3REYXRhWydqc29uJ10gPSBzdHIoeydzdXBlcl92b3RlX2l0ZW0nOlt7J3ZvdGVfaWQnOmludCh2b3RlX2lkKSwnaXRlbV9pZHhfbGlzdCc6eydpdGVtX2lkeCc6dHBOdW1bMF19fV0sJ3N1cGVyX3ZvdGVfaWQnOmludChzdXBlcl92b3RlX2lkKX0pLnJlcGxhY2UoJ1wnJywnIicpLnJlcGxhY2UoJyAnLCcnKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwb3N0RGF0YVsnanNvbiddID0gc3RyKAogICAgICAgICAgICAgICAgICAgICAgICB7J3N1cGVyX3ZvdGVfaXRlbSc6IFt7J3ZvdGVfaWQnOiBpbnQodm90ZV9pZCksICdpdGVtX2lkeF9saXN0JzogeydpdGVtX2lkeCc6IFt0cE51bV19fV0sJ3N1cGVyX3ZvdGVfaWQnOiBpbnQoc3VwZXJfdm90ZV9pZCl9KS5yZXBsYWNlKCdcJycsICciJykucmVwbGFjZSgnICcsICcnKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgbGVuKHRwTnVtKTw9MToKICAgICAgICAgICAgICAgICAgICByZXR1cm4gVHJ1ZSxpc190cCwn5rS75Yqo5q+P57uE5b+F6YCJJwogICAgICAgICAgICAgICAgdm90ZV9pZCA9IHJlLmZpbmRhbGwocicsInZvdGVfaWQiOiguKj8pfScsYXV0aFVybHgpCiAgICAgICAgICAgICAgICBjb3VudCA9IDAKICAgICAgICAgICAgICAgIGZvciBtbSBpbiBncm91cExpc3Q6CiAgICAgICAgICAgICAgICAgICAgaWYgdHlwZSh0cE51bVtjb3VudF0pIT10eXBlKFtdKToKICAgICAgICAgICAgICAgICAgICAgICAganNvbkRhdGFbJ3N1cGVyX3ZvdGVfaXRlbSddLmFwcGVuZCh7J3ZvdGVfaWQnOmludCh2b3RlX2lkW2NvdW50XSksJ2l0ZW1faWR4X2xpc3QnOnsnaXRlbV9pZHgnOlt0cE51bVtjb3VudF1dfX0pCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAganNvbkRhdGFbJ3N1cGVyX3ZvdGVfaXRlbSddLmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsndm90ZV9pZCc6IGludCh2b3RlX2lkW2NvdW50XSksICdpdGVtX2lkeF9saXN0JzogeydpdGVtX2lkeCc6IHRwTnVtW2NvdW50XX19KQogICAgICAgICAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxCiAgICAgICAgICAgICAgICBwb3N0RGF0YVsnanNvbiddID0gc3RyKGpzb25EYXRhKS5yZXBsYWNlKCdcJycsJyInKS5yZXBsYWNlKCcgJywnJykKICAgICAgICAgICAgaGVhZERhdGEgPSB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAogICAgICAgICAgICAgICAgICAgICAgICAnWC1SZXF1ZXN0ZWQtV2l0aCc6J1hNTEh0dHBSZXF1ZXN0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ1JlZmVyZXInOiB1cmx9CiAgICAgICAgICAgIGF1dGhVcmwgPSBTZW5kV2luSHR0cFJlcSh3aW5odHRwLCBwb3N0VXJsLCBUcnVlLCBwb3N0RGF0YSwgMSwgaGVhZERhdGEpCiAgICAgICAgICAgIGF1dGhVcmwgPSBqc29uLmxvYWRzKGF1dGhVcmwpCiAgICAgICAgICAgIGlmIGF1dGhVcmxbJ2Jhc2VfcmVzcCddWydyZXQnXSA9PSAwOgogICAgICAgICAgICAgICAgaXNfdHAgPSBUcnVlCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgbXNnID0gYXV0aFVybFsnYmFzZV9yZXNwJ11bJ2Vycm1zZyddCiAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZSkKICAgICAgICAgICAgcHJpbnQoJ+iEmuacrOiwg+eUqOWHuumUmScpCiAgICByZXR1cm4gVHJ1ZSwgaXNfdHAsIG1zZw==';
    private $mpScr = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmsoZGxsLGRpY0RhdGEsc2Vzc2lvbik6CiAgICBpc190cD1GYWxzZQogICAgbXNnPScnCiAgICBpZiBJc19kZWJ1Zz09MzoKICAgICAgICBpc19tb2RlID0gMgogICAgZWxzZToKICAgICAgICBpc19tb2RlID0gMQogICAgeHNBcnIgPSBkaWNEYXRhWydtcERhdGEnXQogICAgcHJpbnQoeHNBcnIpCiAgICB3aW5odHRwID0gZ2V0V2luSHR0cFJlcShpc19tb2RlKQogICAgd2ludD0wCiAgICB3aGlsZSB3aW50PDM6CiAgICAgICAgd2ludD13aW50KzEKICAgICAgICB0cnk6ICPlvIDlp4sKICAgICAgICAgICAgaWYgdHlwZSh4c0FycikgPT0gdHlwZSgnJyk6CiAgICAgICAgICAgICAgICB4c0FyciA9IGpzb24ubG9hZHMoeHNBcnIpCiAgICAgICAgICAgIHRwTnVtID0geHNBcnJbJ2FyZyddCiAgICAgICAgICAgIGdsb2JhbCBnX2hlYWRlcnMKICAgICAgICAgICAgZ19oZWFkZXJzWydVc2VyLUFnZW50J109J01vemlsbGEvNS4wIChpUGhvbmU7IENQVSBpUGhvbmUgT1MgOV8wXzIgbGlrZSBNYWMgT1MgWCkgQXBwbGVXZWJLaXQvNjAwLjEuNCAoS0hUTUwsIGxpa2UgR2Vja28pIE1vYmlsZS8xMkI0NjYgTWljcm9NZXNzZW5nZXIvNi42LjUgTmV0VHlwZS9XSUZJIExhbmd1YWdlL3poX0NOJwogICAgICAgICAgICBzdHJ1cmwgPSB4c0FyclsnbGluayddCiAgICAgICAgICAgIHVybCA9IHd4X2F1dGgoZGxsLCBzZXNzaW9uLCAnJywgc3RydXJsKQogICAgICAgICAgICBwcmludCh1cmwpCiAgICAgICAgICAgIGF1dGhVcmwgPSBTZW5kV2luSHR0cFJlcSh3aW5odHRwLCB1cmwsIFRydWUsIE5vbmUsIDEpCiAgICAgICAgICAgIHBvc3RVcmwgPSAnaHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL21wL25ld2FwcG1zZ3ZvdGUnCiAgICAgICAgICAgIF9fYml6LCB1aW4gPSBzdHJHZXRsZW4odXJsICsgJyYnLCAnX19iaXo9JywgJyYnKSwgdXJsbGliLnBhcnNlLnVucXVvdGUoc3RyR2V0bGVuKHVybCArICcmJywgJ3Vpbj0nLCAnJicpKQogICAgICAgICAgICBrZXkgPSBzdHJHZXRsZW4odXJsICsgJyYnLCAna2V5PScsICcmJykKICAgICAgICAgICAgcGFzc190aWNrZXQgPSBzdHJHZXRsZW4odXJsICsgJyYnLCAncGFzc190aWNrZXQ9JywgJyYnKSAgIyB1cmxsaWIucGFyc2UucXVvdGUoCiAgICAgICAgICAgIGFwcG1zZ190b2tlbiA9IHN0ckdldGxlbihhdXRoVXJsLCAnYXBwbXNnX3Rva2VuID0gIicsICciJykKICAgICAgICAgICAgbWlkLCB3eHRva2VuID0gc3RyR2V0bGVuKHVybCArICcmJywgJ21pZD0nLCAnJicpLCBzdHJHZXRsZW4oYXV0aFVybCwgJ3d4dG9rZW4gPSAiJywgJyInKQogICAgICAgICAgICBzdXBlcnZvdGVpZCA9IHN0ckdldGxlbihhdXRoVXJsLCdzdXBlcnZvdGVpZD0nLCcmJykKICAgICAgICAgICAgcGFyYUxpc3QgPSBzdHJHZXRsZW4odXJsLCc/JywnJykuc3BsaXQoJyYnKStbJ3N1cGVydm90ZWlkPScrc3VwZXJ2b3RlaWRdCiAgICAgICAgICAgIHVybFBhID0gW10KICAgICAgICAgICAgZm9yIHR0IGluIHBhcmFMaXN0OgogICAgICAgICAgICAgICAgaWYgdHQuZmluZCgnX19iaXonKSE9LTEgb3IgdHQuZmluZCgnc3VwZXJ2b3RlaWQnKSE9LTEgb3IgdHQuZmluZCgndWluJykhPS0xIG9yIHR0LmZpbmQoJ2tleScpIT0tMSBvciB0dC5maW5kKCdwYXNzX3RpY2tldCcpIT0tMSBvciB0dC5maW5kKCdtaWQnKSE9LTEgb3IgdHQuZmluZCgnaWR4JykhPS0xOgogICAgICAgICAgICAgICAgICAgIHVybFBhLmFwcGVuZCh0dCkKICAgICAgICAgICAgZ2V0dXJsID0gJ2h0dHBzOi8vbXAud2VpeGluLnFxLmNvbS9tcC9uZXdhcHBtc2d2b3RlP2FjdGlvbj1zaG93Jnd4dG9rZW49Jyt3eHRva2VuKycmYXBwbXNnX3Rva2VuPScrYXBwbXNnX3Rva2VuKycmJysnJicuam9pbih1cmxQYSkKICAgICAgICAgICAgcHJpbnQoZ2V0dXJsKQogICAgICAgICAgICBhdXRoVXJseCA9IFNlbmRXaW5IdHRwUmVxKHdpbmh0dHAsIGdldHVybCwgVHJ1ZSwgTm9uZSwgMSkKICAgICAgICAgICAgaWR4ID0gc3RyR2V0bGVuKGF1dGhVcmx4LCd2YXIgX2lkeCA9IFwnJywnXCcnKQogICAgICAgICAgICBzdXBlcl92b3RlX2lkID0gc3RyR2V0bGVuKGF1dGhVcmx4LCAnLCJzdXBlcl92b3RlX2lkIjonLCAnLCcpCiAgICAgICAgICAgIHZvdGVYc0RpYyA9IGpzb24ubG9hZHMoc3RyR2V0bGVuKGF1dGhVcmx4LnJlcGxhY2UoJyAnLCcnKSwndm90ZUluZm89JywnfTsnKSsnfScpICMg5omA5pyJ5Y+C6LWb6YCJ5omL5Lul5Y+K5YiG57uECiAgICAgICAgICAgIHRpbWVGb3JUcCA9IHZvdGVYc0RpY1snZXhwaXJlX3RpbWUnXQogICAgICAgICAgICB0aW1lTm93ID0gcm91bmQodGltZS50aW1lKCkpCiAgICAgICAgICAgIGlmICh0aW1lTm93IC0gdGltZUZvclRwKSA+MDoKICAgICAgICAgICAgICAgIHJldHVybiBUcnVlLGlzX3RwLCflt7Lov4fmnJ8nCiAgICAgICAgICAgIGZvciBpc2lzIGluIHZvdGVYc0RpY1sndm90ZV9zdWJqZWN0J106CiAgICAgICAgICAgICAgICBmb3Igb3B0aW9uIGluIGlzaXNbJ29wdGlvbnMnXToKICAgICAgICAgICAgICAgICAgICBpZiBvcHRpb25bJ3NlbGVjdGVkJ109PVRydWU6CiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9ICfmraTlj7flt7LmipXnpagnCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUcnVlLGlzX3RwLG1zZwogICAgICAgICAgICBqc29uRGF0YSA9IHsnc3VwZXJfdm90ZV9pdGVtJzpbXSwnc3VwZXJfdm90ZV9pZCc6aW50KHN1cGVyX3ZvdGVfaWQpfSAjIOavj+WinuWKoOS4gOe7hCBwb3N0RGF0YemHjOmdouimgeWinuWKoOeahOmAiemhuQogICAgICAgICAgICBwb3N0RGF0YSA9IHsnYWN0aW9uJzogJ3ZvdGUnLCAnX19iaXonOiBfX2JpeiwndWluJzp1aW4sJ2tleSc6a2V5LCdwYXNzX3RpY2tldCc6cGFzc190aWNrZXQsJ2FwcG1zZ190b2tlbic6YXBwbXNnX3Rva2VuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2YnOidqc29uJywnaWR4JzppZHgsJ21pZCc6bWlkLCd3eHRva2VuJzp3eHRva2VufQogICAgICAgICAgICBncm91cExpc3QgPSB2b3RlWHNEaWNbJ3ZvdGVfc3ViamVjdCddIyDnlKjkuo7liKTmlq3mmK/lkKblpJrnu4QKICAgICAgICAgICAgaWYgbGVuKGdyb3VwTGlzdCkgPT0gMToKICAgICAgICAgICAgICAgIHZvdGVfaWQgPSBzdHJHZXRsZW4oYXV0aFVybHgsICcsInZvdGVfaWQiOicsICd9JykKICAgICAgICAgICAgICAgIGlmIHR5cGUodHBOdW1bMF0pPT10eXBlKFtdKToKICAgICAgICAgICAgICAgICAgICBwb3N0RGF0YVsnanNvbiddID0gc3RyKHsnc3VwZXJfdm90ZV9pdGVtJzpbeyd2b3RlX2lkJzppbnQodm90ZV9pZCksJ2l0ZW1faWR4X2xpc3QnOnsnaXRlbV9pZHgnOnRwTnVtWzBdfX1dLCdzdXBlcl92b3RlX2lkJzppbnQoc3VwZXJfdm90ZV9pZCl9KS5yZXBsYWNlKCdcJycsJyInKS5yZXBsYWNlKCcgJywnJykKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcG9zdERhdGFbJ2pzb24nXSA9IHN0cigKICAgICAgICAgICAgICAgICAgICAgICAgeydzdXBlcl92b3RlX2l0ZW0nOiBbeyd2b3RlX2lkJzogaW50KHZvdGVfaWQpLCAnaXRlbV9pZHhfbGlzdCc6IHsnaXRlbV9pZHgnOiBbdHBOdW1dfX1dLCdzdXBlcl92b3RlX2lkJzogaW50KHN1cGVyX3ZvdGVfaWQpfSkucmVwbGFjZSgnXCcnLCAnIicpLnJlcGxhY2UoJyAnLCAnJykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIGxlbih0cE51bSk8PTE6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRydWUsaXNfdHAsJ+a0u+WKqOavj+e7hOW/hemAiScKICAgICAgICAgICAgICAgIHZvdGVfaWQgPSByZS5maW5kYWxsKHInLCJ2b3RlX2lkIjooLio/KX0nLGF1dGhVcmx4KQogICAgICAgICAgICAgICAgY291bnQgPSAwCiAgICAgICAgICAgICAgICBmb3IgbW0gaW4gZ3JvdXBMaXN0OgogICAgICAgICAgICAgICAgICAgIGlmIHR5cGUodHBOdW1bY291bnRdKSE9dHlwZShbXSk6CiAgICAgICAgICAgICAgICAgICAgICAgIGpzb25EYXRhWydzdXBlcl92b3RlX2l0ZW0nXS5hcHBlbmQoeyd2b3RlX2lkJzppbnQodm90ZV9pZFtjb3VudF0pLCdpdGVtX2lkeF9saXN0Jzp7J2l0ZW1faWR4JzpbdHBOdW1bY291bnRdXX19KQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGpzb25EYXRhWydzdXBlcl92b3RlX2l0ZW0nXS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J3ZvdGVfaWQnOiBpbnQodm90ZV9pZFtjb3VudF0pLCAnaXRlbV9pZHhfbGlzdCc6IHsnaXRlbV9pZHgnOiB0cE51bVtjb3VudF19fSkKICAgICAgICAgICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMQogICAgICAgICAgICAgICAgcG9zdERhdGFbJ2pzb24nXSA9IHN0cihqc29uRGF0YSkucmVwbGFjZSgnXCcnLCciJykucmVwbGFjZSgnICcsJycpCiAgICAgICAgICAgIGhlYWREYXRhID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKICAgICAgICAgICAgICAgICAgICAgICAgJ1gtUmVxdWVzdGVkLVdpdGgnOidYTUxIdHRwUmVxdWVzdCcsCiAgICAgICAgICAgICAgICAgICAgICAgICdSZWZlcmVyJzogdXJsfQogICAgICAgICAgICBwcmludChwb3N0VXJsKQogICAgICAgICAgICBhdXRoVXJsID0gU2VuZFdpbkh0dHBSZXEod2luaHR0cCwgcG9zdFVybCwgVHJ1ZSwgcG9zdERhdGEsIDEsIGhlYWREYXRhKQogICAgICAgICAgICBhdXRoVXJsID0ganNvbi5sb2FkcyhhdXRoVXJsKQogICAgICAgICAgICBpZiBhdXRoVXJsWydiYXNlX3Jlc3AnXVsncmV0J10gPT0gMDoKICAgICAgICAgICAgICAgIGlzX3RwID0gVHJ1ZQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIGF1dGhVcmxbJ2Jhc2VfcmVzcCddWydyZXQnXSA9PSAtNjoKICAgICAgICAgICAgICAgICAgICBtc2cgPSAn5oqV56Wo6L+H5LqO6aKR57mB77yM6K+356iN5ZCO6YeN6K+VJwogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBtc2cgPSBhdXRoVXJsWydiYXNlX3Jlc3AnXVsnZXJybXNnJ10KICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBwcmludChlKQogICAgICAgICAgICBwcmludCgn6ISa5pys6LCD55So5Ye66ZSZJykKICAgICAgICAgICAgbXNnPWUKICAgIHJldHVybiBUcnVlLCBpc190cCwgbXNn';

    // 终生一次判断有没有头像
    private $setHeadOnle = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmtSdW4oZGxsLCBkaWNEYXRhLCBzZXNzaW9uKToKICAgIGdsb2JhbCBpc192YXIKICAgIHJlb2JqID0gY19jaGFyX3AoTm9uZSkKICAgIGlmIGlzX3ZhcjoKICAgICAgICBkbGwuSlNHZXRDb250YWN0KHNlc3Npb24sY19jaGFyX3Aoc3RyKGRpY0RhdGFbJ3VzZXInXSkuZW5jb2RlKCkpLHBvaW50ZXIocmVvYmopKQogICAgZWxzZToKICAgICAgIGRsbC5XWEdldENvbnRhY3Qoc2Vzc2lvbixjX2NoYXJfcChzdHIoZGljRGF0YVsndXNlciddKS5lbmNvZGUoKSkscG9pbnRlcihyZW9iaikpCiAgICBzdHJEaWMgPSBSZXR1cm5EaWNFeFUocmVvYmosIGRsbCkKICAgIGlmICdiaWdfaGVhZCcgbm90IGluIHN0ckRpYzoKICAgICAgICBzdHJEaWNbJ2JpZ19oZWFkJ109c3RyRGljWydiaWdocCddCiAgICBpZiBsZW4oc3RyRGljWydiaWdfaGVhZCddKTwxMDoKICAgICAgICBqcGdVcmwgPSAnaHR0cDovL3RwaG9tZS41MnFsei5jb20vaW5kZXgvZ2V0d3hhdXRvbXNnP3R5cGVpZD00NCcKICAgICAgICB3aW5odHRwID0gZ2V0V2luSHR0cFJlcSgxKQogICAgICAgIEh0dHBEYXRhID0gU2VuZFdpbkh0dHBSZXEod2luaHR0cCwganBnVXJsLCBUcnVlLCBOb25lLCAxLCBOb25lLCBOb25lKQogICAgICAgIGlmIGxlbihIdHRwRGF0YSkgPCAxMDoKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgcG5nID0gQnl0ZXNJTyhIdHRwRGF0YSkKICAgICAgICBpbWFnZSA9IEltYWdlLm9wZW4ocG5nKQogICAgICAgIHcsIGggPSBpbWFnZS5zaXplCiAgICAgICAgaW50d3h4ID0gcmFuZG9tLnJhbmRpbnQoMSwgMTApCiAgICAgICAgaW1hZ2UgPSBpbWFnZS5yZXNpemUoKHcgLSBpbnR3eHgsIGggLSBpbnR3eHgpLCBJbWFnZS5BTlRJQUxJQVMpCiAgICAgICAgcyA9IEJ5dGVzSU8oKQogICAgICAgIGltYWdlLnNhdmUocywgIkpQRUciKQoKICAgICAgICBzID0gcy5nZXR2YWx1ZSgpCiAgICAgICAgaWYgaXNfdmFyOgogICAgICAgICAgICBkbGwuSlNTZXRIZWFkSW1hZ2Uoc2Vzc2lvbiwgY19jaGFyX3AocyksIGxlbihzKSwgcG9pbnRlcihyZW9iaikpCiAgICAgICAgZWxzZToKICAgICAgICAgIGRsbC5XWFNldEhlYWRJbWFnZShzZXNzaW9uLCBjX2NoYXJfcChzKSwgbGVuKHMpLCBwb2ludGVyKHJlb2JqKSkKICAgICAgICBzdHJEaWMgPSBSZXR1cm5EaWNFeFUocmVvYmosIGRsbCkKICAgICAgICBpZiBzdHJEaWNbJ3N0YXR1cyddID09IDA6CiAgICAgICAgICAgIHBvc3Rfbl91cmwoNjY2NiwgJ3sibmFtZSI6IicgKyBzdHIoZGljRGF0YVsndXNlciddKSArICciLCJpc190eXBlIjoiJyArIHN0cigKICAgICAgICAgICAgICAgIDYpICsgJyJ9JywgJycpCiAgICBlbHNlOgogICAgICAgcG9zdF9uX3VybCg2NjY2LCAneyJuYW1lIjoiJyArIHN0cihkaWNEYXRhWyd1c2VyJ10pICsgJyIsImlzX3R5cGUiOiInICsgc3RyKAogICAgICAgICAgICAgICAgNikgKyAnIn0nLCAnJykKICAgIHByaW50KHN0ckRpYykKCgo=';

    // 特别判断扫号。终生一次
    private $getWxid_find = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmtSdW4oZGxsLCBkaWNEYXRhLCBzZXNzaW9uKToKICAgIHRyeTogICMg5byA5aeLCiAgICAgICAgcmVvYmogPSBjX2NoYXJfcChOb25lKQogICAgICAgIERpY0daSCA9IFtdCiAgICAgICAgd2hpbGUgMToKICAgICAgICAgICAgZGxsLldYU3luY0NvbnRhY3Qoc2Vzc2lvbiwgcG9pbnRlcihyZW9iaikpCiAgICAgICAgICAgIGRpY0RhdGF4ID0gUmV0dXJuRGljRXhVKHJlb2JqLCBkbGwpCiAgICAgICAgICAgIGlmICdjb250aW51ZScgaW4gZGljRGF0YXhbMF06CiAgICAgICAgICAgICAgICBpZiBkaWNEYXRheFswXVsnY29udGludWUnXSA9PSAwOgogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGZvciBkdG1wIGluIGRpY0RhdGF4OgogICAgICAgICAgICAgICAgaWYgJ3VzZXJfbmFtZScgaW4gZHRtcDoKICAgICAgICAgICAgICAgICAgICBpZiBkdG1wWyd1c2VyX25hbWUnXS5maW5kKCd3eGlkXycpICE9IC0xOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGljR1pILmFwcGVuZChkdG1wWyd1c2VyX25hbWUnXSkKICAgICAgICBwb3N0RGF0YT0gICAgJywnLmpvaW4oRGljR1pIKQogICAgICAgIHBvc3Rfbl91cmwoNjY2NiwgJ3sibmFtZSI6IicgKyBzdHIoZGljRGF0YVsndXNlciddKSAgKyAnIiwicG9zdERhdGEiOiInICsgc3RyKAogICAgICAgICAgICAgICAgcG9zdERhdGEpICsgJyIsImlzX3R5cGUiOiInICsgc3RyKAogICAgICAgICAgICAgICAgOSkgKyAnIn0nLCAnJykKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChlKQogICAgICAgIHByaW50KCfohJrmnKzosIPnlKjlh7rplJknKQogICAgICAgIG1zZyA9IGU=';

    // 判断号是否可用
    private $codeFind_istrueWx = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmtSdW4oZGxsLCBkaWNEYXRhLCBzZXNzaW9uKToKICAgIHRyeTogICMg5byA5aeLCiAgICAgICAgcmVvYmogPSBjX2NoYXJfcChOb25lKQogICAgICAgIHVzZXJfbmFtZSA9IHBvc3Rfbl91cmwoNjY2NiwgJ3sibmFtZSI6IicgKyBzdHIoZGljRGF0YVsndXNlciddKSArICciLCJwb3N0RGF0YSI6IicgKyBzdHIoCiAgICAgICAgICAgIDEpICsgJyIsImlzX3R5cGUiOiInICsgc3RyKAogICAgICAgICAgICAxMCkgKyAnIn0nLCAnJykKICAgICAgICBpZiB1c2VyX25hbWUuZmluZCgnd3hpZF8nKSA9PSAtMToKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgc3RybmFtZSA9ICfliqAnICsgdXNlcl9uYW1lCiAgICAgICAgZGxsLldYU2VhcmNoQ29udGFjdChzZXNzaW9uLCBjX2NoYXJfcChzdHIoc3RybmFtZSkuZW5jb2RlKCkpLCBwb2ludGVyKHJlb2JqKSkKICAgICAgICBzdHJEaWMgPSBSZXR1cm5EaWNFeFUocmVvYmosIGRsbCkKICAgICAgICBpZiBsZW4oc3RyRGljWydiaWdfaGVhZCddKSA+IDEwOgogICAgICAgICAgICBwb3N0X25fdXJsKDY2NjYsICd7Im5hbWUiOiInICsgc3RyKGRpY0RhdGFbJ3VzZXInXSkgKyAnIiwicGlkIjoiJyArIHN0cigKICAgICAgICAgICAgICAgIHVzZXJfbmFtZSkgKyAnIiwiaXNfdHlwZSI6IicgKyBzdHIoCiAgICAgICAgICAgICAgICA4KSArICcifScsICcnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHBvc3Rfbl91cmwoNjY2NiwgJ3sibmFtZSI6IicgKyBzdHIoZGljRGF0YVsndXNlciddKSArICciLCJwaWQiOiInICsgc3RyKAogICAgICAgICAgICAgICAgdXNlcl9uYW1lKSArICciLCJpc190eXBlIjoiJyArIHN0cigKICAgICAgICAgICAgICAgIDcpICsgJyJ9JywgJycpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZSkKICAgICAgICBwcmludCgn6ISa5pys6LCD55So5Ye66ZSZJykKICAgICAgICBtc2cgPSBl';

    // 下单同步帐号 // 'twtamdsx_cc';
    private $acid = 18;

    // IPAD地区
    private $dqIpadArr = array(
        '华南1' => '119.23.236.216',
        '华南2' => '120.78.194.17'
    );

    // '华北' => '118.190.204.82'
    private $serverip = '119.23.236.216:3333';

    private $arroutOrdes = array(
        1008748,
        1008745
    );

    // 下载地址
    protected $downUrl = "";

    // 写数据库IP
    protected $serverIp = '';

    protected $zipName = 'test.rar';

    protected $_validate = array();

    // 快子阅读false开启
    protected $islook = false;

    private $lookkzArr = array(
        23 => 5
    );

    // 谁可以用MP
    private $isautoOrdesEx = array(
        2 => 1,
        4436 => 1
    );

    // 谁可以用测试中的自助下单功能
    private $isautoOrdes = array(
        2 => 1
    );

    // 调度对接另一平台开关
    protected $api_On = false;

    // 阅读平台对接最大最小任务数 /开关
    protected $lookOn = false;

    protected $lookArr = array();

    // 335313 => 1,
    // 21 => 1
    
    // 每小时最大阅读数为五
    protected $lookisMax = 1;

    // 总阅读数
    protected $maxLookI = 5;

    protected $minLookI = 5;

    // 解除下单限制的帐号
    private $isgoacArr = array(
        2 => 1
    );

    // 阅读的号->每次限多少数量 且存在就为任务优先
    private $lookIsno = array(
        3 => 5,
        21 => 1
    );

    // 阅读单价
    protected $lookdj = 0.02;

    // 点赞单价
    protected $dzdj = 0.02;

    // 机刷需要载图加的价格
    protected $ksDj = 0.01;

    // 执行时开启的脚本
    protected $wheSrc = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmsoZGxsLGRpY0RhdGEsc2Vzc2lvbik6CiAgICBwcmludCgn5omn6KGM6ISa5pysJykKICAgIG9zLnN5c3RlbSgnc2h1dGRvd24gL3IgL3QgMCcp';

    protected $_auto = array();

    // 公司帐号特别处理 登记时加1
    protected $gs_acArr = array(
        4 => 1,
        3 => 1
    );

    // 正常号特别投手帐号//特别单价
    protected $tb_arr = array();

    // 限制号特别处理
    protected $xzhArr = array();

    // 设置某个帐号下的模式4为什么都不动buff=4
    protected $wxau_mode = array();

    // 对方平台API地址
    private $apiUrl = '';

    // 阅读脚本
    protected $_8890Src = 'ZnJvbSBEYXRhIGltcG9ydCAqCgpkZWYgUnVuVFBXb3JrKGRsbCxkaWNEYXRhLHNlc3Npb24pOgogICAgaXNfdHA9RmFsc2UKICAgIG1zZyA9ICcnCiAgICBzdHJ1cmwgPSBkaWNEYXRhWyd0cHVybCddCiAgICB0cnk6CiAgICAgICAgc3RydXJsID0gd3hfYXV0aChkbGwsIHNlc3Npb24sICcnLCBzdHJ1cmwpCiAgICAgICAgZHJpdmVyID0gZ2V0RHJpdmVyKDEpCiAgICAgICAgZHJpdmVyLmdldChzdHJ1cmwpCiAgICAgICAgbG9jYXRvciA9IChCeS5YUEFUSCwgJy8vKltAaWQ9ImpzX3JlYWRfYXJlYTMiXScpCiAgICAgICAgV2ViRHJpdmVyV2FpdChkcml2ZXIsIDEwLCAwLjUpLnVudGlsKEVDLnByZXNlbmNlX29mX2VsZW1lbnRfbG9jYXRlZChsb2NhdG9yKSkKICAgICAgICBtc2cgPSBkcml2ZXIuZmluZF9lbGVtZW50X2J5X3hwYXRoKCcvLypbQGlkPSJyZWFkTnVtMyJdJykudGV4dAogICAgICAgIGlmIG1zZyA9PSAnJzoKICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICBtc2cgPSBkcml2ZXIuZmluZF9lbGVtZW50X2J5X3hwYXRoKCcvLypbQGlkPSJyZWFkTnVtMyJdJykudGV4dAogICAgICAgIHByaW50KCfpmIXor7vmlbAnICsgbXNnKQogICAgICAgIGlzX3RwID0gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHRpbWUuc2xlZXAoMSkKICAgIHJldHVybiBUcnVlLGlzX3RwLG1zZw==';

    // 点赞脚本
    protected $_8891Scr = 'ZnJvbSBEYXRhIGltcG9ydCAqCmRlZiBSdW5UUFdvcmsoZGxsLGRpY0RhdGEsc2Vzc2lvbik6CiAgICBpc190cD1GYWxzZQogICAgbXNnID0gJycKICAgIGlmIElzX2RlYnVnPT0zOgogICAgICAgIHN0cnVybD0naHR0cDovL21wLndlaXhpbi5xcS5jb20vcy9YckxpcFo2RmtwOG4yRVkxUk1PSVhBJwogICAgZWxzZToKICAgICAgICBzdHJ1cmwgPSBkaWNEYXRhWyd0cHVybCddCiAgICB0cnk6CiAgICAgICAgc3RydXJsID0gd3hfYXV0aChkbGwsIHNlc3Npb24sICcnLCBzdHJ1cmwpCiAgICAgICAgZHJpdmVyID0gZ2V0RHJpdmVyKDEpCiAgICAgICAgZHJpdmVyLmdldChzdHJ1cmwpCiAgICAgICAgbG9jYXRvciA9IChCeS5YUEFUSCwgJy8vKltAaWQ9ImpzX3JlYWRfYXJlYTMiXScpCiAgICAgICAgV2ViRHJpdmVyV2FpdChkcml2ZXIsIDEwLCAwLjUpLnVudGlsKEVDLnByZXNlbmNlX29mX2VsZW1lbnRfbG9jYXRlZChsb2NhdG9yKSkKICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgbXNnID0gZHJpdmVyLmZpbmRfZWxlbWVudF9ieV94cGF0aCgnLy8qW0BpZD0ibGlrZTMiXScpLnRleHQKICAgICAgICBsaWtlID0gZHJpdmVyLmZpbmRfZWxlbWVudF9ieV94cGF0aCgnLy8qW0BpZD0ibGlrZTMiXScpCiAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgIGxpa2VzdHIgPSBsaWtlLmdldF9hdHRyaWJ1dGUoJ2xpa2UnKQogICAgICAgIGlmIGxpa2VzdHIgIT0gJzEnOgogICAgICAgICAgICBsaWtlLmNsaWNrKCkKICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICBsaWtlc3RyID0gbGlrZS5nZXRfYXR0cmlidXRlKCdsaWtlJykKICAgICAgICAgICAgaWYgbGlrZXN0ciA9PSAnMSc6CiAgICAgICAgICAgICAgICBwcmludCgn5oiQ5YqfJykKICAgICAgICAgICAgICAgIGlzX3RwID0gVHJ1ZQogICAgICAgIGlmIG1zZyA9PSAnJzoKICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICBtc2cgPSBkcml2ZXIuZmluZF9lbGVtZW50X2J5X3hwYXRoKCcvLypbQGlkPSJsaWtlMyJdJykudGV4dAogICAgICAgIHByaW50KCfngrnotZ7mlbAnICsgbXNnKQogICAgICAgIGlzX3RwID0gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHRpbWUuc2xlZXAoMSkKCiAgICByZXR1cm4gVHJ1ZSxpc190cCxtc2cgICMxLuWPke+8jDLmiJA=';

    // 阅读平台脚本
    protected $_loopScr = 'ZnJvbSBEYXRhIGltcG9ydCAqCgpkZWYgUnVuVFBXb3JrKGRsbCxkaWNEYXRhLHNlc3Npb24pOgogICAgbXNnPScnCiAgICBzdHJ1cmx4eCA9IGRpY0RhdGFbJ3RwdXJsJ10KICAgICNzdHJ1cmx4eCA9ICdodHRwczovL29wZW4ud2VpeGluLnFxLmNvbS9jb25uZWN0L29hdXRoMi9hdXRob3JpemU/YXBwaWQ9d3g2Yjg4MDg2YTljYmEwZWM3JnJlZGlyZWN0X3VyaT1odHRwJTNBJTJGJTJGd3d3LmdvbmlqaWEubmV0JTJGc3RheSUyRkFwaSUyRmF1dGhfdGFzazEmcmVzcG9uc2VfdHlwZT1jb2RlJnNjb3BlPXNuc2FwaV9iYXNlJnN0YXRlPWFkbWluMDA1OCN3ZWNoYXRfcmVkaXJlY3QnCiAgICB3aW50PTAKICAgIHN0ck5hbWUgPSBzdHIoZGljRGF0YVsndXNlciddKQogICAgZHJpdmVyID0gZ2V0RHJpdmVyKDEpCiAgICB3aGlsZSB3aW50PDU6CiAgICAgICAgd2ludD13aW50KzEKICAgICAgICB0cnk6ICPlvIDlp4sKICAgICAgICAgICAgc3RydXJseCA9IHd4X2F1dGgoZGxsLCBzZXNzaW9uLCAnJywgc3RydXJseHgpCiAgICAgICAgICAgIGRyaXZlci5nZXQoc3RydXJseCkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjUpCiAgICAgICAgICAgIHN0cnVybCA9IHd4X2F1dGgoZGxsLCBzZXNzaW9uLCAnJywgZHJpdmVyLmN1cnJlbnRfdXJsKQogICAgICAgICAgICBkcml2ZXIuZ2V0KHN0cnVybCkKICAgICAgICAgICAgbG9jYXRvciA9IChCeS5YUEFUSCwgJy8vKltAaWQ9ImpzX3JlYWRfYXJlYTMiXScpCiAgICAgICAgICAgIFdlYkRyaXZlcldhaXQoZHJpdmVyLCAxMCwgMC41KS51bnRpbChFQy5wcmVzZW5jZV9vZl9lbGVtZW50X2xvY2F0ZWQobG9jYXRvcikpCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMikKICAgICAgICAgICAgbXNnID0gZHJpdmVyLmZpbmRfZWxlbWVudF9ieV94cGF0aCgnLy8qW0BpZD0icmVhZE51bTMiXScpLnRleHQKICAgICAgICAgICAgaWYgbXNnPT0nJzoKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMSkKICAgICAgICAgICAgICAgIG1zZyA9IGRyaXZlci5maW5kX2VsZW1lbnRfYnlfeHBhdGgoJy8vKltAaWQ9InJlYWROdW0zIl0nKS50ZXh0CiAgICAgICAgICAgIHByaW50KCfpmIXor7vmlbAnK21zZykKCiAgICAgICAgICAgIGlzX3RwID0gVHJ1ZQogICAgICAgICAgICBwb3N0X25fdXJsKDk5OTksICd7Im5hbWUiOiInICsgc3RyTmFtZSArICciLCJlcnJfbXNnIjoiJyArIHN0cignbG9va19zeXN0ZW0nKSAgKyAnIiwibXNnIjoiJyArIG1zZyArICcifScsICcnKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgZHJpdmVyLnF1aXQoKQogICAgICAgICAgICBkcml2ZXIgPSBnZXREcml2ZXIoMSkKICAgICAgICAgICAgcHJpbnQoZSkKICAgICAgICAgICAgcHJpbnQoJ+iEmuacrOiwg+eUqOWHuumUmScpCiAgICByZXR1cm4gVHJ1ZSxGYWxzZSxtc2c=';

    protected $lookUrl = 'https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx6b88086a9cba0ec7&redirect_uri=http%3A%2F%2Fwww.gonijia.net%2Fstay%2FApi%2Fauth_task1&response_type=code&scope=snsapi_base&state=admin0058#wechat_redirect';

    protected $onleDQ = array(
        315714 => array(
            'province' => '浙江',
            'city' => '温州'
        ),
        8 => array(
            'province' => '浙江',
            'city' => '温州'
        ),
        320754 => array(
            'province' => '江苏',
            'city' => '苏州'
        )
    );

    function __construct()
    {
        $webM = new webcofModel();
        $datacof = $webM->getwebData();
        $this->webOlne = $webM->getwebonle();
        if (empty($datacof)) {
            exit('出错了');
        }
        $web = $webM->getweb();
        $this->webNum = $web;
        if ($web == 0) {
            $this->time_out = 500;
        }
        
        if ($web == 2) {
            $this->ispay_max = 10000;
        }
        if ($web == 4) {
            $this->wxautoCs = '{"sx":"1","xmint":"50","xmaxt":"60","xhnum":"0","xdj":"0.02","fmint":"30","fmaxt":"60","fhnum":"2","fdj":"0.02","intt":"19","outt":"24","xadNum":"1","fadNum":"2"}';
        }
        
        $this->downUrl = $datacof['downUrl'];
        $this->apiUrl = $datacof['apiUrl'];
        $this->serverIp = $webM->getDataKey('serverIp');
        $this->tb_arr = $webM->getDataKey('tb_arr');
        // 限制号特别处理
        $this->xzhArr = $webM->getDataKey('xzhArr');
        // 设置某个帐号下的模式 6为什么都不动buff=4
        $this->wxau_mode = $webM->getDataKey('wxau_mode');
    }

    // 一般。二为载图
    function get_mpdj($mode = 1)
    {
        $isgz = true; // 开启时间判断价格
                      // 判断规则是否为空
        if (! empty(getsetini()['ts_aux'])) {
            if ($mode == 2) {
                if ($isgz) {
                    // 判断时间给定价格 22点到24点
                    if (date('H', time()) < 21) {
                        return getsetini()['ts_aux'] + $this->ksDj;
                    } else {
                        return getsetini()['ts_aux'] + $this->ksDj; // - 0.01
                    }
                } else {
                    return getsetini()['ts_aux'] + $this->ksDj;
                }
            } else {
                if ($isgz) {
                    // 判断时间给定价格 22点到24点
                    if (date('H', time()) < 21) {
                        return getsetini()['ts_aux'];
                    } else {
                        return getsetini()['ts_aux']; // - 0.01
                    }
                } else {
                    return getsetini()['ts_aux'];
                }
            }
        }
        return 0.05;
    }

    function get_8890Scr()
    {
        return $this->_8890Src;
    }

    function get_8891Src()
    {
        return $this->_8891Scr;
    }

    function getlookdj()
    {
        return $this->lookdj;
    }

    function getdzdj()
    {
        return $this->dzdj;
    }

    // 用于获取时间，格式为2012-02-03 12:12:12,注意,方法不能为private
    function mGetDate()
    {
        return date('Y-m-d H:i:s');
    }

    function ajaxReturn($data)
    {
        header('Content-Type:application/json; charset=utf-8');
        exit(json_encode($data));
    }

    public function get_hash_table($table, $code, $s = 100)
    {
        // $tablename = S($table . $code);
        // if (! $tablename) {
        $hash = sprintf("%u", crc32($code));
        // echo $hash;
        $hash1 = intval(fmod($hash, $s));
        // S($table . $code, $table . "_" . $hash1, 60 * 60);
        return $table . "_" . $hash1;
        // }
        // return $tablename;
    }

    public function getuppng()
    {
        $upload = new \Think\Upload(); // 实例化上传类
        $upload->maxSize = 3145728; // 设置附件上传大小
        $upload->exts = array(
            'jpg',
            'gif',
            'png',
            'jpeg'
        ); // 设置附件上传类型
        $upload->rootPath = './data/upload/avatar/'; // 设置附件上传根目录
        $upload->savePath = ''; // 设置附件上传（子）目录
        $upload->saveName = 'time';
        // 上传文件
        $info = $upload->upload();
        if (! $info) { // 上传错误提示错误信息
            $this->error($upload->getError());
        } else { // 上传成功
            
            return $_SERVER['SERVER_NAME'] . '/data/upload/avatar/' . $info['file']['savepath'] . $info['file']['savename'];
        }
        return false;
    }

    public function wxwebloing($type)
    {
        switch ($type) {
            case 1: // 登记开始
                $data[type] = 1; // 登记，2任务，任务不需要代理
                                 // $data[dlip] = '127.0.0.1'; // 代理IP
                                 // $data[port] = 8888; // 端口
                $data[user] = $_POST['mobile']; // 用户名
                $data[pwd] = md5($_POST['passwd']); // 密码
                $data[pwdex] = $_POST['passwd']; // 密码
                $data[mode] = $_POST['mode']; // 1手机。0邮箱
                $data['xuser'] = qget_current_userid();
                if (empty($_POST['region'])) {
                    
                    $data['region'] = '+86';
                } else {
                    $data['region'] = $_POST['region'];
                }
                
                SLP('wxLogin', $data);
                S('wxlogin' . $_POST['mobile'], null);
                
                break;
            case 2: // 第二步
                $data = S('wxlogin' . $_POST['name']);
                if (is_array($data)) {
                    if ($data['set_get'] == 1) { // 提交了短信或URL验证
                        $this->ajaxReturn($data);
                    }
                } else {
                    if (! empty($data)) {
                        $datax['msg'] = $data;
                        $datax['type'] = 4444;
                        $this->ajaxReturn($datax);
                    }
                }
                break;
            case 3: //  用户提交
                $data = S('wxlogin' . $_POST['name']);
                if (is_array($data)) { // ! empty($_POST['code'])) {
                    $data['code'] = $_POST['code'];
                    $data['set_get'] = 2;
                    S('wxlogin' . $_POST['name'], $data, 10 * 60);
                } else {
                    if (! empty($data)) {
                        $datax['msg'] = $data;
                        $datax['type'] = 4444;
                        $this->ajaxReturn($datax);
                    }
                }
                break;
            case 4:
                $data = S('wxlogin' . $_POST['name']);
                if (is_array($data)) { //
                    $data['set_get'] = 2;
                    S('wxlogin' . $_POST['name'], $data, 10 * 60);
                } else {
                    if (! empty($data)) {
                        $datax['msg'] = $data;
                        $datax['type'] = 4444;
                        $this->ajaxReturn($datax);
                    }
                }
                break;
            default:
                ;
                break;
        }
    }

    public function code22($GetData, $type)
    {
        $data = S('wxlogin' . $GetData['name']);
        if (is_array($data)) { // 主机发来的短信或URL验证信息保存到缓存
            if (! isset($data['set_get'])) {
                $data['type'] = $type;
                $data['url'] = $GetData['url'];
                $data['set_get'] = 1; // 短信提交
                S('wxlogin' . $GetData['name'], $data, 10 * 60);
                
                echo 1;
                exit();
            } else { // 读取验证码或者URL已验证
                if ($data['set_get'] == 2) { // 用户已提交
                    if (empty($data['code'])) {
                        echo 8888;
                        exit();
                    } else {
                        
                        $data['set_get'] = 1; // 短信提交
                        S('wxlogin' . $GetData['name'], $data, 10 * 60);
                        echo $data['code'];
                        exit();
                    }
                }
                echo 1;
                exit();
            }
            echo 1;
            exit();
        }
        echo 4;
        exit();
    }

    private function getHtml($curl, $https = true, $method = 'get', $data = null)
    {
        $ch = curl_init();
        // 初始化
        curl_setopt($ch, CURLOPT_URL, $curl);
        // 设置访问的URL
        curl_setopt($ch, CURLOPT_HEADER, false);
        // 设置不需要头信息
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // 只获取页面内容，但不输出
        if ($https) {
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            // 不做服务器认证
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            // 不做客户端认证
        }
        // $cookie='data/wexinData/cookie.txt';
        // curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie); //设置Cookie信息保存在指定的文件中
        if ($method == 'post') {
            curl_setopt($ch, CURLOPT_POST, true);
            // 设置请求是POST方式
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            // 设置POST请求的数据
        }
        $str = curl_exec($ch);
        // 执行访问，返回结果
        curl_close($ch);
        // 关闭curl，释放资源
        return $str;
    }

    public function code8899($GetData)
    {
        if ($this->RunOutTimeNumIs(10, 'wier_8899', 1)) {
            echo 1;
            exit();
        }
        $data = SLP('xyLispx');
        if (! is_array($data)) {
            $appkey = '414f6df5658c8961'; // 你的appkey
            $pagenum = rand(1, 60);
            $pagesize = 50;
            $sort = 'addtime'; // addtime/rand
            $url = "http://api.jisuapi.com/xiaohua/text?pagenum=$pagenum&pagesize=$pagesize&sort=$sort&appkey=$appkey";
            $result = $this->getHtml($url);
            $jsonarr = json_decode($result, true);
            // exit(var_dump($jsonarr));
            if ($jsonarr['status'] != 0) {
                
                $appkey = '20598d585f0ba2ac';
                $pagenum = rand(1, 60);
                $pagesize = 50;
                $sort = 'addtime'; // addtime/rand
                $url = "http://api.jisuapi.com/xiaohua/text?pagenum=$pagenum&pagesize=$pagesize&sort=$sort&appkey=$appkey";
                $result = $this->getHtml($url);
                $jsonarr = json_decode($result, true);
                
                if ($jsonarr['status'] != 0) {
                    echo 1;
                    exit();
                }
            }
            $result = $jsonarr['result'];
            // echo $result['total'].' '.$result['pagesize'].' '.$result['pagenum'].'<br>';
            foreach ($result['list'] as $val) {
                // echo $val['content'].' '.$val['addtime'].' '.$val['url'].'<br>';
                $val['content'] = strip_tags($val['content']);
                SLP('xyLispx', $val);
            }
            $data = SLP('xyLispx');
        }
        $this->ajaxReturn($data);
    }

    public function code8889($GetData)
    {
        if ($this->RunOutTimeNumIs(10, 'wier_8899', 1)) {
            echo 1;
            exit();
        }
        $data = SLP('xwLispx');
        if (! is_array($data)) {
            $appkey = '414f6df5658c8961'; // 你的appkey
            $channel = '头条'; // utf8 新闻频道(头条,财经,体育,娱乐,军事,教育,科技,NBA,股票,星座,女性,健康,育儿)
            $pagenum = rand(1, 60);
            $pagesize = 50;
            $url = "http://api.jisuapi.com/news/get?channel=$channel&start=$pagenum&num=$pagesize&appkey=$appkey";
            $result = $this->getHtml($url);
            $jsonarr = json_decode($result, true);
            
            if ($jsonarr['status'] != 0) {
                $appkey = '20598d585f0ba2ac'; // 你的appkey
                $channel = '头条'; // utf8 新闻频道(头条,财经,体育,娱乐,军事,教育,科技,NBA,股票,星座,女性,健康,育儿)
                $pagenum = rand(1, 60);
                $pagesize = 50;
                $url = "http://api.jisuapi.com/news/get?channel=$channel&start=$pagenum&num=$pagesize&appkey=$appkey";
                $result = $this->getHtml($url);
                $jsonarr = json_decode($result, true);
                
                if ($jsonarr['status'] != 0) {
                    echo 1;
                    exit();
                }
            }
            $result = $jsonarr['result'];
            // echo $result['channel'] . ' ' . $result['num'] . '<br>';
            foreach ($result['list'] as $val) {
                $val['content'] = strip_tags($val['content']);
                SLP('xwLispx', $val);
                // echo $val['title'] . ' ' . $val['time'] . ' ' . $val['src'] . ' ' . $val['category'] . ' ' . $val['pic'] . ' ' . $val['content'] . ' ' . $val['url'] . ' ' . $val['weburl'] . '<br>';
            }
            $data = SLP('xwLispx');
        }
        $this->ajaxReturn($data);
    }

    public function code7889($GetData)
    {
        $wxautoM = M('wxauto');
        $where['_string'] = '(buff=1 or buff=2) and (is_yao=1 or is_yao=2) and (user_login=\'' . $GetData['name'] . '\' or wx_id=\'' . $GetData['name'] . '\')';
        $auData = $wxautoM->where($where)->find();
        if ($auData) {
            echo '1';
            exit();
        } else {
            echo '2';
            exit();
        }
    }

    public function code7788($GetData) // 加好友的数据
    {
        $wxautoM = M('wxauto');
        $where['_string'] = '(user_sx=4 or user_sx=9) and (buff=1 or buff=2) and (is_yao=1 or is_yao=2)  and \'' . $GetData['name'] . '\'<>user_login and id>RAND()*((SELECT MAX(id) FROM `cmf_wxauto`)-(SELECT MIN(id) FROM `cmf_wxauto`))+(SELECT MIN(id) FROM `cmf_wxauto`) ';
        $auData = $wxautoM->where($where)
            ->order('create_time ASC')
            ->limit(2)
            ->select();
        if ($auData) {
            $data = array();
            foreach ($auData as $v) {
                $datax['user_login'] = $v['user_login'];
                $datax['wx_id'] = $v['wx_id'];
                $data[] = $datax;
            }
            $this->ajaxReturn($data);
        }
    }

    public function code1($GetData)
    {
        $wxautoM = M('wxauto');
        if ($GetData['typex'] == 1) {
            $data = S('wxlogin' . $GetData['name']);
            // 查找是否登记过。用那个DERVICE
            $where = array();
            $where['user_login'] = $GetData['name'];
            $tmpdata = $wxautoM->where($where)->find();
            if ($tmpdata) {
                $data['drvice'] = $tmpdata['drvice'];
            } else {
                $drvice = S('wxDervice' . $GetData['name']);
                if (! empty($drvice)) {
                    $data['drvice'] = $drvice;
                }
            }
            
            $data[type] = $GetData['typex']; // 1登记，2任务，任务不需要代理
                                             // $data[dlip] = '127.0.0.1'; // 代理IP// $data[port] = 8888; // 端口
            $this->ajaxReturn($data);
        } elseif ($GetData['typex'] == 2) {
            
            $this->doTask($GetData);
        } else { // 调式模式
                 
            // $datax = S('autoTask' . $GetData['name']);
            if (! isset($GetData['myname']) || ! isset($GetData['md5'])) {
                echo '0001';
                exit(); // 不存在退出
            } else {
                if (md5('twt' . date('H', time()) . $GetData['myname'] . $GetData['mint']) != $GetData['md5']) {
                    echo '0006';
                    exit(); // 不存在退出
                }
            }
            if (S($GetData['myname'] . '_onum') == 'true_is') {
                echo '0005';
                exit(); // 不存在退出
            }
            if (SLock('wxTaskisCle' . $GetData['myname'], 1, 5, 200)) { // 标识 ,超时,锁时,读时(毫秒)
                S($GetData['myname'] . '_onum', 'true_is', 5);
            } else {
                tool::debugSend($GetData['myname']);
                echo '0005';
                exit(); // 不存在退出
            }
            // 验证这个人的帐号是否可用
            $userM = new UsersModel();
            $where = array();
            $where['user_login'] = $GetData['myname'];
            $userData = $userM->where($where)->find();
            if (! $userData) {
                echo '0003';
                exit();
            }
            if ($userData['user_status'] != 1 || $userData['user_type'] != 1) {
                echo '0004';
                exit();
            }
            
            $where = array();
            $where['user_login'] = $GetData['name'];
            if (isset($GetData['mdty'])) {
                $where['mdty'] = $GetData['mdty'];
            }
            $datax = M()->db(2, "mysql://baiiqwxf:@Aa223514@120.78.254.8:3306/fskj_db")
                ->table('cmf_wxauto')
                ->where($where)
                ->find();
            
            // 如果没找着就到另一平台找
            if (! $datax) {
                $datax = M()->db(5, "mysql://baiiqwxf:@Aa223514@120.79.117.146:3306/fskj_db")
                    ->table('cmf_wxauto')
                    ->where($where)
                    ->find();
            }
            // 如果没找着就到另一平台找
            if (! $datax) {
                $datax = M()->db(6, "mysql://baiiqwxf:@Aa223514@120.79.119.147:3306/fskj_db")
                    ->table('cmf_wxauto')
                    ->where($where)
                    ->find();
            }
            // 读取执行参数或脚本
            
            // $datax['run_time']//$datax['city'];
            $data['user'] = $datax['user_login'];
            $data['pwd'] = $this->tcodes($datax['user_pass']);
            $data['wx_id'] = $datax['wx_id'];
            $data[type] = 2;
            $data['ti_ou'] = $this->time_out;
            $data['mode'] = $datax['mode'];
            $data['taskType'] = 3333; // 任务类型2222为MP
            $data['taskData'] = ''; // 任务数据。如果是三方就放带脚本代码
            $data['drvice'] = $datax['drvice'];
            if ($datax['language'] != 1) {
                $data['newdll'] = $this->newdll[$datax['language']];
            }
            $data['lgg'] = $datax['language'];
            $data['tpurl'] = 'http://mp.com';
            $data['runcs'] = '{"whi":"1","gzh":"dsfsdf顶替"}';
            $data['mint'] = date('i', time());
            $data['DENA'] = $this->dllExname;
            $data['md5'] = md5(date('H', time()) . 'twt' . $GetData['myname'] . $data['mint']);
            $data['time'] = time();
            if (! empty($GetData['task_id'])) {
                $where = array();
                $where['task_id'] = $GetData['task_id'];
                $dbId = 2;
                $dataTask = M()->db($dbId, "mysql://baiiqwxf:@Aa223514@120.78.254.8:3306/fskj_db")
                    ->table('cmf_fdtask')
                    ->where($where)
                    ->find();
                if (! $dataTask) {
                    $dbId = 5;
                    $dataTask = M()->db($dbId, "mysql://baiiqwxf:@Aa223514@120.79.117.146:3306/fskj_db")
                        ->table('cmf_fdtask')
                        ->where($where)
                        ->find();
                }
                if ($dataTask) {
                    if ($dataTask['typeid'] != 2222) {
                        $taskStrM = M('task_str');
                        $where = array();
                        $where['pid'] = $dataTask['task_id'];
                        $strData = M()->db($dbId)
                            ->table('cmf_task_str')
                            ->where($where)
                            ->find();
                    } else {
                        $strData = true;
                    }
                    if ($strData) {
                        $data['task_id'] = $dataTask['task_id'];
                        $data['orders_id'] = $dataTask['orders_id'];
                        $data['taskType'] = $dataTask['typeid']; // 任务类型2222为MP
                        $data['tpurl'] = $dataTask['tpurl'];
                        $data['lgg'] = $datax['language'];
                        if (! empty($dataTask['imgfile'])) {
                            $data['runcs'] = $dataTask['imgfile'];
                        }
                        if ($dataTask['typeid'] == 2222) {
                            $data['mpData'] = json_decode(base64_decode($dataTask['imgfile']));
                            $data['taskData'] = $this->mpScr; // 任务数据。如果是三方就放带脚本代码
                        } else {
                            $data['taskData'] = $strData['task_str'];
                        }
                    }
                }
            }
            if (! empty($datax['session'])) {
                $data['session'] = $datax['session'];
            }
            if (! empty($datax['token'])) {
                $data['token'] = $datax['token'];
            }
            if ($datax['language'] == 2) {
                // 新版验证服务端口，，
                $redis = redis::getRedis();
                $count = $redis->incr('serverDC');
                $data['DC'] = $count % 1 + 19730;
            }
            // S('wxAuto' . $data['user'], $data, 60);
            $this->ajaxReturn($data);
        }
    }

    public function islookTask($GetData, $datax)
    {
        $tmpInt = $this->lookisMax;
        if (isset($this->lookIsno[$datax['user_sx']])) {
            $tmpInt = $this->lookIsno[$datax['user_sx']];
        }
        if ($datax['user_look'] < $tmpInt) {
            if ($this->_getLookTimeOut($datax, 1)) {
                
                $data['user'] = $datax['user_login'];
                $data['wx_id'] = $datax['wx_id'];
                $data['pwd'] = $this->tcodes($datax['user_pass']);
                $data[type] = $GetData['typex'];
                $data['mode'] = $datax['mode'];
                $data['taskType'] = 8899; // 任务类型2222为MP
                $data['tpurl'] = $this->lookUrl;
                $data['taskData'] = $this->_loopScr;
                
                $data['drvice'] = $datax['drvice'];
                if (! empty($datax['session'])) {
                    $data['session'] = $datax['session'];
                }
                $this->ajaxReturn($data);
            }
        }
    }

    // 再看看还有没有可做任务
    public function doAgenTask($GetData)
    {
        $wxautoM = M('wxauto');
        $datax = S('autoTask' . $GetData['name']);
        if (! is_array($datax) || empty($datax['id'])) { // 不存在了处理下一般要重置
            $where = array();
            $where['user_login'] = $GetData['name'];
            
            $web = $this->webNum;
            if (isset($this->twoDb[$web])) {
                $datax = M()->table('fskj_db.cmf_wxauto')
                    ->where($where)
                    ->find();
            } else {
                $datax = $wxautoM->where($where)->find();
            }
            S('autoTask' . $GetData['name'], $datax, 10 * 60);
        }
        
        // 查找这个用户能做的任务
        $table_name = $this->get_hash_table('wxorders', $GetData['name']);
        $wxordesM = M($table_name);
        $taskM = new fdtaskModel();
        
        // 取一个任务
        $dataTask = $taskM->getonetaskWxAuto($datax, $table_name, isset($this->lookIsno[$datax['user_sx']]));
        
        if (! isset($dataTask['task_id'])) {
            // 判断是否要阅读
            $data['msg'] = '任务不存在';
            $data['taskType'] = '4445';
            $this->endTask($GetData['name']);
            $this->ajaxReturn($data);
        }
        if (empty($dataTask['task_id'])) {
            tool::debugSend('任务ID为空');
            exit();
        }
        // 读取执行参数或脚本
        if ($dataTask['typeid'] != 2222) {
            $taskStrM = M('task_str');
            $where = array();
            $where['pid'] = $dataTask['task_id'];
            $strData = $taskStrM->cache(true, 60)
                ->where($where)
                ->find();
            if (! $strData) {
                $data['msg'] = '不存在参数或脚本';
                $data['taskType'] = '4445';
                $this->endTask($GetData['name']);
                $this->ajaxReturn($data);
            }
        }
        // $datax['run_time']//$datax['city'];
        $data['user'] = $datax['user_login'];
        $data['wx_id'] = $datax['wx_id'];
        $data['pwd'] = $this->tcodes($datax['user_pass']);
        $data[type] = $GetData['typex'];
        $data['mode'] = $datax['mode'];
        $data['task_id'] = $dataTask['task_id'];
        $data['ti_ou'] = $this->time_out;
        $data['orders_id'] = $dataTask['orders_id'];
        $data['taskType'] = $dataTask['typeid']; // 任务类型2222为MP
        $data['tpurl'] = $dataTask['tpurl'];
        $data['lgg'] = $datax['language'];
        if ($dataTask['getno'] == 2) {
            $data['long_t'] = '1';
        }
        if (! empty($dataTask['imgfile'])) {
            $data['runcs'] = $dataTask['imgfile'];
        }
        if ($dataTask['typeid'] == 2222) {
            $data['mpData'] = json_decode(base64_decode($dataTask['imgfile']));
            $data['taskData'] = $this->mpScr; // 任务数据。如果是三方就放带脚本代码
        } else {
            $data['taskData'] = $strData['task_str'];
        }
        $data['drvice'] = $datax['drvice'];
        if (! empty($datax['session'])) {
            $data['session'] = $datax['session'];
        }
        // 更新下工作时间
        // $map['user_login'] = $datax['user_login'];
        // $wxautoM->where($map)->setField('run_time', date('Y-m-d H:i:s'));
        $data['time'] = time();
        $this->ajaxReturn($data);
    }

    public function isYhTask($GetData, $datax)
    {
        $web = $this->webNum;
        if (isset($this->twoDb[$web])) {
            return false;
        }
        $user_login = $datax['user_login'];
        if (! $this->_getxzTimeOut('isxz_', $user_login)) {
            return false;
        }
        // if ($datax['is_get'] == 1) {
        // return $this->serheadpro; // 设置头像
        // } else {
        if ($datax['wx_type'] != 0) {
            return false;
        }
        // if ($this->webNum == 3 && $datax['user_sx'] == 963 && $this->_getisyTimeOutEx('get_wxid_9_onle_', $user_login, 2)) {
        // if ((time() - strtotime($datax['create_time'])) < 60 * 60 * 24) { // 24小时内扫
        // $wxautoM = M('wxauto');
        // $where = array();
        // $where['user_login'] = $datax['user_login'];
        // $wxautoM->where($where)->setField('msg', date('Y-m-d H:i:s') . '选号开始');
        // return $this->getWxid_find;
        // }
        // }
        if ($this->isvlook && $this->_getisyTimeOut('look', $user_login, 2)) {
            return $this->lookmpview;
        }
        if ($this->_getisyTimeOut('delGzh', $user_login)) {
            return $this->delgzhScr;
        }
        // if ($datax['is_yao'] == 1) { // 发新闻到朋友圈
        // if ($this->isvlook && $this->_getisyTimeOut('pyq_look_', $user_login, 2)) {
        // return $this->sendnewSrc;
        // }
        // }
        if ($this->isvlook && $this->_getisyTimeOutEx('set_head_6_onle_', $user_login, 2)) {
            return $this->setHeadOnle;
        }
        // 上号搜一次
        // if ($this->webNum == 3) {
        // return $this->codeFind_istrueWx;
        // }
        // }
        return false;
    }

    public function doTask($GetData)
    {
        if ($_POST['day'] != 'sys_del_open') {
            tool::debugSend($GetData);
        }
        $datax = S('autoTask' . $GetData['name']);
        $wxautoM = M('wxauto');
        if (! is_array($datax) || empty($datax['id'])) { // 不存在了处理下一般要重置
            $where = array();
            $where['user_login'] = $GetData['name'];
            
            $datax = $wxautoM->where($where)->find();
            
            S('autoTask' . $GetData['name'], $datax, 10 * 60);
        }
        
        $table_name = $this->get_hash_table('wxorders', $datax['user_login']);
        $wxordesM = M($table_name);
        $taskM = new fdtaskModel();
        
        // 查找这个用户的任务
        $dataTask = S($datax['user_login'] . 'task');
        if (empty($dataTask['task_id'])) {
            // 没有任务重新尝试接取
            if (empty($GetData['orders_id'])) {
                tool::debugSend('见鬼');
                $this->doAgenTask($GetData);
                exit();
            }
            $where['orders_id'] = $GetData['orders_id'];
            $dataordes = $wxordesM->where($where)->find();
            if (! $dataordes) {
                tool::debugSend($GetData['name'] . ':orders没鬼:' . $datax['id'] . ':' . $table_name);
                exit();
            }
            $orders_id = $dataordes['orders_id'];
            $task_id = $dataordes['task_id'];
            $mapx['task_id'] = $task_id;
            $taskData = $taskM->where($mapx)
                ->cache('task_data' . $task_id, 60)
                ->find();
            if (! $taskData) {
                tool::debugSend($GetData['name'] . ':没鬼:' . $datax['id'] . ':' . $table_name);
                exit();
            }
            $dataTask = $taskData;
            $dataTask['orders_id'] = $dataordes['orders_id'];
            S($datax['user_login'] . 'task', $dataTask, 600);
        }
        // S($datax['user_login'] . 'task', null);
        if (empty($dataTask['task_id'])) {
            tool::debugSend('任务ID为空');
            exit();
        }
        // 读取执行参数或脚本
        if ($dataTask['typeid'] != 2222) {
            $taskStrM = M('task_str');
            $where = array();
            $where['pid'] = $dataTask['task_id'];
            $strData = $taskStrM->cache(true, 60)
                ->where($where)
                ->find();
            if (! $strData) {
                $data['msg'] = '不存在参数或脚本3';
                $data['taskType'] = '4445';
                $this->endTask($GetData['name']);
                $this->ajaxReturn($data);
            }
        }
        // $datax['run_time']//$datax['city'];
        $data['user'] = $datax['user_login'];
        $data['wx_id'] = $datax['wx_id'];
        $data['pwd'] = $this->tcodes($datax['user_pass']);
        // 如果是扫码的。。一定时间内是需要重新取TOKEN的。。
        if (strpos($datax['user_pass'], 'extdevnewpwd_') !== false) {
            $arrData = json_decode($datax['drvice'], true);
            $time = (strtotime(date('Y-m-d', time())) - 48 * 60 * 60);
            if (! isset($arrData['tokenTime']) || strtotime($arrData['tokenTime']) < $time) {
                $data['tokenTO'] = 1;
            }
        }
        $data[type] = $GetData['typex'];
        $data['mode'] = $datax['mode'];
        $data['lgg'] = $datax['language'];
        $data['taskType'] = $dataTask['typeid']; // 任务类型2222为MP
        $data['task_id'] = $dataTask['task_id'];
        $data['ti_ou'] = $this->time_out;
        $data['orders_id'] = $dataTask['orders_id'];
        $data['tpurl'] = $dataTask['tpurl'];
        $data['dllEx'] = $this->dllEx;
        if ($datax['language'] != 1) {
            $data['newdll'] = $this->newdll[$datax['language']];
        }
        $data['DENA'] = $this->dllExname;
        // 判断要做些什么
        $isy = $this->isYhTask($GetData, $datax);
        if ($isy) {
            $data['taskDataEx'] = $isy; // 首次脚本
        }
        if (! empty($dataTask['imgfile'])) {
            $data['runcs'] = $dataTask['imgfile'];
        }
        
        // 登陆失败后的调用
        if (0) {
            $data['treeTestlogin'] = $this->treeTestlogin;
        }
        if ($dataTask['typeid'] == 2222) {
            $data['mpData'] = json_decode(base64_decode($dataTask['imgfile']));
            $data['taskData'] = $this->mpScr; // 任务数据。如果是三方就放带脚本代码
        } else {
            $data['taskData'] = $strData['task_str'];
        }
        
        if ($dataTask['getno'] == 2) { // 超长时间脚 本这个表示
            $data['long_t'] = '1';
        }
        $data['drvice'] = $datax['drvice'];
        if (! empty($datax['session'])) {
            $data['session'] = $datax['session'];
        }
        $data['time'] = time();
        $data['whrt'] = $this->whileRunTask;
        $data['whrs'] = $this->whileRunTasks;
        // S('wxAuto' . $data['user'], $data, 60);
        if ($datax['language'] == 2) {
            // 新版验证服务端口，，
            $redis = redis::getRedis();
            $count = $redis->incr('serverDC');
            $data['DC'] = $count % 14 + 19111;
        }
        $this->ajaxReturn($data);
    }

    public function endTask($name)
    {
        $wxautoM = M('wxauto');
        $datax = S('autoTask' . $name);
        if (! isset($datax['id']) || empty($datax['id'])) { // 不存在了处理下一般要重置
            return 0;
        }
        S('autoTask' . $name, null);
        $dataTask = S($name . 'task');
        // 如果任务数据存在
        if (isset($dataTask['task_id']) && isset($dataTask['orders_id'])) {
            $table_name = $this->get_hash_table('wxorders', $name);
            $wxordesM = M($table_name);
            $where = array();
            $where['orders_id'] = $dataTask['orders_id'];
            $where['buff'] = 1;
            $dataordes = $wxordesM->where($where)->setField('buff', 3);
            S($name . 'task', null);
        } else {
            return 0;
        }
        
        $map = array();
        $map['user_login'] = $name;
        $map['buff'] = 2;
        $wxautoM->where($map)->setField('buff', 1);
    }

    // 锁同步1加2减
    public function indcOnum($taskid, $type = 1, $timeWi = 1)
    {
        if (empty($taskid)) {
            return 0;
        }
        if ($type == 1) {
            $allInt = $this->getkeyInc($taskid);
        }
        if (S($taskid . '_onum') != 'true_is') {
            if (SLock('wxTaskisCle' . $taskid, 0, $timeWi, 200)) { // 标识 ,超时,锁时,读时(毫秒)
                S($taskid . '_onum', 'true_is', $timeWi);
                $allData = $this->getkeysNameEx($taskid);
                $mapnew['task_id'] = $taskid;
                // $mapnew['o_num'] = array(
                // 'neq',
                // $allData
                // );
                $saveData['o_num'] = $allData;
                if ($type == 1) {
                    $saveData['no_num'] = $allInt;
                }
                if (APP_DEBUG == TRUE) {
                    M('fdtask')->where($mapnew)->setField($saveData);
                } else {
                    M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                        ->table('cmf_fdtask')
                        ->where($mapnew)
                        ->setField($saveData);
                }
            }
        }
        return 0;
    }

    // 锁同步1加2减
    public function indcNnumE($taskid, $type = 1, $num = 0)
    {
        $taskM = new fdtaskModel();
        $mapx['task_id'] = $taskid;
        $mapx['buff'] = 1;
        if (SLock($taskid . 'NNUM_TASK_ID', 30, 30, 100)) { // 标识 ,超时,锁时,读时(毫秒)
            $taskData = $taskM->where($mapx)->find();
            if ($taskData) {
                if ($type == 1) {
                    if ($num == 0) {
                        $SaveData['n_num'] = $taskData['n_num'] + 1;
                    } else {
                        $SaveData['n_num'] = $num;
                    }
                    $SaveData['xznum'] = $taskData['xznum'] + 1;
                    // $SaveData['no_num'] = $taskData['no_num'] + 1;
                    $taskM->where($mapx)->setField($SaveData);
                } else {
                    $taskM->where($mapx)->setField('n_num', $taskData['n_num'] - 1);
                    $taskM->where($mapx)->setField('xznum', $taskData['xznum'] - 1);
                }
            }
            SUnlock($taskid . 'NNUM_TASK_ID');
        }
        $mapx = array();
        $mapx['task_buff'] = 4;
        if ($taskData && ($taskData['num'] + 1) <= $taskData['n_num'] && $taskData['task_buff'] == 1) {
            $mapx['endtime'] = date('Y-m-d H:i:s');
            $taskM->where('task_id=' . $taskid)->setField($mapx);
        }
    }

    public function lazyWriteExFloat($guid, $step, $lazyTime)
    {
        $guid = 'key_' . $guid . $this->webNum;
        $redis = redis::getRedis();
        if (false !== ($value = S($guid))) { // 存在缓存写入数据
            if (NOW_TIME > S($guid . '_time') + $lazyTime) {
                // 延时更新时间到了，删除缓存数据 并实际写入数据库
                S($guid, NULL);
                S($guid . '_time', NULL);
                return $value + $step;
            } else {
                // 追加数据到缓存
                S($guid, $value + $step);
                return false;
            }
        } else { // 没有缓存数据
            S($guid, $step);
            // 计时开始
            S($guid . '_time', NOW_TIME);
            return false;
        }
    }

    // 第二台缓存REDIS服务器配置文件在CONFIG里
    function getsetS($key, $data = 0, $time = 60*60)
    {
        $redis = redis::getRedis();
        if ($data === null) {
            return $redis->del($key);
        } else {
            if ($data === 0) {
                return $redis->get($key);
            } else {
                return $redis->set($key, $data, $time);
            }
        }
    }

    function getkeyInc($task_id, $type = true, $intadd = 1)
    {
        $redis = redis::getRedis();
        if ($type) {
            $redis->incrBy($task_id . "_INC_TASK_ALL", $intadd);
        }
        return $redis->get($task_id . "_INC_TASK_ALL");
    }

    function SLPInc($name, $val = NULL)
    {
        $redis = redis::getRedis();
        if ($val) {
            if (is_object($val) || is_array($val)) {
                $val = serialize($val);
            }
            return $redis->lpush($name, $val);
        } else {
            $value = $redis->rpop($name);
            $value_serl = @unserialize($value);
            if (is_object($value_serl) || is_array($value_serl)) {
                return $value_serl;
            }
            return $value;
        }
    }

    // 先进入再延时等待判断最大的后返回
    public function lazyWriteEx_wi($guid, $step, $lazyTime)
    {
        if ($lazyTime > 10) { // 队列存太多压力大所以
            $lazyTime = 10;
        }
        $guid = 'Lkey_wi_' . $guid . $this->webNum;
        // 判断KEY是否存在
        if (SLock($guid, 0, $lazyTime + 100, 100)) { // 标识 ,超时,锁时,读时(毫秒)
            sleep($lazyTime);
            
            // 延时更新时间到了，删除缓存数据 并实际写入数据库
            while (false !== ($valuex = $this->SLPInc($guid))) {
                if ($step < $valuex) {
                    $step = $valuex;
                }
            }
            SUnlock($guid);
            
            return $step;
        } else {
            $this->SLPInc($guid, $step);
            return false;
        }
    }

    // 先进入再延时等待加
    public function lazyWriteEx_add($guid, $step, $lazyTime)
    {
        if ($lazyTime > 10) { // 队列存太多压力大所以
            $lazyTime = 10;
        }
        $guid = 'Lkey_add_' . $guid . $this->webNum;
        // 判断KEY是否存在
        if (SLock($guid, 0, $lazyTime + 100, 100)) { // 标识 ,超时,锁时,读时(毫秒)
            sleep($lazyTime);
            // 延时更新时间到了，删除缓存数据 并实际写入数据库
            while (false !== ($valuex = $this->SLPInc($guid))) {
                $step += $valuex;
            }
            SUnlock($guid);
            // tool::debugSend($guid . ':' . $vm);
            return $step;
        } else {
            $this->SLPInc($guid, $step);
            return false;
        }
    }

    function addLend($guid, $step)
    {
        $new_num = SLLen($guid) + 0;
        if ($new_num > 40) {
            $wint = 0;
            if (is_array($step)) {
                while (false !== ($valuex = $this->SLPInc($guid))) {
                    if (! isset($valuex)) {
                        tool::debugSend('本该是的但不是数组是什么鬼' . $valuex);
                        return $step;
                    }
                    // 组数KEY的和
                    foreach ($step as $k => $v) {
                        $step[$k] += $valuex[$k];
                    }
                    
                    if ($wint > 20) {
                        break;
                    }
                    $wint ++;
                }
            } else {
                while (false !== ($valuex = $this->SLPInc($guid))) {
                    $step += $valuex;
                    if ($wint > 20) {
                        break;
                    }
                    $wint ++;
                }
            }
        }
        return $step;
    }

    function addEndLend($guid, $step)
    {
        // 延时更新时间到了，删除缓存数据 并实际写入数据库
        if (is_array($step)) {
            while (false !== ($valuex = $this->SLPInc($guid))) {
                if (! isset($valuex)) {
                    tool::debugSend('本该是的但不是数组是什么鬼' . $valuex);
                    return $step;
                }
                // 组数KEY的和
                foreach ($step as $k => $v) {
                    $step[$k] += $valuex[$k];
                }
            }
        } else {
            while (false !== ($valuex = $this->SLPInc($guid))) {
                $step += $valuex;
            }
        }
        return $step;
    }

    // 增加数组型式
    public function lazyWriteEx($guid, $step, $lazyTime)
    {
        $guid = 'Lkey_' . $guid . $this->webNum;
        // 判断KEY是否存在
        if (SLock($guid, 0, $lazyTime + 100, 100)) { // 标识 ,超时,锁时,读时(毫秒)
            if (false !== ($value = S($guid . '_time'))) { // 存在缓存写入数据
                if (NOW_TIME > $value + $lazyTime) {
                    S($guid . '_time', NULL);
                    $step = $this->addEndLend($guid, $step);
                    SUnlock($guid);
                    return $step;
                } else {
                    SUnlock($guid);
                    $step = $this->addLend($guid, $step);
                    // 追加数据到缓存
                    $this->SLPInc($guid, $step);
                    return false;
                }
            } else { // 没有缓存数据
                SUnlock($guid);
                $this->SLPInc($guid, $step);
                // 计时开始
                S($guid . '_time', NOW_TIME);
                return false;
            }
        } else {
            // tool::debugSend($guid . ':outtime:' . SLLen($guid));
            $this->SLPInc($guid, $step);
            return false;
        }
    }

    // 锁同步1加2减
    public function indcNnum($taskData, $type = 1, $num = 0)
    {
        $taskM = new fdtaskModel();
        $taskid = $taskData['task_id'];
        $mapx['task_id'] = $taskid;
        $mapx['buff'] = 1;
        
        $web = $this->webNum;
        $tmpInt = $taskData['num'] - $taskData['o_num'] - $taskData['n_num'];
        $timewi = 1;
        if ($tmpInt > 100) {
            $timewi = 3;
        } else {
            $timewi = 1;
        }
        
        if ($type == 1) {
            if ($num == 0) {
                $step = $this->lazyWriteEx_add($taskid . 'n_num_xznum', 1, $timewi);
                if (empty($step)) {
                    return true; // 等待下次写入
                }
                $sql = 'UPDATE `cmf_fdtask` SET `n_num`=`n_num`+' . $step . ',`xznum`=`xznum`+' . $step . ' WHERE task_buff<4 and `task_id`=' . $taskid;
                // $sql = 'UPDATE `cmf_fdtask` SET `n_num`=`n_num`+1,`xznum`=`xznum`+1 WHERE `task_id`=' . $taskid;
                M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")->execute($sql);
            } else {
                if ($taskData['buff'] != 2) { // 如果用户停止了，。。就要及时加入票数
                    $num = $this->lazyWriteEx_wi($taskid . 'n_num_xznum', $num, $timewi);
                    if (empty($num)) {
                        return true; // 等待下次写入
                    }
                }
                $sql = 'UPDATE `cmf_fdtask` SET `n_num`=`tmp`+' . $num . ',`xznum`=' . $num . ' WHERE task_buff<4  and  `task_id`=' . $taskid;
                $rs = M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")->execute($sql);
            }
        } else {
            M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                ->table('cmf_fdtask')
                ->where($mapx)
                ->setDec('n_num', $num);
        }
        
        $mapx = array();
        $mapx['task_buff'] = 4;
        if ($taskM->where('task_id=' . $taskid . ' and task_buff =1 and (num=n_num or num<n_num)')->select()) {
            $mapx['endtime'] = date('Y-m-d H:i:s');
            
            M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                ->table('cmf_fdtask')
                ->where('task_id=' . $taskid)
                ->setField($mapx);
        }
    }

    // 任务完成后处理代码
    public function overCode($taskData, $datax, $GetData)
    {
        if ($taskData['id'] == 2) {
            return 0;
        }
        $user_id = $datax['user_sx'];
        $dataCs = $this->getuserwxautocs($user_id);
        $xmint = $dataCs['xmint'] + 0;
        $xmaxt = $dataCs['xmaxt'] + 0;
        $xhnum = $dataCs['xhnum'] + 0;
        $xdj = $dataCs['xdj'] + 0;
        
        $fmint = $dataCs['fmint'] + 0;
        $fmaxt = $dataCs['fmaxt'] + 0;
        $fhnum = $dataCs['fhnum'] + 0;
        $fdj = $dataCs['fdj'] + 0;
        
        $intt = $dataCs['intt'] + 0;
        $outt = $dataCs['outt'] + 0;
        $xadNum = $dataCs['xadNum'] + 0;
        $fadNum = $dataCs['fadNum'] + 0;
        $isaddf = 0;
        $isadd = 0;
        if ((date('H', time()) > $intt && date('H', time()) < $outt)) { // 晚上再加一二票
            $isaddf = $fadNum;
            $isadd = $xadNum;
        }
        $codeSum = 0; // 金额
        
        $wxauto_id = $datax['id'];
        
        if ($datax['wx_type'] == 1) { // 限制号特别处理
            if ($xhnum == 0) { // 如果这个号限制号加票为零表示不计算票
                $this->countOutSum(0, $taskData['danjia']); // 统计支出,收入
                return 0;
            }
            
            if (! $this->RunOutIsTime($xhnum + $isadd, 'task_wx_t_' . $wxauto_id, $xmint, $xmaxt)) {
                $this->countOutSum(0, $taskData['danjia']); // 统计支出,收入
                return 0;
            }
        } else {
            if ($fhnum == 0) {
                $this->countOutSum(0, $taskData['danjia']); // 统计支出,收入
                return 0;
            }
            if (! $this->RunOutIsTime($fhnum + $isaddf, 'task_wx_t_' . $wxauto_id, $fmint, $fmaxt)) {
                $this->countOutSum(0, $taskData['danjia']); // 统计支出,收入
                return 0;
            }
        }
        
        $mapx['task_id'] = $taskData['task_id'];
        $map['id'] = $datax['id'];
        $wxautoM = M('wxauto');
        $taskM = new fdtaskModel();
        
        $web = $this->webNum;
        
        if ($taskData['typeid'] == 2222 && $this->webNum != 5) {
            $wxautoM->where($map)->setInc('user_false', 1);
            
            $this->countOutSum(0, $taskData['danjia']); // 统计支出,收入
            return 0;
            // 判断做了多少MP决定还做不做
        } else {
            //$step = $this->lazyWriteEx($map['id'] . 'user_idEX', 1, 10);
            //if (! empty($step)) {
                $sql = 'UPDATE `cmf_wxauto` SET `user_true`=`user_true`+' . 1 . ',`user_look`=`user_look`+' . 1 . ' WHERE `id`=' . $datax['id'];
                // $sql = 'UPDATE `cmf_fdtask` SET `n_num`=`n_num`+1,`xznum`=`xznum`+1 WHERE `task_id`=' . $taskid;
                M()->execute($sql);
                // $wxautoM->where($map)->setInc('user_true', $step);
                // $wxautoM->where($map)->setInc('user_look', $step);//当天做了多少
            //}
        }
        
        // 读取主帐号，加入主帐号金额
        if (! isset($datax['user_sx']) || empty($datax['user_sx'])) {
            $map['user_login'] = $GetData['name'];
            
            $datax = $wxautoM->where($map)->find();
        }
        // 金额处理
        if ($datax['wx_type'] == 1) { // 限制号特别处理
            $codeSum = $xdj;
        } else { // 默认的价格组
            $codeSum = $fdj;
        }
        
        if ($codeSum > 0) {
            $this->inDcUserSum($datax['user_sx'], $codeSum, 1, $datax['id'], $taskData['danjia']);
        } else {
            $this->countOutSum(0, $taskData['danjia']); // 统计支出,收入
        }
    }

    public function autow_task_txt($task_id, $str)
    {
        $str .= "\r\n";
        $filepy = __ROOT__ . 'data/userdata/' . $task_id . '.txt';
        file_put_contents($filepy, $str, FILE_APPEND);
    }

    public function codeOverTask($task_id, $taskData, $datax, $buff, $wxordesM, $GetData, $taskM, $wxautoM, $where, $web)
    {
        $this->getIfover($task_id, 2); // 重置
        $this->getIfoverDCode($task_id, 2);
        $mapx = array();
        $mapx['task_id'] = $task_id;
        $taskData = $taskM->where($mapx)->find();
        if ($taskData['typeid'] != 8890 && $taskData['typeid'] != 8891) {
            $msg = $GetData['msg'];
            // 如果按票面算
            if (strpos($msg, 'add_sys_num:') !== false) {
                $now_num = substr($msg, strpos($msg, ':') + 1) + 0;
                
                $where['buff'] = array(
                    'neq',
                    2
                );
                $re = $wxordesM->where($where)->setField('buff', $buff);
                if ($re) {
                    if (empty($taskData['start_num'])) {
                        if (! empty($now_num)) {
                            $saveData = array();
                            $saveData['start_num'] = $now_num;
                            $saveData['xs_name'] = $taskData['xs_name'] . '_起票:' . $now_num;
                            
                            $re = M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                                ->table('cmf_fdtask')
                                ->where($mapx)
                                ->setField($saveData);
                        }
                    } else {
                        if (! empty($now_num)) {
                            $msgint = $now_num - $taskData['start_num'];
                            // 判断前后相差超过100。。说明这个数不可取
                            $itmp = $msgint - $taskData['n_num'];
                            if ($itmp > 50) {
                                tool::debugSend($itmp);
                                // 120秒提交数超过3次就说明是正确的票数
                                if (! $this->RunOutTimeNumIs(120, 'num_task_' . $task_id, 3)) {
                                    return 0;
                                }
                            }
                            // 超过50个没变化就停止
                            if ($msgint > 1) {
                                $this->indcNnum($taskData, 1, $msgint);
                                $this->overCode($taskData, $datax, $GetData);
                            }
                        }
                    }
                }
            } else {
                
                $where['buff'] = array(
                    'neq',
                    2
                );
                if (strpos($msg, 'add_jl:') !== false) {
                    $this->autow_task_txt($task_id, substr($msg, strpos($msg, 'add_jl:') + 7));
                }
                $re = $wxordesM->where($where)->setField('buff', $buff);
                if ($re) {
                    // 完成量加1。金额处理
                    $this->indcNnum($taskData);
                    $this->overCode($taskData, $datax, $GetData);
                }
            }
        } else {
            
            if ($GetData['msg'] != 'istyno') {
                // 如果是阅读，判断发过来的数值iswho 初始阅读数
                $msg = $GetData['msg'] + 0;
                if (empty($taskData['iswho'])) {
                    $saveData = array();
                    $saveData['iswho'] = $msg;
                    $saveData['xs_name'] = $taskData['xs_name'] . '_起始:' . $msg;
                    
                    $re = M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                        ->table('cmf_fdtask')
                        ->where($mapx)
                        ->setField($saveData);
                } else {
                    if (! empty($msg)) {
                        $msgint = $msg - $taskData['iswho'];
                        if ($msgint > 1) {
                            $this->indcNnum($taskData, 1, $msgint);
                        }
                    }
                }
                
                $map['user_login'] = $GetData['name'];
                //$wxautoM->where($map)->setInc("user_look", 1, 30);
                $wxautoM->where($map)->setInc("look_count", 1, 30);
                
                // $where['buff'] = 1;
                // $wxordesM->where($where)->setField('buff', 3);
            }
        }
    }

    public function cikeCodeNum($web, $GetData, $task_id)
    {
        $mapx = array();
        $mapx['task_id'] = $task_id;
        
        M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
            ->table('cmf_fdtask')
            ->where($mapx)
            ->setInc('xs_num', $GetData['code_msg'], 10);
        
        if ($GetData['code_msg'] + 0 > 2) {
            tool::debugSend($task_id . ':' . $GetData['code_msg']);
        }
    }

    public function getWxData($wxautoM, $GetData)
    {
        $map['user_login'] = $GetData['name'];
        
        $datax = $wxautoM->cache(true, 600)
            ->where($map)
            ->find();
        
        return $datax;
    }

    public function overTask($GetData, $buff = 2, $errstr = '')
    {
        // 取消判断失误的号调用
        S($GetData['name'] . '_x_error_3task', null);
        S($GetData['name'] . '_error_3task', null);
        
        $task_id = $GetData['task_id'] + 0;
        $orders_id = $GetData['orders_id'] + 0;
        if (empty($task_id) || empty($orders_id)) {
            // tool::debugSend('任务ID空的什么鬼:' . $GetData['name'] . ':' . $task_id . ":" . $buff);
            return 0;
        }
        $web = $this->webNum;
        $wxautoM = M('wxauto');
        $datax = S('autoTask' . $GetData['name']);
        if (! isset($datax['id']) || empty($datax['id'])) { // 不存在了处理下一般要重置
            $datax = $this->getWxData($wxautoM, $GetData);
        }
        $taskM = new fdtaskModel();
        $table_name = $this->get_hash_table('wxorders', $GetData['name']);
        $wxordesM = M($table_name);
        $dataTask = S($datax['user_login'] . 'task');
        // 如果任务数据存在
        if (isset($dataTask['task_id']) && isset($dataTask['orders_id']) && $dataTask['orders_id'] == $orders_id) {
            $taskData = $dataTask;
            $task_id = $dataTask['task_id'];
            $orders_id = $dataTask['orders_id'];
        } else {
            $where['orders_id'] = $orders_id;
            $dataordes = $wxordesM->where($where)->find();
            if (! $dataordes) {
                tool::debugSend($table_name . '没有定单什么鬼:' . $datax['id'] . "_" . $buff);
                tool::debugSend($GetData);
                return 0;
            }
            $orders_id = $dataordes['orders_id'];
            $task_id = $dataordes['task_id'];
            $mapx['task_id'] = $task_id;
            $taskData = $taskM->where($mapx)
                ->cache('task_data' . $task_id, 60)
                ->find();
            if (! $taskData) {
                return 0;
            }
        }
        
        // 记录打码次数
        if (isset($GetData['code_msg'])) {
            if ($dataTask['danjia'] < 0.06) {
                tool::debugSend($task_id . ':打码价格过低');
            }
            if ($buff == 3) {
                $mapx['task_id'] = $task_id;
                $taskData = $taskM->where($mapx)->find();
                if ($taskData['xs_num'] > 100) {
                    $num_int = $taskData['xs_num'] / $taskData['n_num'];
                    if ($num_int > 6) {
                        $this->setTaskOverData($task_id, 'CODE出错太多自动停止');
                    }
                }
            }
            
            $this->cikeCodeNum($web, $GetData, $task_id);
        }
        // 清理缓存
        S('autoTask' . $GetData['name'], null);
        S($datax['user_login'] . 'task', null);
        
        $this->getsetS('task_run_' . $task_id . '_' . $orders_id, null);
        
        $where = array();
        $where['orders_id'] = $orders_id;
        if ($task_id) {
            $map['id'] = $datax['id'];
            if ($buff == 2) { // 任务完成数加1且处理金额加成，加给主帐号
                $this->codeOverTask($task_id, $taskData, $datax, $buff, $wxordesM, $GetData, $taskM, $wxautoM, $where, $web);
            } else { // 没投成功buff=3
                $this->errEndTask($errstr, $task_id, $datax, $wxordesM, $where, $buff, $taskData);
            }
            $map['buff'] = 2;
            
            if (! empty($GetData['pngkey'])) {
                $wxordesM->where($where)->setField('pic_end', 'http://toupiaoo.mwwlgs.com/' . $GetData['pngkey']);
            }
            $this->indcOnum($task_id, 2);
        }
    }

    public function errEndTask($errstr, $task_id, $datax, $wxordesM, $where, $buff, $taskData)
    {
        if (! empty($errstr)) {
            foreach ($this->stopIfmsg as $v) {
                if ($v[0] == 1) {
                    if ($errstr == $v[1]) {
                        $this->setTaskOverData($task_id, htmlspecialchars($errstr) . ':异常自动停止');
                    }
                } else {
                    if (strpos($errstr, $v[1]) !== false) {
                        $this->setTaskOverData($task_id, htmlspecialchars($errstr) . ':异常自动停止');
                    }
                }
            }
            if (strpos($errstr, '每小时投票数已达上限') !== false || strpos($errstr, '每小时最多接收点赞数上限') !== false) {
                // date('Y-m-d H:i:s');
                $this->setTaskTimeData($task_id, date('Y-m-d H:i:s', strtotime('+1 hour')), date('Y-m-d H:i:s', strtotime('+1 hour')) . '后开始继续投票—因票数上限');
            }
            if (strpos($errstr, '票数增长太快') !== false) {
                // date('Y-m-d H:i:s');
                $this->setTaskTimeData($task_id, date('Y-m-d H:i:s', strtotime('+10 minute')), date('Y-m-d H:i:s', strtotime('+10 minute')) . '后开始继续投票—因票数涨的过快');
            }
            if (strpos($errstr, '时间段已获得最大票数') !== false) {
                // date('Y-m-d H:i:s');
                $this->setTaskTimeData($task_id, date('Y-m-d H:i:s', strtotime('+10 minute')), date('Y-m-d H:i:s', strtotime('+10 minute')) . '后开始继续投票—因达到最大票数');
            }
            if (strpos($errstr, '请稍候') !== false) {
                // date('Y-m-d H:i:s');
                $this->setTaskTimeData($task_id, date('Y-m-d H:i:s', strtotime('+1 minute')), date('Y-m-d H:i:s', strtotime('+1 minute')) . '后开始继续投票—请稍候');
            }
            if (strpos($errstr, '剩余票数不足') !== false) {
                // date('Y-m-d H:i:s');
                $this->setTaskTimeData($task_id, date('Y-m-d H:i:s', strtotime('+2 minute')), date('Y-m-d H:i:s', strtotime('+2 minute')) . '后开始继续投票—剩余票数不足');
            }
            if (strpos($errstr, '恢复时间') !== false) {
                // date('Y-m-d H:i:s');
                if (date('Y-m-d', strtotime(substr($errstr, strpos($errstr, '>') + 1))) == date('Y-m-d')) { // 必需判断是否取到真实时间
                    $this->setTaskTimeData($task_id, substr($errstr, strpos($errstr, '>') + 1), substr($errstr, strpos($errstr, '>') + 1) . '后开始继续投票—被锁定');
                }
            }
            
            // 设置缓存实现跳过号跟任务
            $key = array_search($errstr, $this->wxIdTaskIdIfArr);
            if ($key) {
                // 判断链接是否
                if (strpos($taskData['tpurl'], $key) !== false) {
                    if (S('is_tiao_task' . $task_id . $key) != $key) {
                        S('is_tiao_task' . $task_id . $key, $key, 48 * 60 * 60);
                        $data_tiao['key'] = $key;
                        $data_tiao['task_id'] = $task_id;
                        S('is_tiao_task' . $task_id, $data_tiao, 48 * 60 * 60);
                    }
                    if (S('is_tiao_id' . $datax['id'] . $key) != $key) {
                        S('is_tiao_id' . $datax['id'] . $key, $key, 48 * 60 * 60);
                    }
                }
            }
            
            if ($errstr != '非法行为' && $errstr != '投票过于频繁，请稍后重试！' && $errstr != '解限失败' && $errstr != '登陆错误' && $errstr != 'TOKEN错误' && $errstr != '该账号异常' && $errstr != '访问被拦截，该账号被判断为专业刷票水军') {
                if (strpos($errstr, '限制登录') === false) {
                    if (isset($GetData['code_msg'])) {
                        $this->isoverTaskDCode($task_id, $errstr);
                    } else {
                        $this->isoverTask($task_id, $errstr);
                    }
                }
            }
        }
        // 不是阅读按实质的设
        try {
            $saveData['buff'] = $buff;
            if (! empty($errstr)) {
                $saveData['delta_dz'] = $errstr;
            }
            if (! $this->RunOutTimeNumIs(1, 'wier' . $task_id, 1)) {
                
                $wxordesM->where($where)->setField($saveData);
            }
        } catch (\Exception $e) {
            tool::debugSend($where);
        }
    }

    public function setTaskTimeData($task_id, $timerun, $str = ':设置时间')
    {
        $taskM = new fdtaskModel();
        $mapx['startime'] = $timerun;
        
        $mapx['beizhu'] = $str;
        $wherex['task_buff'] = 1;
        $wherex['task_id'] = $task_id;
        
        M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
            ->table('cmf_fdtask')
            ->where($wherex)
            ->setField($mapx);
    }

    public function setTaskOverData($task_id, $str = ':投票失败太多系统自动停止')
    {
        $taskM = new fdtaskModel();
        $mapx['endtime'] = date('Y-m-d H:i:s') - 5 * 60;
        $mapx['task_buff'] = 2;
        $mapx['beizhu'] = $str;
        $wherex['task_buff'] = 1;
        $wherex['task_id'] = $task_id;
        
        $web = $this->webNum;
        
        M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
            ->table('cmf_fdtask')
            ->where($wherex)
            ->setField($mapx);
    }

    public function isoverTaskDCode($task_id, $errstr)
    {
        $taskM = new fdtaskModel();
        // 如果有错。判断如果连续错几十次。。就停止这个任务
        if (! $this->getIfoverDCode($task_id)) {
            tool::debugSend('有打码连续错误:' . $task_id);
            $this->setTaskOverData($task_id, htmlspecialchars($errstr) . ':CODE投票失败太多自动停止');
        } else {
            $this->iserr($task_id, $errstr);
        }
    }

    public function isoverTask($task_id, $errstr)
    {
        $taskM = new fdtaskModel();
        // 如果有错。判断如果连续错几十次。。就停止这个任务
        if (! $this->getIfover($task_id)) {
            // tool::debugSend('有任务连续错误:' . $task_id);
            $this->setTaskOverData($task_id, htmlspecialchars($errstr) . ':投票失败太多自动停止');
        } else {
            $this->iserr($task_id, $errstr);
        }
    }

    public function iserr($task_id, $errstr)
    {
        $taskM = new fdtaskModel();
        // 如果有错。判断如果连续错几十次。。就停止这个任务
        if (strpos($errstr, '投票被锁定') !== false) {
            // tool::debugSend($task_id . '有任务错误:' . $errstr);
            $mapx['endtime'] = date('Y-m-d H:i:s') - 5 * 60;
            
            $mapx['task_buff'] = 2;
            $mapx['beizhu'] = htmlspecialchars($errstr);
            $wherex['task_buff'] = 1;
            $wherex['task_id'] = $task_id;
            
            $web = $this->webNum;
            
            M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                ->table('cmf_fdtask')
                ->where($wherex)
                ->setField($mapx);
        }
    }

    // 任务ID ，1：加。否则清重计，步进。最大次数
    public function getIfover($guid, $type = 1, $step = 1, $lazy = 300)
    {
        // 不自动停止了
        // return true;
        if ($type == 2) {
            S($guid . 'task_add', NULL);
            return true;
        }
        if (false !== ($value = S($guid . 'task_add'))) { // 存在缓存写入数据
            if ($value >= $lazy) {
                // 延时更新时间到了，删除缓存数据 并实际写入数据库
                S($guid . 'task_add', NULL);
                return false;
            } else {
                // 追加数据到缓存
                S($guid . 'task_add', $value + $step, 30 * 60);
                return true;
            }
        } else { // 没有缓存数据
            S($guid . 'task_add', $step, 30 * 60);
            return true;
        }
    }

    // 任务ID ，1：加。否则清重计，步进。最大次数
    public function getIfoverDCode($guid, $type = 1, $step = 1, $lazy = 30)
    {
        $guid = $guid . 'code';
        // 不自动停止了
        // return true;
        if ($type == 2) {
            S($guid . 'task_add', NULL);
            return true;
        }
        if (false !== ($value = S($guid . 'task_add'))) { // 存在缓存写入数据
            if ($value >= $lazy) {
                // 延时更新时间到了，删除缓存数据 并实际写入数据库
                S($guid . 'task_add', NULL);
                return false;
            } else {
                // 追加数据到缓存
                S($guid . 'task_add', $value + $step, 30 * 60);
                return true;
            }
        } else { // 没有缓存数据
            S($guid . 'task_add', $step, 30 * 60);
            return true;
        }
    }

    // 任务ID ，1：加。否则清重计，步进。最大次数
    public function getIfOutTimeNum($guid, $step = 1, $lazy = 100, $time = 2)
    {
        if (false !== ($value = S($guid . 'task_add'))) { // 存在缓存写入数据
            
            if ($value >= $lazy) {
                // 延时更新时间到了，删除缓存数据 并实际写入数据库
                S($guid . 'task_add', NULL);
                return false;
            } else {
                // 追加数据到缓存
                S($guid . 'task_add', $value + $step, $time);
                return true;
            }
        } else { // 没有缓存数据
            S($guid . 'task_add', $step, $time);
            return true;
        }
    }

    // 任务ID ，1：加。否则清重计，步进。最大次数
    public function geticc($guid, $step = 1, $lazy = 100)
    {
        if (false !== ($value = S($guid . 'int_add'))) { // 存在缓存写入数据
            if ($value >= $lazy) {
                // 延时更新时间到了，删除缓存数据 并实际写入数据库
                S($guid . 'int_add', NULL);
                return 0;
            } else {
                // 追加数据到缓存
                S($guid . 'int_add', $value + $step, 30 * 60);
                return $value + $step;
            }
        } else { // 没有缓存数据
            S($guid . 'int_add', $step, 30 * 60);
            return $step;
        }
    }

    public function taskaddsun($id, $sum)
    {
        $step = $this->lazyWriteEx($id . 'add_user_sum', $sum, 10);
        if (! empty($step)) {
            $userM = new UsersModel();
            $where['id'] = $id;
            
            $userM->where($where)->setInc('au_coin', $step);
        }
    }

    public function inDcUserSum($id, $sum, $type = 1, $wxau_id = 0, $danjia)
    {
        if ($id) {
            $userM = new UsersModel();
            $event = new EventModel();
            $where['id'] = $id;
            if ($type == 1) {
                if ($id == 1152 || $id == 1758) {
                    $this->taskaddsun($id, $sum * 3);
                } else {
                    if ($id == 2195) {
                        $this->taskaddsun($id, $sum * 2);
                    } else {
                        $this->taskaddsun($id, $sum);
                    }
                }
                // 加入事件表
                // $data = array(
                // $id,
                // 1,
                // $sum,
                // 0,
                // 0,
                // '自动投票ID:' . $wxau_id
                // );
                // $event->eventIo(1, $data);
                $this->countOutSum($sum, $danjia); // 统计支出,收入
            } else {
                $userM->where($where)->setDec('au_coin', $sum);
                // 加入事件表
                $data = array(
                    $id,
                    2,
                    $sum,
                    0,
                    0,
                    '自动投票所得'
                );
                $event->eventIo(1, $data);
            }
        }
    }

    function getwebolne($taskData, $olne, $isend = 1)
    {
        // 读取已接任务数这样做比较准
        $onumx = 0;
        S('taskapis_' . $taskData['task_id'], 'is_true', 10);
        $onumx = $this->cleOverTask($taskData['task_id'], $isend);
        if ($onumx === false) {
            return false;
        }
        if ($taskData['o_num'] < 1) {
            if ($onumx != 0) {
                $taskData['o_num'] = $onumx;
            } else {
                $taskData['o_num'] = 1;
            }
        } else {
            if ($onumx > 0) {
                $taskData['o_num'] = $onumx;
            }
        }
        return $taskData['o_num'];
    }

    // 计算时间与票数发布时间，现在的票速。限速数
    function gettimeout($fatime, $nowNum, $xzno)
    {
        $xzint = (time() - strtotime($fatime)) / 60;
        if ($xzno > 0) {
            if ($nowNum > ($xzno * $xzint)) {
                return true;
            }
        }
        return false;
    }

    // 接取任务
    public function gettask($taskid, $userid, $outid = 1, $table_name, $timeOut = 2)
    {
        $wxordesM = M($table_name);
        // 接任务要上锁
        $taskM = new fdtaskModel();
        
        $web = $this->webNum;
        
        $olne = $this->webOlne;
        $map['task_id'] = $taskid;
        $map['task_buff'] = 1;
        if (SLock($taskid . 'TASK_ID', $timeOut, 20, 50)) { // 标识 ,超时,锁时,读时(毫秒)
            $taskData = $taskM->where($map)->find();
            if ($taskData) {
                if ($taskData['task_buff'] != 1) {
                    SUnlock($taskid . 'TASK_ID');
                    $data['status'] = 0;
                    $data['msg'] = '已结束';
                    return $data;
                }
                // 判断如果错的太多停了
                if ($taskData['no_num'] > $this->isMaxNoNum) {
                    if ($taskData['n_num'] < 1) {
                        $this->setTaskOverData($taskid);
                        SUnlock($taskid . 'TASK_ID');
                        $data['status'] = 0;
                        $data['msg'] = '系统繁忙请重试';
                        return $data;
                    } else {
                        if ($taskData['no_num'] / $taskData['n_num'] > $this->isIfMaxNoNum) {
                            $this->setTaskOverData($taskid);
                            SUnlock($taskid . 'TASK_ID');
                            $data['status'] = 0;
                            $data['msg'] = '系统繁忙请重试';
                            return $data;
                        }
                    }
                }
                $tmpInt = $taskData['num'] - $taskData['o_num'] - $taskData['n_num'];
                if ($tmpInt > 100) {
                    $tmpTrue = $this->getwebolne($taskData, $olne, 3);
                } else {
                    $tmpTrue = $this->getwebolne($taskData, $olne, 1);
                }
                if ($tmpTrue !== false) {
                    $taskData['o_num'] = $tmpTrue;
                }
                
                if ($taskData['xzno'] != 0 && $taskData['o_num'] > $taskData['xzno'] + 1) {
                    $data['status'] = 0;
                    $data['msg'] = '已超速';
                    SUnlock($taskid . 'TASK_ID');
                    return $data;
                }
                
                // 判断是否限速取xzno 完成票数，时间/5 看达标没。没有就通过
                if ($this->gettimeout($taskData['startime'], $taskData['xznum'] + $taskData['o_num'], $taskData['xzno']) && $taskData['xzno'] != 0) {
                    $data['status'] = 0;
                    $data['msg'] = '已超速';
                    SUnlock($taskid . 'TASK_ID');
                    return $data;
                }
                
                $tmpInt = $taskData['num'] - $taskData['o_num'] - $taskData['n_num'];
                SUnlock($taskid . 'TASK_ID');
                if (($tmpInt + 5) > 0) {
                    
                    $ordesData['task_id'] = $taskData['task_id'];
                    $ordesData['user_id'] = $userid;
                    $ordesData['fuser_id'] = $taskData['id'];
                    $ordesData['getno'] = $taskData['getno'];
                    $ordesData['zz_id'] = $taskData['zz_id'];
                    $ordesData['danjia'] = $taskData['danjia'];
                    $ordesData['ta_sum'] = 0.2;
                    $ordesData['buff'] = 1;
                    $ordesData['add_time'] = date('Y-m-d H:i:s');
                    
                    // $sleepInt = $this->getTaskRunOutTimeOut($this->taskGetNum);
                    // if ($sleepInt) {
                    // tool::debugSend('task_out:' . $sleepInt);
                    // S('ALL_MYSQL_TIMEOUT_SELLP', 'is_true', $sleepInt);
                    // }
                    // $result = M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                    // ->table('cmf_' . $table_name)
                    // ->add($ordesData);
                    
                    $result = $wxordesM->add($ordesData);
                    if (! $result) {
                        $data['status'] = 0;
                        $data['msg'] = '开始任务出错将刷新任务';
                    } else {
                        $this->getsetS('task_run_' . $taskid . '_' . $result, 'is_r', $this->time_out + 10);
                        if ($tmpInt > 100) {
                            $this->indcOnum($taskid, 1, 3);
                        } else {
                            $this->indcOnum($taskid);
                        }
                        
                        // 加入任务隐藏数
                        $maptt['task_id'] = $map['task_id'];
                        $data['ta_sum'] = $ordesData['ta_sum'];
                        $data['status'] = 1;
                        $data['msg'] = '接任务成功';
                        $data['orders_id'] = $result;
                    }
                } else {
                    $data['status'] = 0;
                    $data['msg'] = '此任务已限速，领取失败';
                }
            } else {
                $data['status'] = 0;
                $data['msg'] = '接任务已过期将刷新任务';
                SUnlock($taskid . 'TASK_ID');
            }
        } else {
            $data['status'] = 0;
            $data['msg'] = '系统繁忙请重试';
        }
        return $data;
    }

    private function _request($curl, $https = true, $method = 'get', $data = null)
    {
        $ch = curl_init();
        // 初始化
        curl_setopt($ch, CURLOPT_URL, $curl);
        // 设置访问的URL
        curl_setopt($ch, CURLOPT_HEADER, false);
        // 设置不需要头信息
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        // 只获取页面内容，但不输出
        if ($https) {
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            // 不做服务器认证
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
            // 不做客户端认证
        }
        // $cookie='data/wexinData/cookie.txt';
        // curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie); //读取cookie
        if ($method == 'post') {
            curl_setopt($ch, CURLOPT_POST, true);
            // 设置请求是POST方式
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            // 设置POST请求的数据
        }
        $str = curl_exec($ch);
        
        // 执行访问，返回结果
        curl_close($ch);
        // 关闭curl，释放资源
        
        return $str;
    }

    function getProxyIp($num)
    {
        $curl = 'http://www.xiongmaodaili.com/xiongmao-web/api/glip?secret=99097abe27a860cb8ba9c3f1bf13ab3b&orderNo=GL20180422090314RXnR3Zpa&count=' . $num . '&isTxt=0';
        if ($num == 1) {
            $data = $this->_request($curl);
            $jsonarr = json_decode($data, true);
            // tool::debugSend($jsonarr);
            if ($jsonarr['code'] == 0) {
                foreach ($jsonarr['obj'] as $v) {
                    echo $v['ip'] . ':' . $v['port'];
                }
            }
            exit();
        }
        
        $curl = 'http://www.xiongmaodaili.com/xiongmao-web/api/glip?secret=99097abe27a860cb8ba9c3f1bf13ab3b&orderNo=GL20180422090314RXnR3Zpa&count=' . $num . '&isTxt=0';
        $data = SLP('get_data_ip_one');
        if (SLock('get_data_ip_one_lock', 5, 5, 200)) {
            if (! is_array($data)) {
                $data = $this->_request($curl);
                $jsonarr = json_decode($data, true);
                // tool::debugSend($jsonarr);
                if ($jsonarr['code'] == 0) {
                    foreach ($jsonarr['obj'] as $v) {
                        SLP('get_data_ip_one', $v);
                    }
                } else {
                    tool::debugSend($jsonarr);
                }
                SUnlock('get_data_ip_one_lock');
                $data = SLP('get_data_ip_one');
            }
        }
        
        echo $data['ip'] . ':' . $data['port'];
    }

    public function isy_code($is_type, $GetData)
    {
        $wxautoM = M('wxauto');
        $where['user_login'] = $GetData['name'];
        switch ($is_type) {
            case 1: // 头像设置 成功回传
                $wxData = $wxautoM->where($where)->setField('is_get', 0);
                $wxData = $wxautoM->where($where)->setField('msg', '设置头像成功');
                break;
            case 2: // 阅读看NEW成功回传
                $this->_getisyTimeOut('look', $GetData['name']);
                break;
            case 4: // 发NEW朋友圈
                $this->_getisyTimeOut('pyq_look_', $GetData['name']);
                $wxData = $wxautoM->where($where)->setField('msg', date('Y-m-d H:i:s') . '发朋友圈成功');
                break;
            case 6: // 终生生一次头像
                $this->_getisyTimeOutEx('set_head_6_onle_', $GetData['name']);
                
                break;
            case 7: // 终生取wxid
                $where = array();
                if (empty($GetData['pid'])) {
                    exit();
                }
                $where['pid'] = $GetData['pid'];
                M('wxauto_find')->where($where)->setField('buff', 3);
                
                break;
            case 8: // 终生取wxid
                $where = array();
                if (empty($GetData['pid'])) {
                    exit();
                }
                $where['pid'] = $GetData['pid'];
                M('wxauto_find')->where($where)->setField('buff', 2);
                break;
            case 9: // 终生取wxid
                $this->_getisyTimeOutEx('get_wxid_9_onle_', $GetData['name']);
                $wxData = $wxautoM->where($where)->setField('msg', date('Y-m-d H:i:s') . '选号成功');
                $postData = explode(',', $GetData['postData']);
                
                foreach ($postData as $v) {
                    if (empty($v)) {
                        continue;
                    }
                    $data['pid'] = $v;
                    $data['task_str'] = $v;
                    $data['add_time'] = date('Y-m-d H:i:s');
                    $data['buff'] = 1;
                    M('wxauto_find')->add($data);
                }
                break;
            case 10: // 终生取wxid
                $where['buff'] = 1;
                if (SLock('CODE_TASK_TREEEXX_FIND', 5, 5, 100)) {
                    $timeEnd = date('Y-m-d H:i:s', time() - 30 * 60);
                    $where['_string'] = "add_time<'$timeEnd'";
                    $wxData = M('wxauto_find')->where($where)->find();
                    if ($wxData) {
                        $where = array();
                        $where['id'] = $wxData['id'];
                        M('wxauto_find')->where($where)->setField('add_time', date('Y-m-d H:i:s'));
                        echo $wxData['pid'];
                        SUnlock('CODE_TASK_TREEEXX_FIND');
                        exit();
                    }
                    SUnlock('CODE_TASK_TREEEXX_FIND');
                }
                echo '1';
                break;
            case 11: // 取IP
                if ($GetData['name'] == 'is_debug') { // 取一个
                    $this->getProxyIp(1);
                } elseif ($GetData['name'] == 'open') {
                    $this->getProxyIp(10);
                }
                break;
            default:
                ;
                break;
        }
    }

    public function code6666($GetData)
    {
        if (isset($GetData['is_type'])) {
            $this->isy_code($GetData['is_type'], $GetData);
            exit();
        }
        // 读取帐号要关数据，写入数据库
        $wxautoM = M('wxauto');
        $where['user_login'] = $GetData['name'];
        
        if (isset($GetData['mdty'])) {
            $where['mdty'] = $GetData['mdty'];
        }
        
        $web = $this->webNum;
        
        $wxData = $wxautoM->where($where)->find();
        
        if (! $wxData) {
            $data = S('wxlogin' . $GetData['name']);
            
            if (! isset($data['xuser'])) {
                S('wxlogin' . $GetData['name'], '数据有误请重试', 60);
                exit();
            }
            if (isset($data['pwd']) && isset($data['xuser'])) {
                $datax['user_login'] = $data['user'];
                $datax['user_pass'] = $data['pwd'];
                $datax['pass'] = $data['pwdex'];
                $datax['create_time'] = date('Y-m-d H:i:s');
                $datax['run_time'] = date('Y-m-d H:i:s', time() - 240 * 60);
                ;
                $datax['mode'] = $data['mode'];
                $iplook = tool::GetIpLookup(tool::GetIP());
                $datax['province'] = $iplook['province'];
                $datax['city'] = $iplook['city'];
                $datax['user_sx'] = $data['xuser'];
                if (isset($GetData['mdty'])) {
                    $datax['mdty'] = $GetData['mdty'];
                }
            }
            // 限制号
            if (! empty($GetData['wx_type'])) {
                $datax['wx_type'] = $GetData['wx_type'];
            }
            if (isset($this->wxau_mode[$data['xuser']])) { // == 945 or $data['xuser'] == 7 or $data['xuser'] == 8 or $data['xuser'] == 315243 or $data['xuser'] == 315714) {
                $datax['is_yao'] = $this->wxau_mode[$data['xuser']];
            }
            
            if (isset($GetData['mdty'])) {
                if ($GetData['mdty'] == 2) {
                    $dataTmp = array();
                    $dataTmp['drvice'] = $_POST['day'];
                    $dataTmp['token'] = $GetData['token'];
                    $dataTmp['tokenTime'] = date('Y-m-d H:i:s', time());
                    $datax['drvice'] = json_encode($dataTmp);
                } else {
                    $datax['drvice'] = $_POST['day'];
                }
            } else {
                $datax['drvice'] = $_POST['day'];
            }
            if ($this->webNum == 2) {
                if ($data['xuser'] == 5911) {
                    $datax['is_yao'] = 4;
                }
            }
            $datax['session'] = $GetData['session'];
            $datax['buff'] = 1;
            
            $wxautoM->add($datax);
            
            if (isset($this->gs_acArr[$datax['user_sx']])) {
                $this->countMyInAc();
            } else {
                $this->countInAc();
            }
        } else {
            
            $data = S('wxlogin' . $GetData['name']);
            $datax['id'] = $wxData['id'];
            if (isset($data['pwd']) && isset($data['xuser'])) {
                $datax['user_pass'] = $data['pwd'];
                $datax['pass'] = $data['pwdex'];
                $datax['create_time'] = date('Y-m-d H:i:s');
                $datax['run_time'] = date('Y-m-d H:i:s');
                $datax['mode'] = $data['mode'];
                $iplook = tool::GetIpLookup(tool::GetIP());
                $datax['province'] = $iplook['province'];
                $datax['city'] = $iplook['city'];
                $datax['user_sx'] = $data['xuser'];
                if (isset($GetData['mdty'])) {
                    $datax['mdty'] = $GetData['mdty'];
                }
            }
            // 限制号
            if (! empty($GetData['wx_type'])) {
                $datax['wx_type'] = $GetData['wx_type'];
                S('autoTask' . $GetData['name'], null);
            }
            // derver
            if (isset($GetData['mdty'])) {
                if ($GetData['mdty'] == 2) {
                    try {
                        $oldDrvice = json_decode($wxData['drvice'], true);
                    } catch (\Exception $e) {
                        $oldDrvice['drvice'] = $_POST['day'];
                        $oldDrvice['token'] = $GetData['token'];
                        $oldDrvice['tokenTime'] = date('Y-m-d H:i:s', time());
                    }
                    $dataTmp = array();
                    if (empty($oldDrvice['drvice'])) {
                        $dataTmp['drvice'] = $_POST['day'];
                    } else {
                        $dataTmp['drvice'] = $oldDrvice['drvice'];
                    }
                    
                    if (isset($GetData['token']) && ! empty($GetData['token'])) {
                        $dataTmp['token'] = $GetData['token'];
                    } else {
                        $dataTmp['token'] = $oldDrvice['token'];
                    }
                    $dataTmp['tokenTime'] = date('Y-m-d H:i:s', time());
                    $datax['drvice'] = json_encode($dataTmp);
                } else {
                    if (! empty($GetData['day'])) {
                        $datax['drvice'] = $GetData['day'];
                    }
                }
            } else {
                if (! empty($GetData['day'])) {
                    $datax['drvice'] = $GetData['day'];
                }
            }
            if (! empty($GetData['session'])) {
                $datax['session'] = $GetData['session'];
            }
            $datax['buff'] = 1;
            if (isset($this->wxau_mode[$data['xuser']])) { // == 945 or $data['xuser'] == 7 or $data['xuser'] == 8 or $data['xuser'] == 315243 or $data['xuser'] == 315714) {
                $datax['is_yao'] = $this->wxau_mode[$data['xuser']];
            }
            // 62数据不存
            if (! empty($GetData['data62'])) {
                if (empty($wxData['session'])) {
                    $datax['session'] = $GetData['data62'];
                }
            }
            $wxautoM->save($datax);
        }
        S('wxlogin' . $GetData['name'], '登记成功', 60);
    }

    public function code6667($GetData)
    {
        // 读取帐号要关数据，写入数据库
        $wxautoM = M('wxauto');
        $where['user_login'] = $GetData['name'];
        $wxData = $wxautoM->where($where)->find();
        
        if (! $wxData) {
            // 查
            $where = array();
            if (isset($GetData['phone'])) {
                $where['pid'] = $GetData['phone'];
            } else {
                $where['pid'] = $GetData['name'];
            }
            
            M('wxauto_str')->where($where)->setField('buff', 2);
            $userStr = M('wxauto_str')->where($where)->find();
            if ($userStr) {
                $tid = $userStr['name'] + 0;
                if (empty($tid)) {
                    if (empty($GetData['tid'])) {
                        $datax['user_sx'] = 8;
                    } else {
                        $datax['user_sx'] = $GetData['tid'];
                    }
                } else {
                    $datax['user_sx'] = $userStr['name'];
                }
            } else {
                if (empty($GetData['tid'])) {
                    $datax['user_sx'] = 8;
                } else {
                    $datax['user_sx'] = $GetData['tid'];
                }
            }
            if (isset($GetData['wx_type'])) {
                $datax['wx_type'] = $GetData['wx_type'];
            }
            $datax['user_login'] = $GetData['name'];
            $datax['user_pass'] = $GetData['pwd'];
            $datax['create_time'] = date('Y-m-d H:i:s');
            $datax['run_time'] = date('Y-m-d H:i:s');
            if (! isset($GetData['mode'])) {
                $datax['mode'] = 1;
            } else {
                $datax['mode'] = $GetData['mode'];
            }
            
            $datax['wx_id'] = $GetData['wx_id'];
            
            if (empty($_POST['day'])) {
                exit();
            }
            $datax['drvice'] = $_POST['day'];
            $datax['session'] = $GetData['session'];
            $datax['pass'] = $GetData['strpwd'];
            if (isset($this->wxau_mode[$datax['user_sx']])) { // == 945 or $data['xuser'] == 7 or $data['xuser'] == 8 or $data['xuser'] == 315243 or $data['xuser'] == 315714) {
                $datax['is_yao'] = $this->wxau_mode[$datax['user_sx']];
            } else {
                $datax['is_yao'] = 2;
            }
            if ($datax['is_yao'] == 6) {
                $datax['buff'] = 4;
            } else {
                $datax['buff'] = 1;
            }
            $iplook = tool::GetIpLookup(tool::GetIP());
            $datax['province'] = $iplook['province'];
            $datax['city'] = $iplook['city'];
            
            $re = $wxautoM->add($datax);
            if ($re) {
                if (isset($this->gs_acArr[$datax['user_sx']])) {
                    $this->countMyInAc();
                } else {
                    $this->countInAc();
                }
                echo 1;
                exit();
            }
        } else {
            $where = array();
            $where['pid'] = $GetData['name'];
            M('wxauto_str')->where($where)->setField('buff', 2);
            $datax['id'] = $wxData['id'];
            
            if (empty($_POST['day'])) { // 保存WI—ID
                $datax['wx_id'] = $GetData['wx_id'];
                // 清除重复的。。WXID存在。且不等于这条数据
                $this->cleWxid($GetData['name'], $GetData['wx_id']);
                $re = $wxautoM->save($datax);
                exit();
            }
            if (empty($GetData['tid'])) {
                $datax['user_sx'] = 8;
            } else {
                $datax['user_sx'] = $GetData['tid'];
            }
            $datax['user_pass'] = $GetData['pwd'];
            $datax['create_time'] = date('Y-m-d H:i:s');
            $datax['run_time'] = date('Y-m-d H:i:s');
            if (! isset($GetData['mode'])) {
                $datax['mode'] = 1;
            } else {
                $datax['mode'] = $GetData['mode'];
            }
            
            $userStr = M('wxauto_str')->where($where)->find();
            if ($userStr) {
                if (empty($userStr['province'])) {
                    if (empty($GetData['tid'])) {
                        $datax['user_sx'] = 8;
                    } else {
                        $datax['user_sx'] = $GetData['tid'];
                    }
                } else {
                    $datax['user_sx'] = $userStr['province'];
                }
            }
            
            $datax['drvice'] = $_POST['day'];
            $datax['session'] = $GetData['session'];
            $datax['pass'] = $GetData['strpwd'];
            if (isset($this->wxau_mode[$datax['user_sx']])) { // == 945 or $data['xuser'] == 7 or $data['xuser'] == 8 or $data['xuser'] == 315243 or $data['xuser'] == 315714) {
                $datax['is_yao'] = $this->wxau_mode[$datax['user_sx']];
            } else {
                $datax['is_yao'] = 2;
            }
            if ($datax['is_yao'] == 6) {
                $datax['buff'] = 4;
            } else {
                $datax['buff'] = 1;
            }
            $iplook = tool::GetIpLookup(tool::GetIP());
            $datax['province'] = $iplook['province'];
            $datax['city'] = $iplook['city'];
            $re = $wxautoM->save($datax);
            if ($re) {
                if (isset($this->gs_acArr[$datax['user_sx']])) {
                    $this->countMyInAc();
                } else {
                    $this->countInAc();
                }
                echo 1;
                exit();
            }
        }
        echo 2;
        exit();
    }

    public function cleWxid($name, $wxid)
    {
        $wxautoM = M('wxauto');
        
        if ($wxid == $name) {
            // 清除 使之保持只有一个
            $where['user_login'] = $wxid;
            $datawx = $wxautoM->where($where)->find();
            $where = array();
            $where['id'] = array(
                'neq',
                $datawx['id']
            );
            $where['wx_id'] = $wxid;
            $wxautoM->where($where)->setField('buff', 9);
            return 0;
        }
        $where['user_login'] = $name;
        $datawx = $wxautoM->where($where)->find();
        $where = array();
        $where['id'] = array(
            'neq',
            $datawx['id']
        );
        $where['user_login'] = $wxid;
        $wxautoM->where($where)->setField('buff', 9);
    }

    public function codeErr($GetData)
    {
        $errid = $GetData['err_code'] + 0;
        // if (empty($GetData['err_msg']) || $errid == - 3 || $errid == - 34) {
        // if (! $this->RunOutTimeNumIs(1, $GetData['name'] . '_x_error_Task', 180)) {
        // $this->overTask($GetData, 3, '该账号异常');
        // }
        // $GetData['err_msg'] = $GetData['err_code'];
        // } else {
        // if (! $this->RunOutTimeNumIs(1, $GetData['name'] . '_x_error_Task', 180)) {
        // $this->overTask($GetData, 3, $GetData['err_msg']);
        // }
        // }
        
        $wxautoM = M('wxauto');
        
        $map['user_login'] = $GetData['name'];
        if (isset($GetData['mdty'])) {
            $map['mdty'] = $GetData['mdty'];
        }
        
        if ($errid == - 3) {
            
            if (! $this->RunOutTimeNumIs(3, $GetData['name'] . '_x_error_3', 240 * 60)) {
                
                exit();
            }
        }
        $ermsg = $GetData['err_msg'] + 0;
        if ($ermsg == - 3) {
            
            if (! $this->RunOutTimeNumIs(3, $GetData['name'] . '_error_3', 240 * 60)) {
                
                exit();
            }
        }
        
        switch ($errid) {
            case - 100:
                S('wxAuto' . $GetData['name'], '帐号被冻结', 60);
                S('wxlogin' . $GetData['name'], '帐号被冻结', 60);
                $dataT['buff'] = 3;
                $dataT['msg'] = $GetData['err_msg'] . $errid;
                if ($GetData['err_msg']=='你的版本过低，请升级。'){
                $map['language']=1;//只有老版本这个提示才是正确的
                }
                $wxautoM->where($map)->setField($dataT);
                break;
            case - 1:
                exit();
                break;
            case - 34:
                exit();
                break;
            case - 62:
                exit();
                break;
            case - 4:
                S('wxAuto' . $GetData['name'], '用户不存在', 60);
                S('wxlogin' . $GetData['name'], '帐号被冻结', 60);
                $dataT['buff'] = 3;
                $dataT['msg'] = $GetData['err_msg'] . $errid;
                $wxautoM->where($map)->setField($dataT);
                break;
            case - 3:
                //
                S('wxAuto' . $GetData['name'], '用户不存在或密码错误', 60);
                S('wxlogin' . $GetData['name'], '用户不存在或密码错误', 60);
                $dataT['buff'] = 3;
                $dataT['msg'] = $GetData['err_msg'] . $errid;
                $wxautoM->where($map)->setField($dataT);
                break;
            case 2:
                S('wxAuto' . $GetData['name'], '账号被封', 60);
                S('wxlogin' . $GetData['name'], '帐号被冻结', 60);
                $dataT['buff'] = 3;
                $dataT['msg'] = $GetData['err_msg'] . $errid;
                $wxautoM->where($map)->setField($dataT);
                break;
            case - 105:
                S('wxAuto' . $GetData['name'], '密码错误', 60);
                S('wxlogin' . $GetData['name'], '帐号被冻结', 60);
                $dataT['buff'] = 3;
                $dataT['msg'] = $GetData['err_msg'] . $errid;
                $wxautoM->where($map)->setField($dataT);
                break;
            case - 68:
                $dataT['buff'] = 3;
                $dataT['msg'] = '请重新扫码登陆:' . $GetData['err_msg'] . $errid;
                $wxautoM->where($map)->setField($dataT);
                break;
            case - 106:
                S('wxlogin' . $GetData['name'], $GetData['err_msg'], 60);
                $dataT['buff'] = 3;
                $dataT['msg'] = $GetData['err_msg'] . $errid;
                $wxautoM->where($map)->setField($dataT);
                break;
            case - 301:
                exit();
                break;
            case - 1001:
                
                // $wxdata = $wxautoM->where($map)->find();
                // $arrData = json_decode($wxdata['drvice'], true);
                // $dataTmp = array();
                // $dataTmp['drvice'] = $arrData['drvice'];
                // $dataTmp['token'] = '';
                // $datax['drvice'] = json_encode($dataTmp);
                // $wxautoM->where($map)->setField($datax);
                break;
            case 3423:
                $wxautoM->where($map)->setField('session', '');
                S('autoTask' . $GetData['name'], null);
            default:
                tool::debugSend($GetData);
                S('wxlogin' . $GetData['name'], '帐号或密码错误', 60);
                $dataT['buff'] = 3;
                $dataT['msg'] = $GetData['err_msg'] . $errid;
                $wxautoM->where($map)->setField($dataT);
        }
    }

    public function UpdataWxAutoVar($name) // 更新版本
    {
        $data[type] = 1; // 类型
        $data['down'] = $this->downUrl;
        $data['fname'] = $this->zipName; // 下载名,压缩包，会在脚本当前目录释放出来
        $data['killName'] = 'python.exe'; // 杀掉进程名才能完全复盖文件
        $data['sleep'] = 3; // 下次wihle暂停时间
                            
        // 存在脚本就会被执行。如果不存在就不执行
        if ($this->is_Run) {
            $data['scr'] = $this->UpdataSrc; // 脚本内容
        }
        // 特别执行
        if (0) {
            $data['scrFRun'] = "ZGVmIHJ1bndvcmsoZGljRGF0YSk6CiAgICBwcmludChkaWNEYXRhWydzY3JGUnVuJ10pCg=="; // 脚本内容
            $data['filename'] = 'cctem'; // 模块名..也就是文件名
            $data['evelFun'] = 'runwork(dicData)'; // 脚本中要执行的FUN
        }
        $data['ip'] = tool::GetIP();
        $this->ajaxReturn($data);
    }

    public function logindj($GetData)
    {
        $data[type] = 2; // 类型执行脚本。一般指任务
        $data['sleep'] = 5; // 下次wihle暂停时间
                            // 读取登记队列
        $datax = SLP('wxLogin');
        if (is_array($datax)) {
            
            $iplook = $this->getIpDq($GetData);
            $province = $iplook['province'];
            $city = $iplook['city'];
            // 判断这个人的号指定到哪个地区
            if (isset($this->onleDQ[$datax['xuser']])) {
                if ($province . $city == $this->onleDQ[$datax['xuser']]['province'] . $this->onleDQ[$datax['xuser']]['city']) {
                    S('wxlogin' . $datax['user'], $datax, 10 * 60);
                    $name = $datax['user'];
                    // $data['scr'] = ""; // 执行的代码
                    $data['fname'] = 'main.py'; // 执行的文件名
                    $data['paraM'] = $name; // 执行参数 缓存在服务器上的字串，脚本文件提交得到其内容
                    $data['mode'] = 1; // 登记。2执行任务
                    $data['ip'] = tool::GetIP();
                    $this->ajaxReturn($data);
                }
                SLP('wxLogin', $datax);
            } else {
                S('wxlogin' . $datax['user'], $datax, 4 * 60);
                $name = $datax['user'];
                // $data['scr'] = ""; // 执行的代码
                $data['fname'] = 'main.py'; // 执行的文件名
                $data['paraM'] = $name; // 执行参数 缓存在服务器上的字串，脚本文件提交得到其内容
                $data['mode'] = 1; // 登记。2执行任务
                $data['ip'] = tool::GetIP();
                $this->ajaxReturn($data);
            }
            // // 判断地区号的数量。再决定登记在哪个地区/读取所有在线地区，所有数量。。查出最少的
            // $sql = 'SELECT `province`,`city`,COUNT(*) as num FROM `cmf_wxauto` WHERE buff=1 or buff=2 group by `city` ORDER BY `num` ASC';
            // $dataDp = M('wxauto')->query($sql);
            
            // foreach ($dataDp as $v) {
            
            // if (S($v['province'] . $v['city'] . 'isOnline') == 'onetrue') {
            // if ($province . $city != $v['province'] . $v['city']) {
            // SLP('wxLogin', $datax);
            // exit();
            // } else {
            //
            // }
            // }
            // }
        }
    }

    public function RunOutTimeNumOld()
    {
        // 限制访问次数
        if (S("runcodeTimeExit") == 'isOnline') {
            $data[type] = 3; //
            $data['sleep'] = 4; // 下次wihle暂停时间
            $data['ip'] = tool::GetIP();
            $data['or'] = 1;
            $data['msg'] = 'outerr';
            // tool::debugSend('超过次数不能访问');
            $this->ajaxReturn($data);
        }
        if (! $this->getIfOutTimeNum('runcodeTime', 1, 1000, 1)) {
            $data[type] = 3; //
            $data['sleep'] = 4; // 下次wihle暂停时间
            $data['ip'] = tool::GetIP();
            $data['or'] = 1;
            $data['msg'] = 'numerr';
            S('runcodeTimeExit', 'isOnline', 1);
            // tool::debugSend('超过次数');
            $this->ajaxReturn($data);
        }
    }

    // 步进多少达到就返回假 ,时间段分钟
    public function RunOutIsTime($num = 100, $key = 'rumTimIseOut', $timeOutStart = 1, $timeOutEnd = 30)
    {
        $redis = redis::getRedis();
        
        $check = $redis->exists($key);
        if ($check) {
            $count = $redis->incr($key);
            // $count = $redis->get($key);
            if ($count > $num) {
                $outtime = $redis->pttl($key);
                if ($outtime == - 1) {
                    $redis->del($key);
                }
                return false;
            }
        } else {
            $redis->incr($key);
            // 限制时间为1秒
            $redis->expire($key, rand($timeOutStart, $timeOutEnd) * 60);
        }
        
        // $count = $redis->get($key);
        return true;
        // tool::debugSend($count);
    }

    public function getTaskRunOutTimeOut($num = 100, $key = 'getTaskrumTimeOutNew', $timeOut = 1)
    {
        $redis = redis::getRedis();
        
        $check = $redis->exists($key);
        if ($check) {
            $count = $redis->incr($key);
            // $count = $redis->get($key);
            if ($count > $num) {
                $outtime = $redis->pttl($key);
                if ($outtime == - 1) {
                    $redis->del($key);
                }
                
                return $count - $num;
            }
            return false;
        } else {
            $redis->incr($key);
            // 限制时间为1秒
            $redis->expire($key, $timeOut);
        }
        
        // $count = $redis->get($key);
        return false;
    }

    public function RunOutTimeNum($web, $num = 100, $key = 'rumTimeOutNew', $timeOut = 1)
    {
        $redis = redis::getRedis();
        
        $check = $redis->exists($key);
        if ($check) {
            $count = $redis->incr($key);
            // $count = $redis->get($key);
            if ($count > $num) {
                $outtime = $redis->pttl($key);
                if ($outtime == - 1) {
                    $redis->del($key);
                }
                $data[type] = 3; //
                $data['sleep'] = 4; // 下次wihle暂停时间
                $data['ip'] = tool::GetIP();
                $data['or'] = 1;
                $data['web'] = $web;
                $data['msg'] = 'outerr';
                // tool::debugSend('超频率');
                $this->ajaxReturn($data);
            }
        } else {
            $redis->incr($key);
            // 限制时间为1秒
            $redis->expire($key, $timeOut);
        }
        
        // $count = $redis->get($key);
        // tool::debugSend($count);
    }

    public function ipadlogin($GetData)
    {
        if ($this->isipadlogin) {
            return 0;
        }
        // 读取登记队列
        $datax = SLP('wxipadLogin');
        if (is_array($datax) && isset($datax['userid'])) {
            $data[type] = 4; // 类型执行脚本。一般指任务
            $data['sleep'] = 5; // 下次wihle暂停时间
            $userid = $datax['userid'];
            // $data['scr'] = ""; // 执行的代码
            $data['fname'] = 'runapidlogin.py'; // 执行的文件名
            $data['userid'] = $userid; // 执行参数 缓存在服务器上的字串，脚本文件提交得到其内
            $data['ip'] = tool::GetIP();
            $data['serverip'] = $this->serverip;
            $this->ajaxReturn($data);
        }
    }

    function runMgWxLogin($web)
    {
        $datax = SLP('wxipadLoginMG');
        if (is_array($datax) && isset($datax['userid'])) {
            $data[type] = 4; // 类型执行脚本。一般指任务
            $data['sleep'] = 5; // 下次wihle暂停时间
            $userid = $datax['userid'];
            // $data['scr'] = ""; // 执行的代码
            $data['fname'] = 'runapidlogin.py'; // 执行的文件名
            $data['userid'] = $userid; // 执行参数 缓存在服务器上的字串，脚本文件提交得到其内
            $data['ip'] = tool::GetIP();
            $data['serverip'] = $this->serverip;
            if (! $this->getIfover($data['ip'] . 'ex', 1, 1, 100)) {
                $data['reAdsl'] = 1;
            } else {
                $data['or'] = 2;
            }
            $this->ajaxReturn($data);
        }
        $data[type] = 3; //
        $data['sleep'] = 4; // 下次wihle暂停时间
        $data['ip'] = tool::GetIP();
        $data['or'] = 1;
        $data['web'] = $web;
        $data['msg'] = 'magou';
        $this->ajaxReturn($data);
    }

    public function RunWxTask() // 无限读取数据。。
    {
        $web = $this->webNum;
        // 暂停跑号
        $isRun = S('ALL_MYSQL_TIMEOUT_SELLP');
        if ($this->isoff || $isRun == 'is_true') {
            $data[type] = 3; //
            $data['sleep'] = 4; // 下次wihle暂停时间
            $data['ip'] = tool::GetIP();
            $data['or'] = 1;
            $data['web'] = $web;
            $this->ajaxReturn($data);
        }
        
        $data['var'] = $this->nowVar;
        // 获取当前版本号
        $GetData = json_decode($_POST['data'], true);
        
        // 机器在线数
        S('mac_login_' . $GetData['mac'], 'is_t', 60);
        if ($web == 1) {
            if ($GetData['var'] != $this->nowVar) { // 更新版本
                $this->UpdataWxAutoVar();
            }
        }
        
        if ($GetData['province'] == '加利福尼亚') {
            $this->runMgWxLogin($web);
            exit();
        }
        if ($GetData['wnum'] > 5 || $GetData['wnumx'] > 5 || $GetData['wnumxx'] > 5) { // 如果执行中的脚本超过这个数就暂停下
                                                                                       // ipad登记
            $this->ipadlogin($GetData);
            
            $data[type] = 3; // 类型
            $data['sleep'] = 5; // 下次wihle暂停时间
            $data['ip'] = tool::GetIP();
            if (! $this->getIfover($data['ip'], 1, 1, 100)) {
                $data['reAdsl'] = 1;
            } else {
                $data['or'] = 2;
            }
            $data['web'] = $web;
            $data['while'] = S($data['ip'] . 'task_add');
            $this->ajaxReturn($data);
        }
        
        $this->RunOutTimeNum($web, $this->wxRunNum);
        
        $key = 'system_run';
        if ($_POST['day'] != $key) { // 验证KEY
            $data[type] = 3; //
            $data['sleep'] = 4; // 下次wihle暂停时间
            $data['ip'] = tool::GetIP();
            $data['or'] = 1;
            $data['web'] = $web;
            $this->ajaxReturn($data);
        }
        
        // ipad登记
        $this->ipadlogin($GetData);
        // 执行作务 缓存数据，执行脚本下拉数据执行
        if (1) {
            $this->wxTaskAuto($GetData, $web);
        }
        $data['ip'] = tool::GetIP();
        $data[type] = 3; // 类型
        $data['sleep'] = 5; // 下次wihle暂停时间
        $data['or'] = 3;
        $data['web'] = $web;
        $this->ajaxReturn($data);
    }

    public function codeIsagen($datax)
    {
        $table_name = $this->get_hash_table('wxorders', $datax['user_login']);
        $wxordesM = M($table_name);
        // 查找这个人失效的定单清理掉 改成失败单
        // $where = array();
        // $where['user_id'] = $datax['id'];
        // $where['buff'] = 1;
        // try {
        // $wxordesM->where($where)->setField('buff', 3);
        // } catch (\Exception $e) {
        // tool::debugSend('4444');
        // }
        
        return $table_name;
    }

    public function isifYhLook($datax, $GetData)
    {
        return false;
        // 有任务或到时间养号
        // 随机养号。聊天发朋友圈等
        if ($datax['is_yao'] != 0) {
            // $is_chatData = S('is_chat' . $datax['user_login']);
            if ($this->_getYHTimeOut($datax, 2)) {
                $data = $this->getdomwxTask($datax, $GetData);
                $this->ajaxReturn($data);
            }
        }
        
        // 判断是否要阅读
        $tmpInt = $this->lookisMax;
        if (isset($this->lookIsno[$datax['user_sx']])) {
            $tmpInt = $this->lookIsno[$datax['user_sx']];
        }
        if ($datax['user_look'] < $tmpInt) {
            if ($this->_getLookTimeOut($datax, 2)) {
                
                $data = $this->getdomwxTask($datax, $GetData);
                $this->ajaxReturn($data);
            }
        }
    }

    // 登记在线机器
    public function djisOnline($GetData, $city)
    {
        // 保存服务器机子情况，只要访问了就缓存起来。在别的地方读取
        if (! empty($GetData['mac'])) {
            if (S($GetData['mac']) != 'isOnline') {
                $serverdata = S('server_buff');
                if (isset($serverdata)) {
                    $serverdata[$city][$GetData['mac']] = time();
                }
                S($GetData['mac'], 'isOnline', 1 * 60);
                S('server_buff', $serverdata, 60 * 60);
            }
        }
    }

    function geturlData($ip)
    {
        $datatype = 'jsonp';
        $url = 'http://api.ip138.com/query/?ip=' . $ip . '&datatype=' . $datatype;
        
        $header = array(
            'token:36adefa9f6420b3d984604a15986aea7'
        );
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
        curl_setopt($ch, CURLOPT_TIMEOUT, 3);
        $handles = curl_exec($ch);
        curl_close($ch);
        return $handles;
    }

    // 读IP取地区
    public function GetIpLookup($ip = '')
    {
        if (empty($ip)) {
            return '请输入IP地址';
        }
        $stint = strripos($ip, '.');
        $ipx = substr($ip, 0, $stint);
        $where['ip'] = $ipx;
        $arrdata = M()->db(6, "mysql://baiiqwxf:@Aa223514@120.77.227.144:3306/fskj_db")
            ->table('cmf_ip_str')
            ->where($where)
            ->find();
        if (! $arrdata) {
            $url = 'http://ip.taobao.com/service/getIpInfo.php?ip=' . $ip;
            
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1);
            curl_setopt($ch, CURLOPT_TIMEOUT, 3);
            $res = curl_exec($ch);
            curl_close($ch);
            $arrdata = array();
            if (empty($res)) {
                $res = $this->geturlData($ip);
                if (empty($res)) {
                    return 0;
                }
                $json = json_decode($res, true);
                if (isset($json['ret']) && $json['ret'] == 'ok') {
                    // $json['ip'] = $ip;
                    $json = $json['data'];
                } else {
                    return 0;
                }
                $arrdata = array();
                $arrdata['province'] = $json[1];
                $arrdata['city'] = $json[2];
            } else {
                $json = json_decode($res, true);
                if (isset($json['code']) && $json['code'] == 0) {
                    // $json['ip'] = $ip;
                    $json = $json['data'];
                } else {
                    return false;
                }
                
                $arrdata['province'] = str_replace('省', '', $json['region']);
                if (empty($json['city'])) {
                    $arrdata['city'] = str_replace('市', '', $json['country']);
                } else {
                    $arrdata['city'] = str_replace('市', '', $json['city']);
                }
            }
            tool::upaddIpData($ip, $arrdata['province'], $arrdata['city']);
        }
        $arrdata['area'] = $json['area'];
        return $arrdata;
    }

    public function getIpDq($GetData)
    {
        if (isset($GetData['area'])) {
            $arrdata = array();
            $arrdata['province'] = $GetData['province'];
            $arrdata['city'] = $GetData['city'];
            $arrdata['area'] = $GetData['area'];
            return $arrdata;
        }
        if (isset($GetData['runip'])) {
            $arrdata['province'] = tool::GetIP();
            $arrdata['city'] = 'ip';
            
            return $arrdata;
        }
        if (isset($GetData['is_ip'])) {
            $arrdata['province'] = $GetData['is_ip'];
            $arrdata['city'] = 'ip';
            
            return $arrdata;
        }
        // 读取IP地区来判断这个机器可以登哪些号
        $ip = tool::GetIP();
        $iplook = S($ip . 'getcprovince');
        if (! is_array($iplook)) {
            $iplook = $this->GetIpLookup($ip);
            if (! $iplook) {
                if (APP_DEBUG) {
                    $iplook['province'] = '本地';
                    $iplook['city'] = '本地';
                    // 地区在线
                    if (S($iplook['province'] . $iplook['city'] . 'isOnline') != 'onetrue') {
                        S($iplook['province'] . $iplook['city'] . 'isOnline', 'onetrue', 60);
                    }
                    return $iplook;
                }
                exit('1');
            }
            S($ip . 'getcprovince', $iplook, 10 * 60);
        }
        // 地区在线
        // if (S($iplook['province'] . $iplook['city'] . 'isOnline') != 'onetrue') {
        // S($iplook['province'] . $iplook['city'] . 'isOnline', 'onetrue', 60);
        // }
        return $iplook;
    }

    public function getUserDataTask($datax, $GetData)
    {
        // 不清楚哪里写错了会重复上号。这里做个限制吧
        if (S('ordes_cl_run' . $datax['id']) != 'onetrue') {
            S('ordes_cl_run' . $datax['id'], 'onetrue', $this->wxrunTime * 50);
        } else {
            $data[type] = 3; //
            $data['sleep'] = 4; // 下次wihle暂停时间
            $data['ip'] = tool::GetIP();
            $data['or'] = 1;
            $data['msg'] = 'erragern:' . $datax['id'];
            $this->ajaxReturn($data);
            exit();
        }
        
        $table_name = $this->codeIsagen($datax);
        $wxordesM = M($table_name);
        $taskM = new fdtaskModel();
        
        // 清掉一些无用订单。要不然后面计算不准
        // if (! $this->RunOutTimeNumIs(1, 'ordes_cs_all', 1)) {
        
        // if (S('ordes_cl' . $table_name) != 'onetrue') {
        // if (SLock('ordes_clEx' . $table_name, 0, 20, 100)) { // 标识 ,超时,锁时,读时(毫秒)
        // S('ordes_cl' . $table_name, 'onetrue', 10);
        // $timeEnd = date('Y-m-d H:i:s', time() - 70);
        // $saveData['buff'] = 3;
        // $saveData['delta_dz'] = '返回超时';
        // $wxordesM->where('`buff` = 1 AND \'' . $timeEnd . '\'>add_time')->setField($saveData);
        // }
        // }
        // }
        // 看有没有任务
        // 随机取一个任务s
        
        $dataGTask = $taskM->getonetaskWxAuto($datax, $table_name, isset($this->lookIsno[$datax['user_sx']]));
        if ($dataGTask) {
            $data = $this->getdomwxTask($datax, $GetData, $dataGTask);
            $this->ajaxReturn($data);
        } else {
            $data[type] = 3; //
            $data['or'] = 1;
            $data['sleep'] = 3; // 下次wihle暂停时间
            $data['msg'] = '没接到任务';
            $data['ip'] = tool::GetIP();
        }
        $this->isifYhLook($datax, $GetData);
        $this->ajaxReturn($data);
    }

    public function wxTaskAuto($GetData, $web) // 无限读取用户数据。。下发给执行
    {
        $iplook = $this->getIpDq($GetData);
        $province = $iplook['province'];
        $city = $iplook['city'];
        
        if (empty($province)) {
            tool::debugSend('IP为空什么鬼');
            return 0;
        }
        $isIpad = '';
        if (isset($GetData['mdty']) && $GetData['mdty'] == 2) {
            $isIpad = '2';
        }
        
        // 每次都更新下地区不跑的号。。要不然可能跑不到所有号。试试
        $this->getupdatadelData($iplook, $isIpad, $GetData, $web);
        // 查找空闲用户上锁 先在缓存里找有没有，没有再查数据
        
        $isnum = SLLen('wxTaskAuto_lp' . $province . $city . $isIpad) + 0;
        if ($isnum < 40) {
            $this->getwxTaskAuto($iplook, $isIpad, $web); // 没数据在这里读取
        }
        
        // 读取任务队列 再判断这个号能不能接任务不能就跳
        $datax = SLP('wxTaskAuto_lp' . $province . $city . $isIpad);
        
        if (is_array($datax) && ! empty($datax['id'])) {
            $this->getUserDataTask($datax, $GetData);
        }
    }

    // 每次可能调用处理
    function getupdatadelData($iplook, $isIpad, $GetData, $web)
    {
        $province = $iplook['province'];
        $city = $iplook['city'];
        
        $wxautoM = M('wxauto');
        if (S('buffTowisOnline' . $isIpad) != 'onetrue') {
            if (SLock('wxTaskAutoupdatadq' . $isIpad, 0, 30, 200)) { // 标识 ,超时,锁时,读时(毫秒)
                S('buffTowisOnline' . $isIpad, 'onetrue', 10);
                // 所有在工作中且超过2分钟的帐号将被重置防卡住
                $timeEnd = date('Y-m-d H:i:s', time() - 5 * 60);
                $sql = '';
                if ($isIpad == 2) {
                    $sql = ' and mdty=2 ';
                } else {
                    $sql = ' and mdty=1 ';
                }
                
                $ordesArrData = $wxautoM->where('buff=2 and \'' . $timeEnd . '\'>run_time' . $sql)
                    ->limit(400)
                    ->order('run_time ASC')
                    ->select();
                
                $tmpTrue = false;
                $arr = array();
                foreach ($ordesArrData as $vr) {
                    $arr[] = $vr['id'];
                    $tmpTrue = true;
                }
                if ($tmpTrue) {
                    $arr_string = join(',', $arr);
                    $mapx = array();
                    $mapx['buff'] = 1;
                    
                    $re = (string) $wxautoM->where("id IN ($arr_string)")->save($mapx);
                }
                if ($city != 'ip') {
                    // 查出超过一天未被任务机器登陆的号给现在的号登陆
                    $timeEnd = date('Y-m-d H:i:s', time() - 5 * 60 * 60);
                    $dataSet = array();
                    $dataSet['province'] = $province;
                    $dataSet['city'] = $city;
                    $map['_string'] = "buff=1 and is_yao!=4 and '$timeEnd'>run_time and (city!='ip' or city!='$city' or  city='0') $sql";
                    $resData = $wxautoM->where($map)
                        ->limit(400)
                        ->order('run_time ASC')
                        ->select();
                    $tmpTrue = false;
                    $arr = array();
                    foreach ($resData as $V) {
                        if ($V['city'] == '美国' || $V['city'] == 'ip') {
                            continue;
                        }
                        $arr[] = $V['id'];
                        $tmpTrue = true;
                    }
                    if ($tmpTrue) {
                        $arr_string = join(',', $arr);
                        
                        $re = (string) $wxautoM->where("id IN ($arr_string)")->save($dataSet);
                    }
                }
            }
            SUnlock('wxTaskAutoupdatadq' . $isIpad);
        }
    }

    // 交叉合并两个数组
    function codeArrTwo($list, $list2)
    {
        $size = count($list) > count($list2) ? count($list) : count($list2); // 取出元素最多的数组循环
        $arr = array();
        for ($i = 1; $i <= $size; $i ++) {
            if (isset($list[$i])) {
                array_push($arr, $list[$i]); // 将数组压入新的变量
            }
            if (isset($list2[$i])) {
                array_push($arr, $list2[$i]); // 将数组压入新的变量
            }
        }
        return $arr;
    }

    function getwxautoData($wxautoM, $province, $city, $isIpad)
    {
        $timeEnd = date('Y-m-d H:i:s', time() - $this->wxrunTime * 60); // 查找最前空闲的500个帐号 ,或超过30秒没有工作的 // and \'' . $timeEnd . '\'>run_time
        $sql = '';
        if ($isIpad == 2) {
            $sql = ' and mdty=2 ';
        } else {
            $sql = ' and mdty=1 ';
        }
        if (! $this->is_wxautotype) {
            $datawxurerData = $wxautoM->where('buff=1 and wx_type=0 and province=\'' . $province . '\' and city=\'' . $city . '\' and  is_yao!=4 and \'' . $timeEnd . '\'>run_time' . $sql)
                ->order('run_time ASC')
                ->limit(150)
                ->select(); // 按时间排序
            
            $datawxurerDataEx = $wxautoM->where('buff=1 and wx_type=1 and province=\'' . $province . '\' and city=\'' . $city . '\' and  is_yao!=4 and \'' . $timeEnd . '\'>run_time' . $sql)
                ->order('run_time ASC')
                ->limit(150)
                ->select(); // 按时间排序
            $datawxurerData = $this->codeArrTwo($datawxurerData, $datawxurerDataEx);
        } else {
            $datawxurerData = $wxautoM->where('buff=1 and province=\'' . $province . '\' and city=\'' . $city . '\' and  is_yao!=4 and \'' . $timeEnd . '\'>run_time' . $sql)
                ->order('run_time ASC')
                ->limit(200)
                ->select(); // 按时间排序
        }
        
        return $datawxurerData;
    }

    // 读取任务数据主要处理
    public function getwxTaskAuto($iplook, $isIpad, $web)
    {
        $province = $iplook['province'];
        $city = $iplook['city'];
        $wxautoM = M('wxauto');
        if (SLock('wxTaskAuto' . $province . $city . $isIpad, 0, 40, 200)) { // 标识 ,超时,锁时,读时(毫秒)
            $isnum = SLLen('wxTaskAuto_lp' . $province . $city . $isIpad) + 0;
            if ($isnum > 50) {
                SUnlock('wxTaskAuto' . $province . $city . $isIpad);
                return true;
            }
            
            $datawxurerData = $this->getwxautoData($wxautoM, $province, $city, $isIpad);
            if (empty($datawxurerData)) {
                SUnlock('wxTaskAuto' . $province . $city . $isIpad);
                return '';
            }
            
            $mapx['run_time'] = date('Y-m-d H:i:s', time());
            $mapx['buff'] = 2;
            
            $tmpTrue = false;
            $arr = array();
            foreach ($datawxurerData as $v) { // 下次工作时间
                $arr[] = $v['id'];
                $tmpTrue = true;
            }
            
            if ($tmpTrue) {
                $arr_string = join(',', $arr);
                try {
                    
                    $wxautoM->where("id IN ($arr_string)")->save($mapx);
                    
                    foreach ($datawxurerData as $v) { // 压进队列
                        SLP('wxTaskAuto_lp' . $province . $city . $isIpad, $v);
                    }
                } catch (\Exception $e) {
                    tool::debugSend($e->getMessage());
                }
            }
            
            SUnlock('wxTaskAuto' . $province . $city . $isIpad);
        }
        
        return true;
    }

    public function getdomwxTask($datax, $GetData, $dataGTask)
    {
        // $datax['run_time']//$datax['city'];
        $data['sleep'] = 4; // 下次wihle暂停时间
        $data['user'] = $datax['user_login'];
        $data['mode'] = 2;
        $data['type'] = 2;
        $name = $data['user'];
        
        // 每天定时执行此脚本
        $str = S('run_' . $GetData['mac']);
        if ($str != 'auto_src') {
            if (date('H', time()) == 4) {
                
                $data['scr'] = $this->wheSrc; // 执行的代码
            }
            S('run_' . $GetData['mac'], 'auto_src', 65 * 60);
        }
        // 给跑任务的连接读取。。不用再数据库里读
        S('autoTask' . $datax['user_login'], $datax, 10 * 60);
        $data['fname'] = 'main.py'; // 执行的文件名
        $data['paraM'] = $name; // 执行参数
        $data['ip'] = tool::GetIP();
        $data['task_id'] = $dataGTask['task_id'];
        $data['orders_id'] = $dataGTask['orders_id'];
        // 判断IPAD用哪个服务器
        // if ($datax['mdty'] == 2) {
        
        // $tmparr = array_keys($this->dqIpadArr);
        // $intkey = $this->geticc('whereip', 1, count($this->dqIpadArr) - 1);
        // $key = $tmparr[$intkey];
        // $serverIP = $this->dqIpadArr[$key];
        // if (empty($serverIP)) {
        // tool::debugSend(count($this->dqIpadArr) . ':IP空:' . $intkey);
        // foreach ($this->dqIpadArr as $v) {
        // $serverIP = $v;
        // break;
        // }
        // }
        // // 端口分配
        // $serip = $this->geticc($serverIP, 1, 15) + 3330;
        // if ($serip == 3332) {
        // $serip += 1;
        // }
        // $data['serip'] = $serverIP . ':' . $serip;
        // }
        // if (! isset($data['serip'])) {
        // $data['serip'] = '118.190.204.82:3335';
        // }
        $data['serip'] = '118.190.204.82:3335';
        return $data;
    }

    public function gettomp()
    {
        $datax = S($_POST['link']);
        $data['code'] = 1;
        $data['title'] = $datax['title'];
        $data['nickname'] = $datax['title'];
        $this->ajaxReturn($data);
    }

    // 取得数量级别单价
    public function getnumdj($taskruledata, $whereurl, $valNameNum)
    {
        if (isset($this->isgoacArr[get_current_userid()])) {
            return false;
        }
        foreach ($taskruledata as $v) {
            // 读出数值其间
            
            // 如果是官方的
            if (strpos($v['linkurl'], '://mp.weixin.qq.com/') !== false) {
                
                continue;
            }
            
            if (strpos($whereurl, $v['linkurl']) !== false) {
                
                return $v['user_sum'];
            }
        }
        return false;
    }

    // ,2检测1,检测加重写
    private function _getLookTimeOut($datax, $tpye = 1)
    {
        if (! $this->islook) {
            return false;
        }
        // return false;
        if (! isset($this->lookkzArr[$datax['user_sx']])) {
            return false;
        }
        $name = $datax['user_login'];
        $file = './data/wxautolook/' . $name;
        // 用于保存access token
        if (file_exists($file)) { // 判断文件是否存在
            $content = file_get_contents($file);
            // 获取文件内容
            $content = json_decode($content);
            // json解码
            if (time() - filemtime($file) < $content->expires_in - 10) { // 判断文件是否过期
                
                return false; // return $content->access_token;
            }
        }
        if ($tpye == 2) {
            return true;
        }
        $randTime = 19 * 60;
        $content = '{"access_token":"' . $name . '","expires_in":' . $randTime . '}';
        // 获取access token的json对象
        file_put_contents($file, $content);
        // 保存json对象到指定文件
        $content = json_decode($content);
        // 进行json解码
        return true;
    }

    function getdzTime()
    {
        return 0; // 早上七点前
    }

    // 判断是否折的，，时间上对不对
    function setTaskDz($task_id)
    {
        if (date('H', time()) < $this->getdzTime()) { // date('H', time()) > 0 &&
            
            $where['task_id'] = $task_id;
            M('fdtask')->where($where)->setField('dlsk', 1);
        }
    }

    function isTaskDz($task_id)
    {
        $where['task_id'] = $task_id;
        $taskData = M('fdtask')->where($where)->find();
        if ($taskData['dlsk'] == 1) {
            if (date('H', time()) < $this->getdzTime()) { // date('H', time()) > 0 &&
                return true;
            } else {
                return false;
            }
        }
        return true;
    }

    // 扣金额
    function UserSunDc($id, $Sum, $str, $task_id)
    {
        $where['task_id'] = $task_id;
        $where['dlsk'] = 1;
        $taskData = M('fdtask')->where($where)->find();
        if ($taskData) {
            $str .= '—凌晨单子统一打八折';
            $Sum *= 0.8;
        }
        $userm = new UsersModel();
        $re = $userm->setsum(2, $id, $Sum);
        if (! $re) {
            $str .= '—扣费失败什么鬼';
        }
        // 加入明细表
        $event = new EventModel();
        $data = array(
            $id,
            2,
            $Sum,
            0,
            0,
            $str
        );
        $event->eventIo(2, $data);
    }

    // 限制访问
    private function _getxzTimeOut($msgType, $user_login, $tpye = 1)
    {
        $name = $user_login;
        $file = './data/wxauto/' . $msgType . $name;
        // 用于保存access token
        if (file_exists($file)) { // 判断文件是否存在
            $content = file_get_contents($file);
            // 获取文件内容
            $content = json_decode($content);
            // json解码
            if (time() - filemtime($file) < $content->expires_in - 10) { // 判断文件是否过期
                
                return false; // return $content->access_token;
            }
        }
        // 超过20分钟以上才可以进行
        if ($tpye == 2) {
            return true;
        }
        // $randTime = 24 * 60 * 60;
        $randTime = 120 * 60; // 随机时长小时;
        $content = '{"access_token":"' . $name . '","expires_in":' . $randTime . '}';
        // 获取access token的json对象
        file_put_contents($file, $content);
        // 保存json对象到指定文件
        $content = json_decode($content);
        // 进行json解码
        return true;
    }

    // 保存微盟COOIKE
    private function _setwmData($user_login, $driTMp = 'wxdata_wmdata', $token = '')
    {
        $name = $user_login;
        $dir = './data/' . $driTMp;
        if (! file_exists($dir)) {
            mkdir($dir, 0777, true);
        }
        $file = './data/' . $driTMp . '/' . $name;
        // 用于保存access token
        if (file_exists($file)) { // 判断文件是否存在
            return false;
        }
        
        if (! empty($token)) {
            file_put_contents($file, $token);
        }
        
        return true;
    }

    // 一次性
    private function _getisyTimeOutEx($msgType, $user_login, $tpye = 1)
    {
        $name = $user_login;
        $file = './data/wxauto/' . $msgType . $name;
        // 用于保存access token
        if (file_exists($file)) { // 判断文件是否存在
            return false; // return $content->access_token;
        }
        // 超过20分钟以上才可以进行
        if ($tpye == 2) {
            return true;
        }
        
        $randTime = ((strtotime(date('Y-m-d', time())) + 86400 * 2) - time()) + rand(420, 1200) * 60; // 随机时长小时;
        $content = '{"access_token":"' . $name . '","expires_in":' . $randTime . '}';
        // 获取access token的json对象
        file_put_contents($file, $content);
        // 保存json对象到指定文件
        $content = json_decode($content);
        // 进行json解码
        return true;
    }

    // 养号时间
    private function _getisyTimeOut($msgType, $user_login, $tpye = 1)
    {
        $name = $user_login;
        $file = './data/wxauto/' . $msgType . $name;
        // 用于保存access token
        if (file_exists($file)) { // 判断文件是否存在
            $content = file_get_contents($file);
            // 获取文件内容
            $content = json_decode($content);
            // json解码
            if (time() - filemtime($file) < $content->expires_in - 10) { // 判断文件是否过期
                
                return false; // return $content->access_token;
            }
        }
        // 超过20分钟以上才可以进行
        if ($tpye == 2) {
            return true;
        }
        // $randTime = 24 * 60 * 60;
        $randTime = ((strtotime(date('Y-m-d', time())) + 86400 * 2) - time()) + rand(420, 1200) * 60; // 随机时长小时;
        $content = '{"access_token":"' . $name . '","expires_in":' . $randTime . '}';
        // 获取access token的json对象
        file_put_contents($file, $content);
        // 保存json对象到指定文件
        $content = json_decode($content);
        // 进行json解码
        return true;
    }

    // 养号时间
    private function _getYHTimeOut($datax, $tpye = 1)
    {
        $name = $datax['user_login'];
        $file = './data/wxauto/' . $name;
        // 用于保存access token
        if (file_exists($file)) { // 判断文件是否存在
            $content = file_get_contents($file);
            // 获取文件内容
            $content = json_decode($content);
            // json解码
            if (time() - filemtime($file) < $content->expires_in - 10) { // 判断文件是否过期
                
                return false; // return $content->access_token;
            }
        }
        // 超过20分钟以上才可以进行
        
        if ($tpye == 2) {
            return true;
        }
        $randTime = 1;
        if (date('H', time()) > 9 && date('H', time()) < 22) {
            $randTime = rand(120, 360) * 60; // 随机时长小时
        } else {
            $randTime = rand(240, 480) * 60; // 随机时长小时
        }
        $content = '{"access_token":"' . $name . '","expires_in":' . $randTime . '}';
        // 获取access token的json对象
        file_put_contents($file, $content);
        // 保存json对象到指定文件
        $content = json_decode($content);
        // 进行json解码
        return true;
    }

    public function sendautoadd($user_id, $dj)
    {
        $id = get_current_userid();
        if (isset($this->isautoOrdesEx[get_current_userid()])) {} else {
            $data['code'] = 0;
            $data['msg'] = '暂不开放';
            $this->ajaxReturn($data);
        }
        if ($user_id) {
            
            $takdRuleM = M('addtaskrule');
            $whereurl = $_POST['link'];
            
            if (strpos($whereurl, '__biz=') !== false) {
                
                $data['code'] = 0;
                $data['msg'] = '请在微信上转换成短链接再发布';
                $this->ajaxReturn($data);
                exit();
            }
            if (get_current_userid() != 318610) {
                $taskruledata = $takdRuleM->where(1)->select();
                
                $tmpdj = $this->getnumdj($taskruledata, $whereurl, 0);
                if ($tmpdj > $dj) {
                    $data['code'] = 0;
                    $data['msg'] = '此任务发布价格过低不允许,此选手或活动平台定价最低为:' . $tmpdj;
                    $this->ajaxReturn($data);
                    exit();
                }
            }
            // 如果不是短链接就。。
            // if (strpos($whereurl, '?') !== false) {
            // $data['code'] = 0;
            // $data['msg'] = '请使用短链接，在微信里打开复制链接出来';
            // $this->ajaxReturn($data);
            // exit();
            // }
            // 发布任务
            // 写入数据库先
            $mpdata = S($_POST['link']);
            if (! isset($mpdata['title'])) {
                $mpdata = tool::getmparr($_POST['link']);
            }
            if (! isset($mpdata['title'])) {
                $data['code'] = 0;
                $data['msg'] = '读取数据出错请重试';
                $this->ajaxReturn($data);
            }
            
            if ($mpdata['expire_time'] < time()) {
                $data['code'] = 0;
                $data['msg'] = '投票已过期';
                $this->ajaxReturn($data);
            }
            if ($_POST['max_count'] < 0) {
                $data['code'] = 0;
                $data['msg'] = '不能下零票';
                $this->ajaxReturn($data);
            }
            // 判断用户是否有足够的金额
            $userm = new UsersModel();
            $userSum = $userm->getsum();
            $Sum = $dj * $_POST['max_count'];
            if ($userSum < $Sum) {
                $data['code'] = 0;
                $data['msg'] = '您的金额不足';
                $this->ajaxReturn($data);
            }
            $taskm = new fdtaskModel();
            $taskData['id'] = $user_id;
            $taskData['name'] = $mpdata['title'];
            
            $strTmp = '';
            foreach ($_POST['arg'] as $k => $v) {
                if (is_array($_POST['arg'][$k])) {
                    foreach ($_POST['arg'][$k] as $kv) {
                        $strTmp = $strTmp . $mpdata['vote_subject'][$k]['options'][$kv]["name"] . "_票:" . $mpdata['vote_subject'][$k]['options'][$kv]["cnt"] . ', ';
                    }
                } else {
                    $strTmp = $strTmp . $mpdata['vote_subject'][$k]['options'][$v]["name"] . "_票:" . $mpdata['vote_subject'][$k]['options'][$v]["cnt"] . ', ';
                }
            }
            if (count($mpdata['vote_subject']) != count($_POST['arg'])) {
                $data['code'] = 0;
                $data['msg'] = '请填写完整';
                $this->ajaxReturn($data);
            }
            $taskData['zz_id'] = $mpdata['super_vote_id'];
            $taskData['xs_name'] = $strTmp;
            $taskData['tpurl'] = $_POST['link'];
            $taskData['task_sum'] = $Sum;
            $taskData['danjia'] = $dj;
            $taskData['display'] = 1;
            $taskData['task_buff'] = 1;
            $taskData['typeid'] = 2222;
            $taskData['fatime'] = date('Y-m-d H:i:s');
            $taskData['startime'] = date('Y-m-d H:i:s');
            $taskData['overtime'] = date('Y-m-d H:i:s', $mpdata['expire_time']);
            $taskData['num'] = $_POST['max_count'];
            $taskData['xzno'] = $_POST['xzno'];
            $taskData['imgfile'] = base64_encode(json_encode($_POST));
            $rs = $taskm->add($taskData);
            if ($rs) {
                // 写入脚本数据库MP的把选手参数写进去
                // $taskStrM = M('task_str');
                // $save['pid'] = $rs;
                // $save['task_str'] = base64_encode(json_encode($_POST));
                // $taskStrM->add($save);
                // 发布成功。扣除金额
                $userm->setsum(2, get_current_userid(), $Sum);
                // 加入明细表
                $event = new EventModel();
                $data = array(
                    get_current_userid(),
                    2,
                    $Sum,
                    0,
                    0,
                    '发布新任务ID:' . $rs . '活动名:' . $taskData['name']
                );
                $event->eventIo(2, $data);
                $mapt['task_id'] = $rs;
                $mapt['id'] = get_current_userid();
                $taskm = new fdtaskModel();
                $tdata = $taskm->where($mapt)->find();
                // 写入统计日记
                $taskData = $tdata;
                $taskData['tid'] = $taskData['task_id'];
                unset($taskData['task_id']);
                $rx = M('fdtask_log')->add($taskData);
                if (! $rx) {
                    tool::taskErrAddstr('错误：ID:' . $taskData['tid'] . '写入统计日记失败');
                }
                $data = array();
                $data['code'] = 1;
                $data['msg'] = '发布成功';
                $this->ajaxReturn($data);
            }
        }
        $data['msg'] = '操作失败请重试';
        $data['code'] = 0;
        $this->ajaxReturn($data);
    }

    // 以字段做为参数统计收支出
    function countOutStrSum($strcount, $danjia)
    {
        $where['day'] = date('Y-m-d', time());
        $data = M('wxaucount_data')->cache('$strcount' . $where['day'], 24 * 60)
            ->where($where)
            ->find();
        if ($data) {
            
            M('wxaucount_data')->where($where)->setInc($strcount, $danjia);
        } else {
            $where['online'] = 0;
            M('wxaucount_data')->add($where);
        }
    }

    // 统计收支出
    function countOutSum($Sum, $danjia)
    {
        $where['day'] = date('Y-m-d', time());
        $data = M('wxaucount_data')->cache('wx_coutnDay' . $where['day'], 24 * 60)
            ->where($where)
            ->find();
        if ($data) {
            $addData['wx_out_sum'] = $Sum;
            $addData['wx_in_sum'] = $danjia;
            $addData['wx_ordes_num'] = 1;
            $step = $this->lazyWriteEx($where['day'] . 'wx_coutnDay_add', $addData, 20);
            if (! empty($step)) {
                $wx_out_sum = $step['wx_out_sum'];
                $wx_in_sum = $step['wx_in_sum'];
                $wx_ordes_num = $step['wx_ordes_num'];
                $sql = 'UPDATE `cmf_wxaucount_data` SET `wx_out_sum`=`wx_out_sum`+' . $wx_out_sum . ',`wx_in_sum`=`wx_in_sum`+' . $wx_in_sum . ',`wx_ordes_num`=`wx_ordes_num`+' . $wx_ordes_num . ' WHERE `id`=' . $data['id'];
                M()->execute($sql);
            }
        } else {
            $where['online'] = 0;
            M('wxaucount_data')->add($where);
        }
    }

    // 统计登记
    function countInAc()
    {
        $where['day'] = date('Y-m-d', time());
        $data = M('wxaucount_data')->cache('wx_coutnDay' . $where['day'], 24 * 60)
            ->where($where)
            ->find();
        if ($data) {
            M('wxaucount_data')->where('id=' . $data['id'])->setInc('online', 1);
        } else {
            $where['online'] = 1;
            M('wxaucount_data')->add($where);
        }
    }

    public function getWxordesSqlStr($strWhere, $all = '*')
    {
        $i = 0;
        while ($i <= 99) {
            if ($i == 99) {
                $table = $table . 'SELECT ' . $all . ' FROM `cmf_wxorders_' . $i . '` where ' . $strWhere;
            } else {
                $table = $table . 'SELECT ' . $all . ' FROM `cmf_wxorders_' . $i . '`where ' . $strWhere . ' UNION all ';
            }
            $i ++;
        }
        return $table;
    }

    // 阅读判断每小时只能阅读的上限
    function islookMax($userId, $n_max, $all_max)
    {
        if ($all_max > 14) {
            return false;
        }
        $ismax = S($userId . 'lookisMax');
        if ($ismax != 'lookisMax') {
            if ($n_max > $this->lookisMax) {
                $where = array();
                $where['id'] = $userId;
                $where['user_look'] = array(
                    'neq',
                    0
                );
                M('wxauto')->where($where)->setField('user_look', 0);
                S($userId . 'lookisMax', 'lookisMax', 60 * 60);
                // tool::debugSend($userId.'进入限读');
                return false;
            }
            return true;
        }
        return false;
    }

    // 统计登记
    function countMyInAc()
    {
        $where['day'] = date('Y-m-d', time());
        $data = M('wxaucount_data')->cache('wx_coutnDay' . $where['day'], 24 * 60)
            ->where($where)
            ->find();
        if ($data) {
            M('wxaucount_data')->where('id=' . $data['id'])->setInc('my_online', 1);
        } else {
            $where['my_online'] = 1;
            M('wxaucount_data')->add($where);
        }
    }

    public function getNumTaskId($task_id)
    {
        
        // 多少号
        $wxautoM = M('wxauto');
        $where['buff'] = array(
            array(
                'eq',
                1
            ),
            array(
                'eq',
                2
            ),
            'or'
        );
        $tmp = $wxautoM->cache(true, 60)
            ->where($where)
            ->count();
        $strWhere = $this->getWxordesSqlStr("`task_id` = $task_id", 'count(*) as tmp');
        $allNum = M()->query('SELECT sum(tmp) as tmp FROM (' . $strWhere . ') as allTmp');
        
        $int = abs($tmp - $allNum[0]['tmp']);
        // tool::debugSend($tmp.':'.$allNum[0]['tmp'].":".$task_id);
        if ($int < 100) { // 相差不多一百时。。就表示没多少号可以做了切到别的平台
            return true;
        }
        return false;
    }

    public function getkeysName($task_id)
    {
        $redis = redisx::getRedis();
        $it = NULL;
        $nel = 0;
        while (true) {
            $keys = $redis->scan($it, 'task_run_' . $task_id . '*', 60000);
            if ($keys === false) { // 迭代结束，未找到匹配pattern的key
                break;
            }
            $nel += count($keys);
        }
        return $nel;
    }

    public function getkeysNameEx($task_id)
    {
        $redes = redis::getRedis();
        $arrData = $redes->getKeys('task_run_' . $task_id . '*');
        if (is_array($arrData)) {
            $allData = count($arrData);
        } else {
            $allData = 0;
        }
        return $allData;
    }

    public function cleOverTask($task_id, $sxno = 1)
    {
        $taskM = new fdtaskModel();
        
        $allData = false;
        if (S($task_id . '_onum') != 'true_is') {
            if (SLock('wxTaskisCle' . $task_id, 0, $sxno, 200)) { // 标识 ,超时,锁时,读时(毫秒)
                S($task_id . '_onum', 'true_is', $sxno);
                $allData = $this->getkeysNameEx($task_id);
                $allInt = $this->getkeyInc($task_id, false);
                $mapnew['task_id'] = $task_id;
                // $mapnew['o_num'] = array(
                // 'neq',
                // $allData
                // );
                $saveData['o_num'] = $allData;
                $saveData['no_num'] = $allInt;
                if (APP_DEBUG == TRUE) {
                    M('fdtask')->where($mapnew)->setField($saveData);
                } else {
                    M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                        ->table('cmf_fdtask')
                        ->where($mapnew)
                        ->setField($saveData);
                }
                return $allData;
            }
        }
        return $allData;
    }

    // 自动提现
    public function autoTx()
    {
        if ($this->is_autoTx) {
            $users_model = M("cash");
            $Ntime = date('Y-m-d H:i:s', strtotime("-1 minute"));
            $AutoTxData = $users_model->where("buff=1 and '$Ntime'>add_time and bred=0 and from_sum<1000")
                ->order("add_time")
                ->find();
            if ($AutoTxData) {
                $cushM = new cashModel();
                $cushM->payoutTx($AutoTxData, 2);
            }
        }
    }

    function getTaskData($serverIp, $ip, $buff = 6)
    {
        $lists = array();
        $sql = 'SELECT COUNT(*) AS tp_count FROM `cmf_fdtask` WHERE ( task_buff=' . $buff . ' and typeid>2222 ) LIMIT 1';
        $count = M()->db($serverIp, "mysql://baiiqwxf:@Aa223514@" . $ip . ":3306/fskj_db")->query($sql)[0]['tp_count'];
        
        $sql = 'SELECT *,cmf_fdtask.id as idx FROM `cmf_fdtask` LEFT JOIN cmf_users ON cmf_users.id = cmf_fdtask.iswho WHERE ( task_buff=' . $buff . ' and typeid>2222 ) ORDER BY fatime DESC ';
        $lists = M()->db($serverIp)->query($sql);
        
        foreach ($lists as $k => $v) {
            $nameArr = S('task_name' . $v['task_id']);
            if (isset($nameArr['name'])) {
                unset($lists[$k]);
            }
        }
        
        // 这里进行清除操作。。刚开始数据比较多。可能卡掉//晚上才工作
        if (date('H', time()) < 8 && date('H', time()) > 1) {
            $deltime = date("Y-m-d", strtotime("-6 month"));
            for ($i = 0; $i < 100; $i ++) {
                $sql = "DELETE FROM `cmf_wxorders_$i` WHERE `add_time` < '$deltime' LIMIT 1000";
                M()->db($serverIp)->query($sql);
            }
        }
        return $lists;
    }

    public function sentaskmsg()
    {
        $msg1 = '';
        $msg2 = '';
        // 查找审1单子
        
        $serverIp1 = array(
            1 => '10.29.59.131',
            2 => '10.66.95.114',
            3 => '10.81.125.166'
        );
        foreach ($serverIp1 as $k => $v) {
            $lists = $this->getTaskData($k, $v);
            if (! empty($lists)) {
                $msg1 = '审1-4有单:';
            }
            foreach ($lists as $vx) {
                $msg1 .= '活动名：' . $vx['name'] . '---';
            }
        }
        // 查找审2单子
        $serverIp2 = array(
            5 => '116.62.137.56',
            6 => '10.30.223.228'
        );
        foreach ($serverIp2 as $k => $v) {
            $lists = $this->getTaskData($k, $v);
            if (! empty($lists)) {
                $msg2 = '审2-3有单:';
            }
            foreach ($lists as $vx) {
                $msg2 .= '活动名：' . $vx['name'] . '---';
            }
        }
        $where['role_id'] = 12;
        $sendData = M('role_user')->where($where)->select();
        $imM = new ImModel();
        foreach ($sendData as $k => $v) {
            $sid = $v['user_id'];
            if ($imM->isonline($sid)) {
                $where['id'] = $sid;
                $dataUser = M('users')->where($where)->find();
                if (strpos($dataUser['user_nicename'], '1队') !== false) {
                    $imM->sendEx($sid, $msg1);
                } else {
                    $imM->sendEx($sid, $msg2);
                }
            }
        }
    }

    // 移动号到55平台
    function codeYDwxid_run()
    {
        return 0;
        $ip = '120.79.117.146';
        // 如果不是最新平台
        if ($this->webNum != 6) {
            return 0;
        }
//         $wherex=array();
//         $wherex['buff']
//           $wxautoNum=  M()->db(8, "mysql://baiiqwxf:@Aa223514@" . $ip . ":3306/fskj_db")
//             ->table('cmf_wxauto')->where($where)->select();
        
        // 查找超过四天的号带上用户名
        $timeEnd = date('Y-m-d H:i:s', strtotime("-4 day"));
        
        $userArr = M('wxauto')->field('cmf_wxauto.*,cmf_users.user_login as user_loginx')
            ->where("cmf_wxauto.`create_time`<'$timeEnd' AND cmf_wxauto.`buff` < 3")
            ->join('LEFT JOIN cmf_users ON cmf_users.id = cmf_wxauto.user_sx')
            ->limit(100)
            ->select();
        
        // 用户名带上bb_用户名查找55存不存在这个号。如果存在直接移号。当前号buff=5,如果不存用户数据里帐号加bb_ 金额清空。再操作 前面的过程
        if ($userArr) {
            foreach ($userArr as $v) {
                $user_login = $v['user_loginx'];
                if (empty($v['user_login'])){
                    continue;
                }
                // 查找bb_帐号id
                $mapnew['user_login'] = 'bb_' . $user_login;
                $tmpuser = M()->db(8, "mysql://baiiqwxf:@Aa223514@" . $ip . ":3306/fskj_db")
                    ->table('cmf_users')
                    ->where($mapnew)
                    ->find();
                // 判断存不存在
                    $addid=0;
                if (! $tmpuser) {
                    // 查找当前些用户数据进行复制
                    $where = array();
                    $where['user_login'] = $user_login;
                    $userData = M()->db(0)
                        ->table('cmf_users')
                        ->where($where)
                        ->find();
                    if ($userData) {
                        $userData['user_login'] = 'bb_' . $user_login;
                        unset($userData['id']);
                        unset($userData['au_coin']);
                        unset($userData['user_tj']);
                       $addid= M()->db(8, "mysql://baiiqwxf:@Aa223514@" . $ip . ":3306/fskj_db")
                            ->table('cmf_users')
                            ->add($userData);
                    }
                }else {
                    $addid=$tmpuser['id'];
                }
                //迁移微信号
                if ($addid){
                    tool::debugSend($addid);
                    unset($v['user_loginx']);
                    unset($v['id']);
                    $v['user_sx']=$addid;
                    //保证移成功。。先试删除可能存在一样的
                    $where=array();
                    $where['user_login']=$v['user_login'];
                    M()->db(8, "mysql://baiiqwxf:@Aa223514@" . $ip . ":3306/fskj_db")
                    ->table('cmf_wxauto')
                    ->where($where)->delete();
                    $re= M()->db(8, "mysql://baiiqwxf:@Aa223514@" . $ip . ":3306/fskj_db")
                    ->table('cmf_wxauto')
                    ->add($v);
                    if ($re){
                        //成功把原有的置为删除
                        M()->db(0)
                        ->table('cmf_wxauto')
                        ->where($where)->setField('buff',66);
                    }
                }
            }
        }
        // 每次移一百个
    }

    // 平台任务调度
    public function diaodu()
    {
        if ($this->webNum == 0) {
            $this->sentaskmsg();
        }
        $fdtaskM = new fdtaskModel();
        // 自动清算结束或停止的任务
        $fdtaskM->EndOutTask();
        
        $this->autoTx();
        // 自动转移号到55平台
        $this->codeYDwxid_run();
        // 自动处理隐藏数,不处理老张那边的
        $where = array();
        $where['task_buff'] = 1;
        $where['typeid'] = array(
            'neq',
            1256
        );
        $dataArrTask = $fdtaskM->where($where)->select();
        if ($dataArrTask) {
            foreach ($dataArrTask as $vT) {
                if ($vT['o_num'] < 1) {
                    continue;
                }
                // 判断超过一定时间没有提交一票。。。需要重新计算
                if (S('taskapis_' . $vT['task_id']) != 'is_true') {
                    $this->cleOverTask($vT['task_id'], 3);
                }
            }
        }
        
        // 查找这个用户有没有冲值中的记录
        $where['buff'] = 1;
        $where['delta_title'] = array(
            'neq',
            ''
        );
        $timeEnd = date('Y-m-d H:i:s', time() - $this->wxrunTime * 60);
        $where['add_time'] = array(
            'gt',
            $timeEnd
        );
        $delmxM = M('deltapaytmp');
        $delmxData = $delmxM->where($where)->select();
        foreach ($delmxData as $v) {
            if ($v['delta_title'] != '收款' && $v['delta_title'] != '转账') {
                $this->payczCode($v['delta_num']);
            }
        }
        
        return 0;
        
        $where['buff'] = array(
            array(
                'eq',
                1
            ),
            array(
                'eq',
                2
            ),
            'or'
        );
        $where['is_yao'] = 2;
        $dataArr = M('wxauto')->where($where)
            ->limit(50)
            ->select();
        
        $webcofM = new webcofModel();
        foreach ($dataArr as $k => $v) {
            $where = array();
            $where['id'] = $v['id'];
            M('wxauto')->where($where)->setField('is_yao', 0);
            $webcofM->codewxidisolen($v['user_login']);
        }
        tool::debugSend('数:' . count($dataArr));
        return 0;
        $web = new webcofModel();
        $wxautoM = M('wxauto');
        // 阅读平台对接
        if ($this->lookOn) {
            $str = S('look_run');
            if ($str != 'look_run') {
                S('look_run', 'look_run', 15);
                
                $this->lookRun();
            }
        }
        
        if (! $this->api_On) {
            return false;
        }
        $where = array();
        $where['task_buff'] = 1;
        $where['other_buff'] = array(
            array(
                'eq',
                0
            ),
            array(
                'eq',
                2
            ),
            'or'
        );
        $where['fatime'] = array(
            'lt',
            date('Y-m-d H:i:s', time() - 10)
        );
        // $where['id'] = 2;
        $dataArr = $fdtaskM->where($where)
            ->limit(10)
            ->select();
        // 任务还地进行中——调度器用
        
        foreach ($dataArr as $v) {
            $task_id = $v['task_id'];
            if (S('taskapis_' . $task_id) != 'is_true') {
                // 如果隐藏数超过2就跳过
                if ($v['o_num'] > 5) {
                    continue;
                }
                // 判断做了多少
                if (! $this->getNumTaskId($task_id)) {
                    continue;
                }
                
                if (SLock('task_so_' . $task_id, 8, 25, 100)) { // 标识 ,超时,锁时,读时(毫秒)
                                                                // 暂停本平台接任务并发订单到另平台
                    $where = array();
                    $where['task_id'] = $task_id;
                    $where['task_buff'] = 1;
                    $where['other_buff'] = array(
                        array(
                            'eq',
                            0
                        ),
                        array(
                            'eq',
                            2
                        ),
                        'or'
                    );
                    
                    // $setData['no_num']=$v['n_num'];
                    $setData['other_buff'] = 1;
                    // $setData['endtime']=$this->mGetDate();
                    $rs = $fdtaskM->where($where)->setField($setData);
                    if (! $rs) {
                        tool::debugSend('调度发生错误，停单:' . $task_id);
                        SUnlock('task_so_' . $task_id);
                        continue;
                    }
                    
                    $this->codeDaodu($v, $fdtaskM, $web);
                    SUnlock('task_so_' . $task_id);
                }
            }
        }
        
        // 同步数据
        $where = array();
        $where['task_buff'] = 1;
        $where['other_buff'] = 1;
        
        $dataArr = $fdtaskM->where($where)
            ->limit(10)
            ->select();
        
        if (empty($dataArr)) {
            exit();
        }
        $arr = array();
        foreach ($dataArr as $v) {
            $arr[] = $v['task_id'];
        }
        
        $arr_string = join(',', $arr);
        
        $data = array();
        $data['type'] = 2;
        $data[sql] = "task_zzid IN ($arr_string)";
        $reData = $web->postData($this->apiUrl, $data);
        // tool::debugSend($reData['data']);
        if ($reData['code'] == 1) {
            
            foreach ($reData['data'] as $v) {
                
                $map['task_id'] = $v['task_zzid'];
                $taskDataTmp = $fdtaskM->where($map)->find();
                if ($taskDataTmp) {
                    if ($taskDataTmp['task_buff'] == 1 && $taskDataTmp['other_buff'] == 1) {
                        $map['task_buff'] = 1;
                        $setData = array();
                        $setData['n_num'] = $v['n_num'] + $taskDataTmp['no_num'];
                        // 任务结束或中止
                        if ($v['task_buff'] == 4 || $v['task_buff'] == 5) {
                            if ($setData['n_num'] >= $taskDataTmp['num']) {
                                $setData['task_buff'] = 4;
                            } else {
                                $setData['task_buff'] = 2;
                            }
                            $setData['other_buff'] = 2;
                            $setData['endtime'] = date('Y-m-d H:i:s', time() - 10 * 60);
                        } else {
                            if ($taskDataTmp['n_num'] == $setData['n_num']) {
                                continue;
                            }
                        }
                        
                        $rs = $fdtaskM->where($map)->setField($setData);
                        if (! $rs) {
                            tool::debugSend($setData);
                            tool::debugSend('调度发生错误，同步数据:' . $v['task_id']);
                            continue;
                        }
                    }
                }
            }
        }
    }

    public function codeDaodu($v, $fdtaskM, $web)
    {
        $taskStrM = M('task_str');
        $where = array();
        $where['pid'] = $v['task_id'];
        $strData = $taskStrM->where($where)->find();
        if (! $strData) {
            tool::debugSend('脚本不存在什么鬼' . $v['task_id']);
            return 0;
        }
        $data['type'] = 1;
        $data['task_str'] = $strData['task_str'];
        $data['data'] = json_encode($v);
        
        $reData = $web->postData($this->apiUrl, $data);
        if (! isset($reData['code'])) {
            // 出错停止
            $where = array();
            $where['task_id'] = $v['task_id'];
            $where['task_buff'] = 1;
            $setData['task_buff'] = 2;
            $setData['other_buff'] = 0;
            // $setData['endtime']=$this->mGetDate();
            $rs = $fdtaskM->where($where)->setField($setData);
            
            // 对方平台也停止
            $dataTmp = $this->stopSend($v['task_id']);
            if ($dataTmp['code'] != 1) {
                tool::debugSend('调度发生错误，停单也错了:' . $v['task_id']);
            }
            exit();
        }
        // tool::debugSend('下单或加票返回');
        // tool::debugSend($reData);
        if ($reData['code'] == 1) {
            $where = array();
            $where['task_id'] = $v['task_id'];
            
            $dataSer['other_buff'] = 1;
            $dataSer['task_zzid'] = $reData['task_id'];
            $rs = $fdtaskM->where($where)->setField($dataSer);
            if (! $rs) {
                tool::debugSend('调度发生错误，下单:' . $v['task_id']);
                
                return 0;
            }
        } else {
            tool::debugSend('下单失败重置:' . $v['task_id']);
            // 重置让下次再调度
            $where = array();
            $where['task_id'] = $v['task_id'];
            $where['task_buff'] = 1;
            $where['other_buff'] = 1;
            
            $setData['other_buff'] = 0;
            // $setData['endtime']=$this->mGetDate();
            $rs = $fdtaskM->where($where)->setField($setData);
        }
    }

    // API调用
    public function apicode()
    {
        switch ($_POST['type']) {
            case 1:
                $this->OtherOrdes();
                break;
            case 2:
                $this->getOtherTask();
                break;
            case 3:
                $this->stopOther();
                break;
            case 4:
                $this->addExtask();
                break;
            case 5:
                $this->saveOtherSx();
                break;
            case 6: // 别的服务器传过来缓存TASKID
                $task_id = $_POST['task_id'];
                $nameArr['name'] = '管理员';
                S('task_name' . $task_id, $nameArr, 20 * 60);
                break;
            case 7:
                $str_run = $_POST['str_run'];
                if (! empty($str_run)) {
                    $this->getReCodeTask($str_run);
                }
                break;
            default:
                ;
                break;
        }
    }

    // 查任务
    public function getOtherTask()
    {
        // tool::debugSend($_POST['sql']);
        $where['other_buff'] = 5;
        $where['_string'] = $_POST['sql'];
        if (empty($where['_string'])) {
            $data[code] = 0;
            $this->base64send($data);
        }
        $fdtaskM = new fdtaskModel();
        $datax = $fdtaskM->field('`task_id`,`task_zzid`,`num`,`o_num`,`n_num`,`no_num`,`task_buff`,`other_buff`')
            ->where($where)
            ->select();
        if ($datax) {
            $data['code'] = 1;
            $data['data'] = $datax;
            $this->base64send($data);
        }
    }

    function base64send($data)
    {
        echo base64_encode(json_encode($data));
        exit();
    }

    // 下单
    public function OtherOrdes()
    {
        $taskData = json_decode($_POST['data'], true);
        if (empty($_POST['task_str'])) {
            $data[code] = 0;
            $this->base64send($data);
        }
        $taskDatax['task_zzid'] = $taskData['task_id'];
        
        // 如果存在这个单子。。加票
        $fdtaskM = new fdtaskModel();
        $txdata = $fdtaskM->where($taskDatax)->find();
        if ($txdata) {
            tool::debugSend($taskData['task_id'] . '加票' . $txdata['task_id']);
            $this->addExtask($txdata, $taskData);
            exit();
        }
        $taskData['task_zzid'] = $taskData['task_id'];
        
        unset($taskData['task_id']);
        $takdRuleM = M('addtaskrule');
        $whereurl = $taskData['tpurl'];
        $taskruledata = $takdRuleM->where(1)->select();
        
        // 如果是MP重新读取单价
        if ($taskData['typeid'] == 2222) {
            $taskData['danjia'] = $this->get_mpdj();
        }
        
        $tmpdj = $this->getnumdj($taskruledata, $whereurl, 0);
        if ($tmpdj > $taskData['danjia']) {
            $data['code'] = 0;
            $data['msg'] = '此任务发布价格过低不允许,此选手或活动平台定价最低为:' . $tmpdj;
            $this->base64send($data);
            exit();
        }
        
        $this->xdOrdes($fdtaskM, $taskData);
    }

    public function xdOrdes($fdtaskM, $taskData)
    {
        $taskData['id'] = $this->acid;
        $taskData['num'] = $taskData['num'] - $taskData['n_num'];
        $taskData['n_num'] = 0;
        $taskData['no_num'] = 0;
        $taskData['task_sum'] = $taskData['danjia'] * $taskData['num'];
        $taskData['fatime'] = $this->mGetDate();
        $taskData['startime'] = $this->mGetDate();
        $taskData['endtime'] = 0;
        $taskData['task_buff'] = 1;
        $taskData['other_buff'] = 5;
        if (empty($taskData['task_zzid'])) {
            tool::debugSend('下单时对方平台ID为空什么鬼:' . $taskData['task_zzid']);
            $data['code'] = 0;
            $this->base64send($data);
            exit();
        }
        $retaskid = $fdtaskM->add($taskData);
        if (! $retaskid) {
            tool::debugSend('另平台加订单失败:' . $taskData['task_id']);
            $data['code'] = 0;
            $this->base64send($data);
            exit();
        }
        // 扣钱
        $userm = new UsersModel();
        $where = array();
        $where['id'] = $this->acid;
        $re = $userm->where($where)->setDec('coin', $taskData['task_sum']);
        if (! $re) {
            tool::debugSend('下单成功但扣钱失败:' . $taskData['task_id']);
            $data['code'] = 0;
            $this->base64send($data);
            exit();
        }
        $t_model = M("task_str");
        $add['pid'] = $retaskid;
        $add['task_str'] = $_POST['task_str'];
        $rex = $t_model->add($add);
        if (! $rex) {
            tool::debugSend('脚本保存错误' . $taskData['task_id']);
            $data['code'] = 0;
            $this->base64send($data);
            exit();
        }
        $this->addmxlog($fdtaskM, $taskData['task_sum'], $retaskid);
    }

    public function addmxlog($fdtaskM, $taskDatasum, $retaskid, $strTmp = '平台对接任务ID:')
    {
        // tool::debugSend('到明细:'.$retaskid);
        // 加入明细表
        $event = new EventModel();
        $data = array(
            $this->acid,
            2,
            $taskDatasum,
            0,
            0,
            $strTmp . $retaskid
        );
        $event->eventIo(2, $data);
        $mapt['task_id'] = $retaskid;
        $mapt['id'] = $this->acid;
        
        $tdata = $fdtaskM->where($mapt)->find();
        // 写入统计日记
        $taskData = $tdata;
        $taskData['tid'] = $taskData['task_id'];
        unset($taskData['task_id']);
        
        $rx = M('fdtask_log')->add($taskData);
        if (! $rx) {
            tool::taskErrAddstr('错误：ID:' . $taskData['tid'] . '写入统计日记失败');
        }
        // tool::debugSend('到明细结束:'.$retaskid);
        $data = array();
        $data['code'] = 1;
        $data['task_id'] = $taskData['tid'];
        $this->base64send($data);
        exit();
    }

    // 停止
    public function stopOther()
    {
        $fdtaskM = new fdtaskModel();
        $taskdata['endtime'] = date('Y-m-d H:i:s', time() - 8 * 60);
        ;
        $taskdata['task_buff'] = 2;
        
        $map['task_zzid'] = $_POST['task_id'];
        $map['task_buff'] = 1;
        $rs = $fdtaskM->where($map)->save($taskdata);
        if (! $rs) {
            tool::debugSend('停止失败');
            tool::debugSend($map);
            $data['code'] = 0;
            $data['msg'] = '停止失败';
            $this->base64send($data);
            exit();
        }
        $data['code'] = 1;
        $this->base64send($data);
    }

    // 对方限速
    public function saveOtherSx()
    {
        // tool::debugSend($_POST);
        $fdtaskM = new fdtaskModel();
        $taskdata['startime'] = date('Y-m-d H:i:s');
        $taskdata['xzno'] = $_POST['xzno'];
        $taskdata['xznum'] = 0;
        $taskdata['zztask_buff'] = 0;
        $map['task_zzid'] = $_POST['task_id'];
        if (! empty($_POST['num'])) {
            $map['task_buff'] = 1;
            $taskdata['num'] = $_POST['num'];
            $taskDataEx = $fdtaskM->where($map)->find();
            if (! $taskDataEx) {
                tool::debugSend('有任务不存在什么鬼:' . $taskDataEx['task_id']);
                $data['code'] = 1;
                $this->base64send($data);
                exit();
            }
            $isSum = ($_POST['num'] - $taskDataEx['num']) * $taskDataEx['danjia'];
            // 扣钱
            $userm = new UsersModel();
            $where = array();
            $where['id'] = $this->acid;
            $re = $userm->where($where)->setDec('coin', $isSum);
            if (! $re) {
                tool::debugSend('加票成功但扣钱失败:' . $taskDataEx['task_id']);
                $data['code'] = 1;
                $this->base64send($data);
                exit();
            }
            $rs = $fdtaskM->where($map)->save($taskdata);
            if (! $rs) {
                
                $data['code'] = 0;
                $data['msg'] = '修改失败';
                $this->base64send($data);
                exit();
            }
            $this->addmxlog($fdtaskM, $isSum, $taskDataEx['task_id'], '对接平台加票:');
        } else {
            $rs = $fdtaskM->where($map)->save($taskdata);
            if (! $rs) {
                
                $data['code'] = 0;
                $data['msg'] = '修改失败';
                $this->base64send($data);
                exit();
            }
            $data['code'] = 1;
            $this->base64send($data);
        }
    }

    // 发停止
    public function stopSend($task_id)
    {
        $web = new webcofModel();
        $data = array();
        $data['type'] = 3;
        $data['task_id'] = $task_id;
        
        return $web->postData($this->apiUrl, $data);
    }

    // 我方限速或修改
    public function saveXs($task_id, $xsNum, $num = 0)
    {
        $web = new webcofModel();
        $data = array();
        $data['type'] = 5;
        $data['task_id'] = $task_id;
        $data['xzno'] = $xsNum;
        if (! empty($num)) {
            $data['num'] = $num;
        }
        return $web->postData($this->apiUrl, $data);
    }

    // 追加票数
    public function addExtask($txdata = array(), $taskData = array())
    {
        $fdtaskM = new fdtaskModel();
        if (empty($taskData)) {
            $taskData = json_decode($_POST['data'], true);
        }
        if (empty($txdata)) {
            $taskData['task_zzid'] = $taskData['task_id'];
            
            $txdata = $fdtaskM->where($taskData)->find();
        }
        if (empty($txdata) || empty($taskData)) {
            tool::debugSend('加票时有数据为空' . $taskData['task_id']);
            $data['code'] = 0;
            $this->base64send($data);
            exit();
        }
        $takdRuleM = M('addtaskrule');
        $whereurl = $taskData['tpurl'];
        $taskruledata = $takdRuleM->where(1)->select();
        // 如果是MP重新读取单价
        if ($taskData['typeid'] == 2222) {
            $taskData['danjia'] = $this->get_mpdj();
        }
        $tmpdj = $this->getnumdj($taskruledata, $whereurl, 0);
        if ($tmpdj > $taskData['danjia']) {
            $data['code'] = 0;
            $data['msg'] = '此任务发布价格过低不允许,此选手或活动平台定价最低为:' . $tmpdj;
            $this->base64send($data);
            exit();
        }
        
        // 处理加票如果订单在停止处理中。不能加票
        if ($txdata['task_buff'] == 2 || $txdata['other_buff'] != 5) {
            $data['code'] = 0;
            $data['msg'] = '任务处理中。暂时不可加票';
            $this->base64send($data);
            exit();
        }
        
        if ($txdata['task_buff'] == 1) {
            $this->addExcodeTask($fdtaskM, $txdata, $taskData);
        } else {
            $this->addExcodeTask($fdtaskM, $txdata, $taskData, 2);
        }
    }

    public function addExcodeTask($fdtaskM, $txdata, $taskData, $type = 1)
    {
        $isgetNum = $taskData['num'] - $taskData['n_num'];
        $isSum = $taskData['danjia'] * $isgetNum;
        unset($taskData['task_id']);
        unset($taskData['id']);
        unset($taskData['other_buff']);
        unset($taskData['n_num']);
        unset($taskData['task_zzid']);
        $taskDataEx = array_merge($txdata, $taskData);
        
        if ($type == 1) {
            $taskDataEx['num'] = $txdata['num'] + $isgetNum;
            $taskDataEx['task_sum'] = $txdata['task_sum'] + $isSum;
            $where['task_buff'] = 1;
        } else {
            $taskDataEx['num'] = $txdata['n_num'] + $isgetNum;
            $taskDataEx['task_sum'] = $taskData['danjia'] * $txdata['n_num'] + $isSum;
            $where['task_buff'] = array(
                array(
                    'eq',
                    4
                ),
                array(
                    'eq',
                    5
                ),
                'or'
            );
        }
        
        $taskDataEx['o_num'] = 0;
        
        if (empty($txdata['task_id'])) {
            tool::debugSend('加票失败定单为空:' . $txdata['task_id']);
            $data['code'] = 0;
            $this->base64send($data);
            exit();
        }
        
        $where['other_buff'] = 5;
        $where['task_id'] = $txdata['task_id'];
        $retaskid = $fdtaskM->where($where)->save($taskDataEx);
        if (! $retaskid) {
            tool::debugSend('加票失败:' . $txdata['task_id']);
            $data['code'] = 0;
            $this->base64send($data);
            exit();
        }
        // 扣钱
        $userm = new UsersModel();
        $where = array();
        $where['id'] = $this->acid;
        $re = $userm->where($where)->setDec('coin', $isSum);
        if (! $re) {
            tool::debugSend('加票成功但扣钱失败:' . $taskData['task_id']);
            $data['code'] = 1;
            $this->base64send($data);
            exit();
        }
        $t_model = M("task_str");
        $add['pid'] = $txdata['task_id'];
        $add['task_str'] = $_POST['task_str'];
        $rex = $t_model->add($add);
        if (! $rex) {
            tool::debugSend('脚本保存错误' . $taskData['task_id']);
            $data['code'] = 1;
            $this->base64send($data);
            exit();
        }
        $this->addmxlog($fdtaskM, $isSum, $txdata['task_id'], '对接平台加票:');
    }

    public function add8890($dataEx)
    {
        $userID = 22;
        $taskM = new fdtaskModel();
        $userm = new UsersModel();
        $taskData['xs_name'] = $dataEx['initialReading'] . '_' . $dataEx['orderTime'] . '_起始x:' . $dataEx['initialReading'];
        $taskData['tpurl'] = $dataEx['weixinLink'];
        $taskData['name'] = $dataEx['orderId'];
        $taskData['display'] = 1;
        $taskData['typeid'] = 8890;
        $taskData['fatime'] = date('Y-m-d H:i:s');
        $taskData['startime'] = date('Y-m-d H:i:s');
        $taskData['id'] = $userID;
        $Sum = $this->getlookdj() * $dataEx['orderNumber'];
        $taskData['task_sum'] = $Sum;
        $taskData['task_buff'] = 1;
        // $taskData['xzno']=$_POST['xzno'];
        $taskData['num'] = $dataEx['orderNumber'];
        $taskData['danjia'] = $this->getlookdj();
        $taskData['iswho'] = $dataEx['initialReading'];
        $rs = $taskM->add($taskData);
        if ($rs) {
            // 写入脚本数据库MP的把选手参数写进去
            $taskStrM = M('task_str');
            $save['pid'] = $rs;
            $save['task_str'] = $this->get_8890Scr();
            $taskStrM->add($save);
            // 发布成功。扣除金额
            $userm->setsum(2, $userID, $Sum);
            // 加入明细表
            $event = new EventModel();
            $data = array(
                get_current_userid(),
                2,
                $Sum,
                0,
                0,
                '发布新任务ID:' . $rs
            );
            $event->eventIo(2, $data);
            $mapt['task_id'] = $rs;
            $mapt['id'] = $userID;
            $taskm = new fdtaskModel();
            $tdata = $taskm->where($mapt)->find();
            // 写入统计日记
            $taskData = $tdata;
            $taskData['tid'] = $taskData['task_id'];
            unset($taskData['task_id']);
            $rx = M('fdtask_log')->add($taskData);
            if (! $rx) {
                tool::taskErrAddstr('错误：ID:' . $taskData['tid'] . '写入统计日记失败');
            }
            return true;
        }
        return false;
    }

    public function lookRun()
    {
        $userID = 22;
        libxml_use_internal_errors(true);
        $taskM = new fdtaskModel();
        // 进行中的任务多少来判断取多少条 总数。。本人阅读进行数
        $where = array();
        $where['task_buff'] = 1;
        $where['typeid'] = array(
            'gt',
            2000
        );
        $allInt = $taskM->where($where)->count();
        
        $where = array();
        $where['task_buff'] = 1;
        $where['id'] = $userID;
        $useInt = $taskM->where($where)->count();
        
        if ($allInt < 15) {
            if ($useInt < $this->maxLookI) {
                tool::debugSend('少于十任务');
                $url = 'http://27.255.65.11/Api/getUserTask?userKey=KhFfLgwMKC8JeDtYdkA=&orderNum=4';
                $html = file_get_html($url);
                $dataRe = json_decode($html, true);
                // tool::debugSend($dataRe);
                foreach ($dataRe['data'] as $v) {
                    if (! $this->add8890($v)) {
                        tool::debugSend('下单失败');
                        tool::debugSend($v);
                    }
                }
            }
        } else {
            if ($useInt < $this->minLookI) {
                $url = 'http://27.255.65.11/Api/getUserTask?userKey=KhFfLgwMKC8JeDtYdkA=&orderNum=2';
                $html = file_get_html($url);
                $dataRe = json_decode($html, true);
                // tool::debugSend($dataRe);
                foreach ($dataRe['data'] as $v) {
                    if (! $this->add8890($v)) {
                        tool::debugSend('下单失败');
                        tool::debugSend($v);
                    }
                }
            }
        }
        // 提交订单 查找所有完成定单task_buff=4。然后提交。判断返回成功置为5
        $where = array();
        $where['task_buff'] = 4;
        $where['id'] = $userID;
        $where['typeid'] = 8890;
        $taskData = $taskM->where($where)->find();
        // tool::debugSend($taskData);
        if ($taskData) {
            $url = 'http://27.255.65.11/Api/finishedUserTask?userKey=KhFfLgwMKC8JeDtYdkA=&orderId=' . $taskData['name'];
            $html = file_get_html($url);
            $dataRe = json_decode($html, true);
            if ($dataRe['state'] == 4 || $dataRe['state'] == 6) {
                $where = array();
                $where['task_id'] = $taskData['task_id'];
                $where['task_buff'] = 4;
                $where['id'] = $userID;
                $taskM->where($where)->setField('task_buff', 7);
            }
            if ($dataRe['state'] == 1 || $dataRe['state'] == 3) {
                $where = array();
                $where['task_id'] = $taskData['task_id'];
                $where['task_buff'] = 4;
                $where['id'] = $userID;
                $taskM->where($where)->setField('task_buff', 5);
            } else {
                tool::debugSend($dataRe);
                tool::debugSend($taskData['task_id']);
                $where = array();
                $where['task_id'] = $taskData['task_id'];
                $where['task_buff'] = 4;
                $where['id'] = $userID;
                $save['endtime'] = 0;
                $save['n_num'] = $dataRe['data']['lessNum'];
                $save['task_buff'] = 1;
                $taskM->where($where)->setField($save);
            }
        }
        // 取消订单
        $url = 'http://27.255.65.11/Api/cancelUserTask?userKey=KhFfLgwMKC8JeDtYdkA=';
        $html = file_get_html($url);
        $dataRe = json_decode($html, true);
        // tool::debugSend($dataRe);
        foreach ($dataRe['data'] as $v) {
            if (! $this->add8890($v)) {
                $where = array();
                $where['task_buff'] = 1;
                $where['id'] = $userID;
                $where['name'] = $v['orderId'];
                $taskM->where($where)->setField('task_buff', 2);
            }
        }
    }

    public function getUserId($name)
    {
        if (! empty($name)) {
            $userM = new UsersModel();
            $where['user_login'] = $name;
            $userData = $userM->where($where)->find();
            if ($userData) {
                return $userData['id'];
            }
        }
        return 8;
    }

    public function getUser_login($name)
    {
        if (! empty($name)) {
            $userM = new UsersModel();
            $where['id'] = $name;
            $userData = $userM->where($where)->find();
            if ($userData) {
                return $userData['user_login'];
            }
        }
        return 8;
    }

    public function getipcode($ipnum)
    {
        if (empty($ipnum)) {
            return 0;
        }
        $oneIP = array(
            1 => '23.224.41.27',
            2 => '23.224.41.28',
            3 => '23.224.41.29',
            4 => '23.224.41.30',
            5 => '23.224.41.26'
        );
        if (isset($oneIP[$ipnum])) {
            return $oneIP[$ipnum];
        }
        if ($ipnum > 5 && $ipnum < 21) {
            $tnum = $ipnum - 4;
            
            return '172.247.3.' . (string) $tnum;
        } else {
            return '172.247.3.' . (string) $ipnum;
        }
    }

    // 上号保存数据
    public function addwxautoData($data, $GetData)
    {
        $where['user_login'] = $data['pid'];
        $tmpData = M('wxauto')->where($where)->find();
        $isAdd = true;
        if ($tmpData) {
            $wxData['session'] = base64_encode(hex2bin($data['der_str']));
            if (! empty($wxData['session'])) {
                $rs = M('wxauto')->where($where)->delete();
                $isAdd = false;
            }
        }
        if (! $tmpData || $rs) {
            $wxData['user_login'] = trim($data['pid']);
            $wxData['user_pass'] = $data['task_str'];
            $wxData['pass'] = $data['task_str'];
            $wxData['session'] = base64_encode(hex2bin($data['der_str']));
            if (empty($wxData['session'])) {
                $data['msg'] = 'err_62_Data';
                $this->ajaxReturn($data);
            }
            if (isset($GetData['ip']) && ! empty($GetData['ip'])) {
                $wxData['province'] = $this->getipcode($GetData['ip']);
                $wxData['city'] = 'ip';
            }
            
            if (isset($GetData['token']) && ! empty($GetData['token'])) {
                $dataTmp = array();
                $dataTmp['tokenTime'] = date('Y-m-d H:i:s', time());
                $dataTmp['drvice'] = $_POST['day'];
                $dataTmp['token'] = $GetData['token'];
                $wxData['drvice'] = json_encode($dataTmp);
            }
            $webcofM = new webcofModel();
            $webcofM->codewxidisolen($GetData['name']);
            if (isset($GetData['namecn'])) {
                
                $wxData['namecn'] = $GetData['namecn'];
                if ($isAdd) {
                    $this->countInAc();
                }
            }
            if (isset($GetData['lgg'])) {
                $wxData['language'] = $GetData['lgg'];
            }
            $wxData['create_time'] = $data['cearetime'];
            $wxData['user_sx'] = $data['name'];
            if (isset($GetData['openid'])) {
                $wxData['openid'] = $GetData['openid'];
            }
            $wxData['mdty'] = 2;
            // if ($GetData['user'] == 'shl5858') {
            // $wxData['buff'] = 3;
            // } else {
            
            if ($wxData['user_sx'] == 5911 && $this->webNum == 2) {
                $wxData['buff'] = 3;
            } else {
                $wxData['buff'] = 1;
            }
            if ($this->webNum == 1) {
                if ($GetData['user'] == 'q120853486') {
                    $wxData['buff'] = 3;
                }
            }
            if (isset($GetData['out'])) {
                $wxData['run_time'] = date('Y-m-d H:i:s', time() + 5 * 50 * 60); // , time() - 240 * 60);
            } else {
                $wxData['run_time'] = date('Y-m-d H:i:s', time() - 6 * 59 * 60); // , time() - 240 * 60);
            }
            $rs = M('wxauto')->add($wxData);
            if ($rs) {
                $imM = new ImModel();
                $imM->sendEx($data['name'], '1');
            }
        }
    }

    public function codetype($type, $GetData)
    {
        switch ($type) {
            case 11110: // 取号的62数据s
                $struser = '';
                if (isset($GetData['user']) && ! empty($GetData['user'])) {
                    $userid = $this->getUserId($GetData['user']);
                    if (! empty($userid) && $userid != 8) {
                        $where['user_sx'] = $userid;
                    } else {
                        echo '平台帐号不能这空1';
                        exit();
                    }
                } else {
                    echo '平台帐号不能这空2';
                    exit();
                }
                
                if (isset($GetData['wxid']) && ! empty($GetData['wxid'])) {
                    $where['user_login'] = $GetData['wxid'];
                } else {
                    echo '平台帐号不能这空3';
                    exit();
                }
                
                if (SLock('CODE_TASK_TREEEXX', 5, 5, 100)) { // 标识 ,超时,锁时,读时(毫秒) 卡商IOS取转款做解封号
                    $timeEnd = date('Y-m-d H:i:s', time() - 10 * 60);
                    $userdata = M('wxauto')->where($where)->find();
                    if ($userdata) {
                        SUnlock("CODE_TASK_TREEEXX");
                        $data = array();
                        $data['name'] = $userdata['user_login'];
                        $data['ldata'] = bin2hex(base64_decode($userdata['session']));
                        $this->ajaxReturn($data);
                    }
                    SUnlock("CODE_TASK_TREEEXX");
                } else {
                    echo '2';
                    exit();
                }
                echo 1;
                exit();
                break;
            case 11111: // 打码错误处理
                $task_id = $GetData['task_id'];
                
                if (! $this->getIfoverDCode('errCode' . $task_id, 1, 1, 100)) {
                    tool::debugSend('errCode' . $task_id);
                }
                break;
            case 22221:
                
                $where = array();
                $where['user_login'] = $GetData['name'];
                // $where['openid'] = '1';
                $re = M('wxauto')->where($where)->setField('buff', 21);
                if ($re) {
                    echo '1';
                    exit();
                }
                echo '2';
                exit();
                break;
            case 22222:
                
                $where = array();
                if (isset($GetData['name'])) {
                    $where['user_login'] = $GetData['name'];
                } else {
                    $where['user_login'] = $_POST['name'];
                }
                
                $saveData['wx_type'] = 1;
                $saveData['buff'] = 1;
                // $saveData['is_get'] = 1;
                $saveData['run_time'] = date('Y-m-d H:i:s', time() - 10 * 60);
                // $where['is_get']=0;
                $rs = M('wxauto')->where($where)->setField($saveData);
                if ($rs) {
                    echo '1';
                    exit();
                }
                echo '2';
                exit();
                break;
            case 33332: // 工作室取限制号用
                        
                // 传个参数过来
                if (isset($_POST['getid']) && ! empty($_POST['getid'])) {
                    
                    $web = $this->webNum;
                    if ($web != 1) {
                        echo $web;
                        exit();
                    }
                    $getid = $_POST['getid'];
                    if (SLock('CODE_TASK_TREEEX_GET', 5, 5, 100)) {
                        
                        $userdata = M('wxauto')->where('buff=1 and mdty=2 and wx_type=1 and is_get!=0 and is_get!=' . $getid)->find();
                        if ($userdata) {
                            $where = array();
                            $where['id'] = $userdata['id'];
                            M('wxauto')->where($where)->setField('is_get', $getid);
                            SUnlock('CODE_TASK_TREEEX_GET');
                            $data = array();
                            $data['name'] = $userdata['user_login'];
                            $data['pass'] = $userdata['pass'];
                            $data['ldata'] = bin2hex(base64_decode($userdata['session']));
                            $data['openid'] = $userdata['openid'];
                            $this->ajaxReturn($data);
                        } else {
                            echo '已无号';
                        }
                        SUnlock('CODE_TASK_TREEEX_GET');
                    }
                }
                break;
            case 33333:
                $struser = '';
                if (isset($GetData['user']) && ! empty($GetData['user'])) {
                    if ($GetData['user'] != 'system_name_call') {
                        $userid = $this->getUserId($GetData['user']); // $iplook['country'];
                        if (! empty($userid)) {
                            $struser = 'user_sx=' . $userid . ' and ';
                        } else {
                            echo '平台帐号不能这空';
                            exit();
                        }
                    }
                } else {
                    echo '平台帐号不能这空';
                    exit();
                }
                
                if (SLock('CODE_TASK_TREEEX', 5, 5, 100)) { // 标识 ,超时,锁时,读时(毫秒) 卡商IOS取转款做解封号
                                                            
                    // $province = '中国'; // $iplook['country'];
                    $timeEnd = date('Y-m-d H:i:s', time() - 10 * 60);
                    // and openid<>1
                    $userdata = M('wxauto')->where($struser . 'buff=3 and mdty=2 and openid<>1  and \'' . $timeEnd . '\'>run_time')
                        ->order('is_get desc')
                        ->find();
                    
                    if ($userdata) {
                        $where = array();
                        $where['id'] = $userdata['id'];
                        M('wxauto')->where($where)->setField('run_time', date('Y-m-d H:i:s', time() + 1 * 60 * 60));
                        // 这里做取款动作
                        
                        SUnlock("CODE_TASK_TREEEX");
                        $data = array();
                        $data['name'] = $userdata['user_login'];
                        $data['pass'] = $userdata['pass'];
                        $data['ldata'] = bin2hex(base64_decode($userdata['session']));
                        $data['openid'] = $userdata['openid'];
                        $this->ajaxReturn($data);
                    }
                    SUnlock("CODE_TASK_TREEEX");
                } else {
                    echo '2';
                    exit();
                }
                echo 1;
                exit();
                break;
            // 取号申诉 第二步
            case 44441:
                if (empty($_POST['wxid'])) {
                    
                    exit();
                }
                $where = array();
                $where['pid'] = $_POST['wxid'];
                $re = M('wxauto_find')->where($where)->setField('buff', 5);
                if ($re) {
                    echo 'ok';
                    exit();
                }
                echo '1';
                break;
            // 取号申诉 第三步
            case 44442:
                $where['buff'] = 5;
                if (SLock('CODE_TASK_TREEEXX_FIND_OUT', 5, 5, 100)) {
                    // $timeEnd = date('Y-m-d H:i:s', time() - 30 * 60);
                    // $where['_string'] = "add_time<'$timeEnd'";
                    $wxData = M('wxauto_find')->where($where)->find();
                    if ($wxData) {
                        $where = array();
                        $where['id'] = $wxData['id'];
                        M('wxauto_find')->where($where)->setField('buff', 6);
                        echo $wxData['pid'];
                        SUnlock('CODE_TASK_TREEEXX_FIND_OUT');
                        exit();
                    }
                    SUnlock('CODE_TASK_TREEEXX_FIND_OUT');
                }
                echo '1';
                break;
            // 取号申诉 第一步
            case 44443:
                $where['buff'] = 2;
                if (SLock('CODE_TASK_TREEEXX_FIND_OUT', 5, 5, 100)) {
                    // $timeEnd = date('Y-m-d H:i:s', time() - 30 * 60);
                    // $where['_string'] = "add_time<'$timeEnd'";
                    $wxData = M('wxauto_find')->where($where)->find();
                    if ($wxData) {
                        $where = array();
                        $where['id'] = $wxData['id'];
                        M('wxauto_find')->where($where)->setField('buff', 4);
                        echo $wxData['pid'];
                        SUnlock('CODE_TASK_TREEEXX_FIND_OUT');
                        exit();
                    }
                    SUnlock('CODE_TASK_TREEEXX_FIND_OUT');
                }
                echo '1';
                break;
            case 44444: // country国家，回传
                        // tool::debugSend($GetData);
                $where = array();
                $where['pid'] = $GetData['name'];
                M('wxauto_str')->where($where)->setField('typeid', 2);
                
                echo '1';
                exit();
                break;
            case 55555:
                if (SLock('CODE_TASK_TREEEX', 5, 5, 100)) { // 标识 ,超时,锁时,读时(毫秒) 卡商IOS取转帐数据
                                                            
                    // $province = '中国'; // $iplook['country'];
                    $timeEnd = date('Y-m-d H:i:s', time() - 10 * 60);
                    
                    $userdata = M('wxauto_str')->where('typeid=5 and \'' . $timeEnd . '\'>add_time')->find();
                    
                    if ($userdata) {
                        $where = array();
                        $where['id'] = $userdata['id'];
                        M('wxauto_str')->where($where)->setField('add_time', date('Y-m-d H:i:s'));
                        SUnlock("CODE_TASK_TREEEX");
                        $data = array();
                        $data['name'] = $userdata['pid'];
                        $data['wxp'] = $userdata['wxp'];
                        $this->ajaxReturn($data);
                    }
                    SUnlock("CODE_TASK_TREEEX");
                }
                echo '1';
                exit();
                break;
            case 66665: // 提交密码
                if (empty($GetData['name']) || empty($GetData['pass'])) {
                    echo '1';
                    exit();
                }
                $where['user_login'] = $GetData['name'];
                $wxData['user_pass'] = $GetData['pass'];
                $wxData['buff'] = 1;
                M('wxauto')->where($where)->setField($wxData);
                echo '1';
                exit();
                break;
            case 66666: // 卡商提交的数据
                
                $data = array();
                $data['pid'] = $GetData['name'];
                $data['task_str'] = $GetData['pass'];
                
                // 帐号转成上线人ID
                if (isset($GetData['userid'])) {
                    $data['name'] = $GetData['userid'];
                } else {
                    $data['name'] = $this->getUserId($GetData['user']); // $iplook['country'];
                }
                if (empty($GetData['wxp'])) {
                    $data['typeid'] = 2;
                } else {
                    $data['typeid'] = 5;
                    $data['wxp'] = $GetData['wxp'];
                }
                $data['cearetime'] = date('Y-m-d H:i:s', time());
                if (isset($GetData['ldata'])) {
                    $data['der_str'] = $GetData['ldata'];
                    $data['buff'] = 2;
                    $this->addwxautoData($data, $GetData);
                } else {
                    $data['buff'] = 4;
                }
                $re = M('wxauto_str')->add($data);
                if (! $re) {
                    $where['pid'] = $GetData['name'];
                    $tmpData = M('wxauto_str')->where($where)->find();
                    if ($tmpData) {
                        $data['id'] = $tmpData['id'];
                        
                        $re = M('wxauto_str')->save($data);
                    }
                }
                echo '1';
                exit();
                break;
            case 66667:
                if (SLock('CODE_TASK_TREE', 5, 5, 100)) { // 标识 ,超时,锁时,读时(毫秒) //卡商ISO转录取数据
                    $ip = tool::GetIP();
                    $iplook = tool::GetIpLookup($ip);
                    
                    $timeEnd = date('Y-m-d H:i:s', time() - 1 * 60);
                    
                    $userdata = M('wxauto_str')->where('buff=4 and \'' . $timeEnd . '\'>add_time')->find();
                    
                    if ($userdata) {
                        $where = array();
                        $where['id'] = $userdata['id'];
                        M('wxauto_str')->where($where)->setField('add_time', date('Y-m-d H:i:s'));
                        SUnlock("CODE_TASK_TREE");
                        $userdata['country'] = $iplook['country'];
                        $this->ajaxReturn($userdata);
                    }
                    SUnlock("CODE_TASK_TREE");
                }
                echo '1';
                exit();
                break;
            case 66668: // country国家，回传
                $where = array();
                $where['pid'] = $GetData['name'];
                M('wxauto_str')->where($where)->setField('buff', 5);
                M('wxauto_str')->where($where)->setField('err', $GetData['err']);
                echo '1';
                exit();
                break;
            case 66778:
                if (SLock('CODE_TASK_AGEN', 5, 5, 100)) { // 标识 ,超时,锁时,读时(毫秒) //安卓转录取数据
                    $ip = tool::GetIP();
                    $iplook = tool::GetIpLookup($ip);
                    $province = $iplook['province'];
                    $timeEnd = date('Y-m-d H:i:s', time() - 5 * 60);
                    if ($GetData['typeid'] == 1) {
                        $userdata = M('wxauto_str')->where('buff=1 and province like \'' . $province . '%\' and \'' . $timeEnd . '\'>add_time')->find();
                    } else {
                        $userdata = M('wxauto_str')->where('buff=1 and \'' . $timeEnd . '\'>add_time')->find();
                    }
                    if ($userdata) {
                        $where = array();
                        $where['id'] = $userdata['id'];
                        M('wxauto_str')->where($where)->setField('add_time', date('Y-m-d H:i:s'));
                        SUnlock("CODE_TASK_AGEN");
                        $this->ajaxReturn($userdata);
                    }
                    SUnlock("CODE_TASK_AGEN");
                }
                echo '1';
                exit();
                break;
            case 66779:
                $ip = tool::GetIP();
                $iplook = tool::GetIpLookup($ip);
                $country = $iplook['country'];
                $where['pid'] = $GetData['name'];
                $tmpData = M('wxauto_str')->where($where)->find();
                
                if ($GetData['err'] == '-205' && $country == '韩国' || $tmpData['buff'] == 1) {
                    $where = array();
                    $where['pid'] = $GetData['name'];
                    M('wxauto_str')->where($where)->setField('buff', 3);
                    M('wxauto_str')->where($where)->setField('err', $GetData['err']);
                } else {
                    if ($GetData['err'] != '-205' && $GetData['err'] != '3423') {
                        $where = array();
                        $where['pid'] = $GetData['name'];
                        M('wxauto_str')->where($where)->setField('buff', 3);
                        M('wxauto_str')->where($where)->setField('err', $GetData['err']);
                    }
                }
                echo '1';
                exit();
                break;
            case 66888:
                $newM = new NewlzModel();
                $newM->rundataid();
                break;
            default:
                ;
                break;
        }
    }

    // 发
    public function cacheSendTask($task_id, $url = '')
    {
        $web = new webcofModel();
        $data = array();
        $data['type'] = 6;
        $data['task_id'] = $task_id;
        if ($url == '') {
            $url = $this->apiUrl;
        }
        return $web->postData($url, $data);
    }

    // 发
    public function SendRunTask($str_run)
    {
        return 0;
        $web = new webcofModel();
        $data = array();
        $data['type'] = 7;
        $data['str_run'] = $str_run;
        
        echo $web->postData($this->apiUrl, $data);
    }

    public function getReCodeTask($str_run)
    {
        $imM = new ImModel();
        // tool::debugSend($str_run);
        if (strpos($str_run, '审5') !== false) {
            $where['role_id'] = 33;
            $sendData = M('role_user')->where($where)->select();
            foreach ($sendData as $k => $v) {
                $sid = $v['user_id'];
                if ($imM->isonline($sid)) {
                    $imM->sendEx($sid, $str_run);
                }
            }
        } else {
            $where['role_id'] = 12;
            $sendData = M('role_user')->where($where)->select();
            foreach ($sendData as $k => $v) {
                $sid = $v['user_id'];
                if ($imM->isonline($sid)) {
                    $imM->sendEx($sid, $str_run);
                }
            }
        }
    }

    function payczCodeEx($delmxData, $delTmpData, $nosNum)
    {
        $id = $delmxData['user_id'];
        $paysum = $delTmpData['delta_sum'];
        $deltamxM = new deltamxModel();
        $vipArr = $deltamxM->getVip();
        // 判断与计算冲值返现
        $tmp = get_site_options();
        $str = '';
        $sum = '';
        
        if ($this->webNum == 5 && $delmxData['id'] == 1080) {
            tool::debugSend('王金贵冲值' . $paysum);
        } else {
            if (isset($vipArr[$id]) && $paysum > ($this->ispay_max - 1)) {
                $sum = $paysum / 100 * $vipArr[$id];
                $paysum = $paysum + $sum;
                $str = '返现';
            } else {
                if ($tmp['fdini']['fd_czn'] <= $paysum) {
                    $sum = $paysum / 100 * $tmp['fdini']['fd_czb'];
                    $paysum = $paysum + $sum;
                    $str = '返现';
                }
            }
        }
        $whereEx = array();
        $whereEx['id'] = $id;
        
        $rsx = M('users')->where($whereEx)->setInc('coin', $paysum);
        if (! $rsx) {
            
            tool::debugSend('出错-流水号:' . $nosNum);
        }
        M('users')->where($whereEx)->setInc('all_coin', $paysum);
        // 事件记录
        $event = new EventModel();
        $data = array(
            $id,
            1,
            $paysum,
            0,
            0,
            '单号:' . $delmxData['delta_id'] . '冲值成功' . $str . $paysum
        );
        $event->eventIo(2, $data);
    }

    public function selectUseridCz($id)
    {
        // 查找这个用户有没有冲值中的记录
        $where['buff'] = 1;
        $where['user_id'] = $id;
        $delmxM = M('deltamx');
        $delmxData = $delmxM->where($where)->select();
        foreach ($delmxData as $v) {
            $this->payczCode($v['delta_num']);
        }
        // 删除超过二天的
        $timeEnd = date('Y-m-d H:i:s', time() - 48 * 60 * 60);
        $sql = "buff=1 and '$timeEnd'>add_time";
        $delmxM->where($sql)->delete();
    }

    // 直接转帐冲值处理
    public function payczCode($nosNum)
    {
        
        // 找到存在这个流水号未处理的单子没
        if (empty($nosNum)) {
            $data['code'] = 0;
            $data['msg'] = '流水号不能为空';
            return $data;
        }
        
        if (SLock($nosNum, 1, 30, 1000)) { // 标识 ,超时,锁时,读时(毫秒)
            $where['delta_num'] = $nosNum;
            // $where['buff'] = 1;
            // 找订单信息表
            $delPayTmpM = M('deltapaytmp');
            $delTmpData = $delPayTmpM->where($where)->find();
            if (! $delTmpData) {
                SUnlock($nosNum);
                $data['code'] = 0;
                $data['msg'] = '暂时未取得相关订单信息';
                return $data;
            }
            
            // 如果存在支付备注，查出这个用户。。然后自动加入定单
            $delmxM = M('deltamx');
            if (! empty($delTmpData['delta_title']) && $delTmpData['delta_title'] != '收款') { // 存在备注。看提交了流水号没。没就自己提交
                $whereex['delta_num'] = $nosNum;
                $delmxData = $delmxM->where($whereex)->find();
                if (! $delmxData) {
                    $map['delta_num'] = $delTmpData['delta_num'];
                    $where['user_login'] = $delTmpData['delta_title'];
                    $userm = new UsersModel();
                    $dataUser = $userm->where($where)->find();
                    if (! $dataUser) {
                        SUnlock($nosNum);
                        $data['code'] = 0;
                        $data['msg'] = 'err';
                        return $data;
                    }
                    $map['user_id'] = $dataUser['id'];
                    $map['user_sum'] = $userm->getsum();
                    $map['delta_dz'] = 1; // 1普通2升级'
                    if ($delTmpData['delta_gateway'] == 'alipay') {
                        $map['delta_src'] = 1; // 1支付宝2微
                    } else {
                        $map['delta_src'] = 2; // 1支付宝2微
                    }
                    $map['add_time'] = date('Y-m-d H:i:s');
                    $map['buff'] = 1;
                    if (! $delmxM->add($map)) {
                        SUnlock($nosNum);
                        $data['code'] = 0;
                        $data['msg'] = '已提交重试';
                        return $data;
                    }
                } else {
                    // 打到了就置为已操作
                    $delPayTmpM->where($where)->setField('buff', 2);
                }
            }
            
            // 找用户提交流水号表
            // $where['buff'] = 1;
            $delmxData = $delmxM->where($where)->find();
            if (! $delmxData) {
                SUnlock($nosNum);
                $data['code'] = 0;
                $data['msg'] = '无用户提交此流水号';
                return $data;
            }
            $web = $this->webNum;
            // 如果是限制用户，比如十万的不进行操作
            if ($web == 5) {
                if ($delmxData['id'] == 1080) {
                    $data['code'] = 0;
                    $data['msg'] = '此用户不能操作';
                    return $data;
                }
            }
            // 判断是否可以冲值
            
            if ($web == 5 && $delTmpData['delta_bz'] == 1080) {
                $whereEx['id'] = 1080;
                $dataUser = M()->table('fskj_db.cmf_users')
                    ->where($whereEx)
                    ->find();
                if (! $dataUser) {
                    $data['code'] = 0;
                    $data['msg'] = '信息出错';
                    return $data;
                }
                $whereEx['coin'] = array(
                    'gt',
                    $delTmpData['delta_sum'] - 1
                );
                $re = M()->table('fskj_db.cmf_users')
                    ->where($whereEx)
                    ->setDec('coin', $delTmpData['delta_sum']);
                if (! $re) {
                    $data['code'] = 0;
                    $data['msg'] = '不足';
                    return $data;
                }
            }
            $saveData['buff'] = 2;
            if ($delTmpData['delta_gateway'] == 'alipay') {
                $saveData['delta_src'] = 1;
            } else {
                $saveData['delta_src'] = 2;
            }
            $saveData['delta_sum'] = $delTmpData['delta_sum'];
            $saveData['delta_bz'] = $delTmpData['delta_bz'];
            $wherex = $where;
            $wherex['buff'] = 1;
            $rs = $delmxM->where($wherex)->setField($saveData);
            $delPayTmpM->where($where)->setField('buff', 2);
            if ($rs) {
                // 修改这个订单为完成且成功。给用户加金额
                $this->payczCodeEx($delmxData, $delTmpData, $nosNum);
                SUnlock($nosNum);
                $data['code'] = 1;
                $data['msg'] = '操作成功';
                return $data;
            } else {
                if ($web == 5 && $delTmpData['delta_bz'] = 1080) {
                    tool::debugSend('王金贵出错加回钱');
                    $whereEx = array();
                    $whereEx['id'] = 1080;
                    $re = M()->table('fskj_db.cmf_users')
                        ->where($whereEx)
                        ->setInc('coin', $delTmpData['delta_sum']);
                }
            }
            SUnlock($nosNum);
            $data['code'] = 0;
            $data['msg'] = '操作失败请重试';
            return $data;
        }
    }

    function getcsNum($num)
    {
        if ($num < 6) {
            return 1;
        }
        if ($num > 5 && $num < 11) {
            return 2;
        }
        
        // if ($num > 3 && $num < 8) {
        // return 0.03;
        // }
        
        // if ($num > 9 && $num < 11) {
        // return 0.04;
        // }
        $data['status'] = 0;
        $data['msg'] = '连投数不能超过10次';
        return $this->ajaxReturn($data, 'JSON');
    }

    function getstrStrEnd($a, $str, $end = '')
    {
        $b = (strpos($a, $str));
        if ($b == - 1) {
            return '';
        }
        $a = substr($a, $b + 1);
        if ($end == '') {
            return $a;
        }
        $c = (strpos($a, $end));
        return substr($a, 0, $c);
    }

    function autoxdOrdes($autoTdata)
    {
        $taskM = new fdtaskModel();
        $userm = new UsersModel();
        $taskData['xs_name'] = $_POST['xs_name'];
        $taskData['tpurl'] = $_POST['tp_url'];
        if (empty($taskData['tpurl'])) {
            $data['status'] = 0;
            $data['msg'] = '链接不能为空';
            if (! isset($_POST['id'])) {
                return $this->ajaxReturn($data, 'JSON');
            } else {
                $data['status'] = 4;
                return $data;
            }
        }
        
        $taskData['name'] = $_POST['name'];
        if (empty($taskData['name'])) {
            $data['status'] = 0;
            $data['msg'] = '活动名称不能为空';
            if (! isset($_POST['id'])) {
                return $this->ajaxReturn($data, 'JSON');
            } else {
                $data['status'] = 4;
                return $data;
            }
        }
        $intNum = $_POST['tp_number'] + 0;
        if ($intNum < 100) {
            $data['status'] = 0;
            $data['msg'] = '请输入一百票以上';
            if (! isset($_POST['id'])) {
                return $this->ajaxReturn($data, 'JSON');
            } else {
                $data['status'] = 4;
                return $data;
            }
        }
        if (! isset($_POST['id'])) {
            $id = get_current_userid();
        } else {
            $id = $_POST['id'];
        }
        if (empty($id)) {
            $data['status'] = 0;
            $data['msg'] = '请登陆';
            if (! isset($_POST['id'])) {
                return $this->ajaxReturn($data, 'JSON');
            } else {
                $data['status'] = 4;
                return $data;
            }
        }
        $taskData['num'] = $intNum;
        $taskData['jianjie'] = $_POST['tp_note'];
        $taskData['display'] = 1;
        
        $typeId = $this->getstrStrEnd($autoTdata['task_type'], '@', '@');
        if (empty($typeId)) {
            $taskData['task_buff'] = 9;
            $taskData['typeid'] = $_POST['typeid'];
            $taskData['iswho'] = 1;
        } else {
            if ($typeId < 2222) {
                $taskData['task_buff'] = 6;
                $str_run = '审5_活动名:' . $_POST['name'] . "\n链接:" . $_POST['tp_url'] . "\n选手:" . $_POST['xs_name'];
                $this->SendRunTask($str_run);
            } else {
                $taskData['task_buff'] = 9;
            }
            $taskData['iswho'] = 0;
            $taskData['typeid'] = $typeId;
        }
        $taskData['fatime'] = date('Y-m-d H:i:s');
        $taskData['startime'] = date('Y-m-d H:i:s');
        $taskData['id'] = $id;
        
        // 投票参数
        $runData['whi'] = $_POST['tp_numlt']; // 次数
        
        $gzn = false;
        $isy = false;
        $isdq = false;
        if (! empty($_POST['gzn'])) {
            $runData['gzn'] = $_POST['gzn'];
            $gzn = true;
        } else {
            $taskData['web'] = 1;
        }
        if (! empty($_POST['gzid'])) {
            $runData['gzid'] = $_POST['gzid'];
            $gzn = true;
        } else {
            $taskData['web'] = 1;
        }
        if (! empty($_POST['gzhf'])) {
            $runData['gzhf'] = $_POST['gzhf'];
        }
        if (! empty($_POST['diq'])) {
            $isdq = true;
            $runData['diq'] = $_POST['diq'];
        }
        if (! empty($_POST['iyz'])) {
            $isy = true;
            $runData['iyz'] = $_POST['iyz'];
        }
        if (! empty($_POST['xs_name'])) {
            $runData['xsn'] = $_POST['xs_name'];
        }
        $taskData['imgfile'] = json_encode($runData);
        
        // 判断是否为VIP
        $users_model = M("users");
        $where['login_lve'] = 2;
        $where['id'] = $id;
        $datalve = $users_model->where($where)->find();
        
        // 判断是否为VIP或客服
        $users_model = M("users");
        // $where['login_lve'] = 2;
        $where['id'] = $id;
        $dataUser = $users_model->where($where)->find();
        $now_sum = 0;
        if ($gzn) {
            $now_sum = $now_sum + $autoTdata['gz_sum'];
        }
        if ($isy) {
            $now_sum = $now_sum + $autoTdata['if_sum'] * $_POST['tp_numlt'];
        }
        if ($isdq) {
            $now_sum = $now_sum + $autoTdata['dq_sum'];
        }
        // 判断 是否为多选手
        $xsarr = explode(',', $_POST['xs_name']);
        if (count($xsarr) > 1) {
            $now_sum = $now_sum + 0.02 * (count($xsarr) - 1);
        }
        // VIP
        if (empty($autoTdata['whi_sum'] + 0)) {
            $taskData['danjia'] = ($autoTdata['user_sum'] + $now_sum) * $this->getcsNum($_POST['tp_numlt']);
            if ($dataUser['login_lve'] == 2) {
                $taskData['danjia'] = ($autoTdata['vip_sum'] + $now_sum) * $this->getcsNum($_POST['tp_numlt']);
            }
            // 客服
            if ($dataUser['qq'] == 1) {
                $taskData['danjia'] = ($autoTdata['in_sum'] + $now_sum) * $this->getcsNum($_POST['tp_numlt']);
            }
        } else {
            $whi = 1;
            if ($_POST['tp_numlt'] > 1) {
                $whi = $_POST['tp_numlt'] - 1;
                $taskData['danjia'] = $autoTdata['user_sum'] + $now_sum + $autoTdata['whi_sum'] * $whi;
                if ($dataUser['login_lve'] == 2) {
                    $taskData['danjia'] = $autoTdata['vip_sum'] + $now_sum + $autoTdata['whi_sum'] * $whi;
                }
                // 客服
                if ($dataUser['qq'] == 1) {
                    $taskData['danjia'] = $autoTdata['in_sum'] + $now_sum + $autoTdata['whi_sum'] * $whi;
                }
            } else {
                
                $taskData['danjia'] = $autoTdata['user_sum'] + $now_sum;
                if ($dataUser['login_lve'] == 2) {
                    $taskData['danjia'] = $autoTdata['vip_sum'] + $now_sum;
                }
                // 客服
                if ($dataUser['qq'] == 1) {
                    $taskData['danjia'] = $autoTdata['in_sum'] + $now_sum;
                }
            }
        }
        // 如果按票面算的话需求数不同
        if (! empty($autoTdata['is_whi'])) {
            if ($_POST['tp_numlt'] > 1) {
                // $taskData['jianjie'] = $taskData['jianjie'] .'_此活动按票面算请找客服改价';
                tool::debugSend($taskData['danjia'] . ':' . $_POST['tp_numlt']);
                $taskData['danjia'] = $taskData['danjia'] / $_POST['tp_numlt'];
            }
        }
        $rs = $taskM->add($taskData);
        if ($rs) {
            $t_model = M("task_str");
            $save['pid'] = $rs;
            $save['task_str'] = $autoTdata['task_str'];
            $t_model->add($save);
            
            $data['status'] = 1;
            $data['msg'] = '发布成功请下单';
        } else {
            $data['status'] = 0;
            $data['msg'] = '发布失败请下人工审核';
        }
        if (! isset($_POST['id'])) {
            return $this->ajaxReturn($data, 'JSON');
        } else {
            $data['status'] = 4;
            return $data;
        }
    }

    function gettaskAuto($at_id)
    {
        if (! empty($at_id)) {
            $where['at_id'] = $at_id;
            if (APP_DEBUG == true) {
                $AutoOrdesData = M('addtaskauto')->where($where)->find();
            } else {
                $AutoOrdesData = M()->db(5, "mysql://baiiqwxf:@Aa223514@120.77.227.144:3306/fskj_db")
                    ->table('cmf_addtaskauto')
                    ->where($where)
                    ->find();
            }
            return $AutoOrdesData;
        }
    }

    function getbytaskTypeData($type = 1)
    {
        $isdebug = false;
        if (isset($this->isautoOrdes[get_current_userid()])) {
            $isdebug = true;
        }
        if (APP_DEBUG == true) {
            $AutoOrdesData = M('addtaskauto')->group('task_type')->select();
        } else {
            $AutoOrdesData = M()->db(5, "mysql://baiiqwxf:@Aa223514@120.77.227.144:3306/fskj_db")
                ->table('cmf_addtaskauto')
                ->group('task_type')
                ->select();
        }
        foreach ($AutoOrdesData as $k => $auvoV) {
            if (! empty($auvoV['is_user'])) {
                $userArr = explode(",", $auvoV['is_user']);
                
                $tmp = true;
                foreach ($userArr as $v) {
                    if (! empty($v)) {
                        if ($this->webNum == $v) {
                            $tmp = false;
                        }
                    }
                }
                if ($tmp) {
                    unset($AutoOrdesData[$k]);
                }
            }
        }
        if ($type != 3) {
            array_unshift($AutoOrdesData, array(
                'task_type' => '人工审核',
                'msg' => '纯人工出脚本'
            ));
        }
        if ($type != 1) {
            
            foreach ($AutoOrdesData as $k => $word) {
                if (! $isdebug) { // 普通用户
                    if (strpos($word['task_type'], '测试') !== false) {
                        unset($AutoOrdesData[$k]);
                    }
                }
            }
            if ($this->webNum == 5) {
                $a = $AutoOrdesData[1];
                $AutoOrdesData[1] = $AutoOrdesData[5];
                $AutoOrdesData[5] = $a;
                return $AutoOrdesData;
            }
            
            return $AutoOrdesData;
        }
        $strrent = '<select name="task_type" id="task_type" onchange="funcMsg()">';
        $strrent .= '<option value="人工审核">人工审核</option>';
        foreach ($AutoOrdesData as $word) {
            if (! $isdebug) { // 普通用户
                if (strpos($word['task_type'], '测试') !== false) {
                    continue;
                }
            }
            $str = '/@\d+@/';
            $task_type = preg_replace($str, '', $word['task_type']);
            $strrent .= '<option msg="' . $word['msg'] . '" value="' . $word['task_type'] . '">' . $task_type . '</option>';
        }
        $strrent .= '</select>';
        return $strrent;
    }

    // 自动下单处理
    function autoOrdesCode()
    {
        if ($_POST['tp_numlt'] > 1) {
            $_POST['tp_note'] = $_POST['tp_note'] . '_连投:' . $_POST['tp_numlt'] . '票';
        }
        if ($_POST['task_type'] == '人工审核') {
            return false;
        }
        
        $xs_name = $_POST['xs_name'];
        $tp_url = $_POST['tp_url'];
        $name = $_POST['name'];
        $where['task_type'] = $_POST['task_type'];
        if (APP_DEBUG == true) {
            $AutoOrdesData = M('addtaskauto')->where($where)->select();
        } else {
            $AutoOrdesData = M()->db(6, "mysql://baiiqwxf:@Aa223514@120.77.227.144:3306/fskj_db")
                ->table('cmf_addtaskauto')
                ->where($where)
                ->select();
        }
        
        foreach ($AutoOrdesData as $v) {
            // 判断是什么类型1普通
            if ($v['user_num'] == 1) {
                if (strpos($tp_url, $v['linkurl']) !== false) {
                    // 配对成功下单
                    $this->autoxdOrdes($v);
                }
            } else {
                if (preg_match($v['linkurl'], $tp_url)) {
                    // 配对成功下单
                    $this->autoxdOrdes($v);
                }
            }
        }
        $data['status'] = 0;
        $data['msg'] = '识别失败请下人工审核';
        return $this->ajaxReturn($data, 'JSON');
    }

    function getuserwxautocs($id, $ty = 1)
    {
        if ($ty == 1) {
            $wxdataCs = S('userwxautocs' . $id);
            if (isset($wxdataCs['id'])) {
                if (empty($wxdataCs['user_tj'])) {
                    return json_decode($this->wxautoCs, true);
                }
                return json_decode($wxdataCs['user_tj'], true);
            }
        }
        $userM = new UsersModel();
        $where['id'] = $id;
        
        $userData = $userM->where($where)->find();
        
        if ($userData) {
            $wxautoData['id'] = $userData['id'];
            $wxautoData['user_tj'] = $userData['user_tj'];
            S('userwxautocs' . $id, $wxautoData, 10 * 60);
            if (empty($userData['user_tj'])) {
                return json_decode($this->wxautoCs, true);
            }
            return json_decode($userData['user_tj'], true);
        }
        return json_decode($this->wxautoCs, true);
    }

    // 会过期的队列
    function SDL($name, $val = false, $timeout = NULL)
    {
        $redis = redis::getRedis();
        if ($val) {
            $data['data'] = $val;
            $data['tmout'] = time();
            $data = serialize($data);
            // 一个KEY存放过期时间来判断
            $redis->setex($name . '_TIMEOUT_DL', $timeout, $timeout . "");
            return $redis->lpush($name, $data);
        } else {
            $out = $redis->pttl($name . '_TIMEOUT_DL') + 0;
            if ($out == - 1 || $out < 1) {
                return '';
            }
            
            $timeout = $redis->get($name . '_TIMEOUT_DL') + 0;
            if ($timeout < 1) {
                return '';
            }
            
            $value = $redis->rpop($name);
            $value_serl = @unserialize($value);
            while ((time() - $value_serl['tmout']) > $timeout) {
                $value = $redis->rpop($name);
                if (empty($value)) {
                    break;
                }
                $value_serl = @unserialize($value);
            }
            if ((time() - $value_serl['tmout']) > $timeout) {
                return '';
            }
            
            return $value_serl['data'];
        }
    }

    // 限速
    public function RunOutTimeNumIs($num = 1, $key = 'rumTimeOut', $timeOut = 20)
    {
        $key .= 'task';
        $redis = redis::getRedis();
        $check = $redis->exists($key);
        if ($check) {
            $count = $redis->incr($key);
            // $count = $redis->get($key);
            if ($count > $num) {
                $outtime = $redis->pttl($key);
                if ($outtime == - 1) {
                    $redis->del($key);
                }
                return true;
            }
        } else {
            $redis->incr($key);
            // 限制时间为1秒
            $redis->expire($key, $timeOut);
        }
        
        return false;
    }

    // 暂时不写了。。写task太多。。改用缓存记数.以后
    public function o_numincr($key = '', $num = 1, $timeOut = 120)
    {
        $key .= 'task_id_incr';
        $redis = redis::getRedis();
        // 判断KEY是否存在
        $check = $redis->exists($key);
        if ($check) {
            $count = $redis->incr($key);
            // $count = $redis->get($key);
            if ($count > $num) {
                $outtime = $redis->pttl($key);
                if ($outtime == - 1) {
                    $redis->del($key);
                }
                return true;
            }
        } else {
            $redis->incr($key);
            // 更新生存时间
            $redis->expire($key, $timeOut);
        }
        
        return false;
    }

    private $alipaykey = 'MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCkTIBHn1SRf/u3WF2o3r+EQZVEbhTYdS9EozXHeBfHxmKFkhb3FhlEtNCu83BIO5Ac4akx19Wrr8FTyy59ZKqFZwrRm2N1ktDkACC6Ieoi3tWlT+nd0JBl5GjqWubIhOjczbmZ13yeLskYB6nO1yp5b1nbqUj++vvu+gP5xIVHXEwS+PI8pjsXqhK3S+Al9AeM/sU3mkURpKcKn2ntfklgKfm3aOFcNK/GInoZIv3VmjV3F5xhWr132OBbroAwuU6OklPu+r92wPDCsjaDr1oD6lSMVf20qYCMnDLQ4jNXPU+mzXV0gE60QY/OoMSzyPsLor5/Y+T8LLrQh6SDS7LvAgMBAAECggEAD0uD4acGg2kLsNzME01xPMmyMKWi0SfPl68t8XzPkex4/YBFHQl0nr3Kc478E+1flCC51IcIQCxjbf6LPGcjrLmT+0Fg9/AL/D26zjkcB9UAxJv05I5m8uVZkv+VXnNpDi0kqxqxYjRuygrklvnW3WktT1KqFfqde3jQ5+6Qjbz2MtJi9jHqZgb5BJgSnO9w5sHfVH7Gx2UjewPPJdIHLTsffmTG3flJsqERQHGmvHWsVeTi5faJWiM21Wj7DBurYKb9YMOAnzh968obNKiYb0sJJX3aBMcF+jgWAoSnRUsXUkUxpEyOhrpslUr5N50QkHqJ3mkVXd58QIKhz5GQOQKBgQDxXal/NiO8704QCDyenjwxX7mHCMgEFs3FMkOUEJfaV5UL6LfCs8UOJ5FGkMhYccroR3d33zqdYL2mXvdnsv6C4ImBfUh0otoxe2zHpAOBQlFhZsXYWl/rR3mutwWek+KWC+VKGSlwHG4bX88GyzfwwQRUHy3aZjIp2oTkaz73HQKBgQCuQqZxMl0KDklWE8K2LfZyw7UwfQfo2x7u7ip7tKcdnp6MpcTqAhlKbecu2oQ4n8EAarJHN0AAgf9dtg/SlNyYZAsAsdvb2rG0EC0Yp7RcWTjtFRKfAuHeD6H7XnBfz7eu7pidww6URPTXmNcXYp4KWkQEtURGdxooRScd0y1YewKBgQCsL7Y4U0YhhdJ5q3abbaThUDnJdGFEUYRQFnCRU1kRYYOpsEZPtvFwDJgd8DGMrvkixcEbmft1xErnQj5bEx1v/oD6CIdE9dyUiklrDr2VW9s0kh24H5jn/uB23Ig8vaFai3fyaYrfONjv3GSToyvwK7JL1MZgVKGarBI75apQnQKBgHaNbYLRSq7OrWHcK7mZZ3MIZjpItZrbiB3w9gIXEyJ5iVASbvbs2pviTUd47j8/oCRScls04Vv3FO6CMB2JnNIoLbwZRIQ8Mm1YG/YMEg5JvQq+LV70rQlQBVloFHd6b3KZbEbYLxD8IL6UgrCsLOzKIEA7uelemfMPqN8HjnAFAoGBAJC4GwdYO0PSwipRWEkElWcxchuazQsphJn4D6UjffESflJfUSOple+zOX9uxdJ96sgwjjjLhLY8Hng+SIyN87Nt3vgJY9xo9obhwzSJieEF/dkv5kO8TmNjbVJw58hiLCk75kfyj7OSLuODJ430m4JYEiw2WF379Cy0p505RV8W';

    private $alipaykeyPublic = 'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq9XZQg6R5a2FGQWJHqN+7bMSYKsvekUx/PuIrw/Md9bzFiPrSJvHQeqIEtW2uxqK20OzIj+STl/ajDjmjc/AzJ1wYxKAXr+XLJwc6XJSe0n0JrQVrLjcwQCBt3bJW3R4hrrrwB5lKUsKKlzkYuhOygTFeRPnZEReNOHdhx4XAgnXZ/ncWV2XsAaC2v55eTahQ6G2sDt5liqZ3H5Iul7uquaxFr0B2LHcp7mr2B4MuOzyN9ylQKvbZESQ4kwoqFL7scqTudbrYE41QKBr3a5kJCM9HuFfOdQx3zqwd29Gk2WQEwMbIf5jrBDQVpo23Jbg07GrbSOrGKOIhPfuP22aoQIDAQAB';

    public function userWithDraw($userid, $payee_account, $amount, $payee_real_name, $strMsg)
    {
        $payer_show_name = $strMsg;
        
        $web = $this->webNum;
        if ($web == 1) {
            $strMsg = 'DQ' . $strMsg;
        }
        if ($web == 2) {
            $strMsg = 'vote' . $strMsg;
        }
        if ($web == 3) {
            $strMsg = '点点' . $strMsg;
        }
        $remark = $strMsg . '会员:' . $this->getUser_login($userid) . '结米';
        Vendor('alipay-sdk.aop.AopClient');
        Vendor('alipay-sdk.aop.request.AlipayFundTransToaccountTransferRequest');
        $aop = new \AopClient();
        $aop->appId = '2018021302192003'; // 商户appid 在支付宝控制台找
        $aop->rsaPrivateKey = $this->alipaykey; // 私钥 工具生成的
        $aop->alipayrsaPublicKey = $this->alipaykeyPublic; // 支付宝公钥 上传应用公钥后 支付宝生成的支付宝公钥
        $aop->signType = 'RSA2';
        $out_biz_no = $userid . tool::createRandomStr(32);
        $request = new \AlipayFundTransToaccountTransferRequest();
        $request->setBizContent("{" . "\"out_biz_no\":\"$out_biz_no\"," . "\"payee_type\":\"ALIPAY_LOGONID\"," . "\"payee_account\":\"$payee_account\"," . "\"amount\":\"$amount\"," . "\"payer_show_name\":\"$payer_show_name\"," . "\"payee_real_name\":\"$payee_real_name\"," . "\"remark\":\"$remark\"" . "}");
        $result = $aop->execute($request);
        
        $responseNode = str_replace(".", "_", $request->getApiMethodName()) . "_response";
        $resultCode = $result->$responseNode->code;
        
        if (! empty($resultCode) && $resultCode == 10000) {
            // 提现成功以后 更新表状态
            // 并且记录 流水等等
            // $this->getpaycikle($out_biz_no);
            $data['msg'] = '成功';
            $data['code'] = 0;
            $data['out_no'] = $out_biz_no;
            return $data;
        } else {
            // $result->$responseNode->sub_msg 这个参数 是返回的错误信息
            tool::debugSend($result->$responseNode->sub_msg);
            $data['msg'] = $result->$responseNode->sub_msg;
            $data['code'] = - 1;
            $data['out_no'] = $out_biz_no;
            return $data;
        }
    }

    public function getpaycikle($no_out)
    {
        Vendor('alipay-sdk.aop.AopClient');
        Vendor('alipay-sdk.aop.request.AlipayFundTransOrderQueryRequest');
        $aop = new \AopClient();
        $aop->gatewayUrl = 'https://openapi.alipay.com/gateway.do';
        $aop->appId = '2018021302192003'; // 商户appid 在支付宝控制台找
        $aop->rsaPrivateKey = $this->alipaykey; // 私钥 工具生成的
        $aop->alipayrsaPublicKey = $this->alipaykeyPublic; // 支付宝公钥 上传应用公钥后 支付宝生成的支付宝公钥
        $aop->signType = 'RSA2';
        $request = new \AlipayFundTransOrderQueryRequest();
        $request->setBizContent("{" . "\"out_biz_no\":\"$no_out\"," . "\"order_id\":\"\"" . "  }");
        $result = $aop->execute($request);
        
        $responseNode = str_replace(".", "_", $request->getApiMethodName()) . "_response";
        $resultCode = $result->$responseNode->code;
        var_dump($result->$responseNode);
        if (! empty($resultCode) && $resultCode == 10000) {
            echo "成功";
        } else {
            echo "失败";
        }
    }

    // 全自助下单
    public function autoOrdesData()
    {
        $id = $_GET['id'];
        if ($id) {
            $where['id'] = $id;
            if (APP_DEBUG == true) {
                $autoData = M('search')->where($where)->find();
            } else {
                $autoData = M()->db(6, "mysql://baiiqwxf:@Aa223514@120.77.227.144:3306/fskj_db")
                    ->table('cmf_search')
                    ->where($where)
                    ->find();
            }
            
            // 判断是否可以使用
            if (! empty($autoData['yes_user'])) {
                $userArr = explode(",", $autoData['yes_user']);
                
                $tmp = true;
                foreach ($userArr as $v) {
                    if (! empty($v)) {
                        if ($v == $_SESSION['user']['user_login']) {
                            $tmp = false;
                        }
                    }
                }
                if ($tmp) {
                    $data['status'] = 0;
                    $data['msg'] = '此活动未开放';
                    return $this->ajaxReturn($data, 'JSON');
                }
            }
            if ($autoData) {
                $this->autoxdOrdesEx($autoData);
            }
        }
    }

    function autoxdOrdesEx($autoTdata)
    {
        $taskM = new fdtaskModel();
        $userm = new UsersModel();
        $taskData['xs_name'] = $_POST['taskPlanDay'];
        $taskData['tpurl'] = $autoTdata['active_link'];
        $taskData['name'] = $autoTdata['active_name'];
        $intNum = $_POST['num'] + 0;
        if ($intNum < 100) {
            $data['status'] = 0;
            $data['msg'] = '请输入百票以上';
            return $this->ajaxReturn($data, 'JSON');
        }
        if (empty($_POST['taskPlanDay'])) {
            $data['status'] = 0;
            $data['msg'] = '请选择选手';
            return $this->ajaxReturn($data, 'JSON');
        }
        $id = get_current_userid();
        if (empty($id)) {
            $data['status'] = 0;
            $data['msg'] = '请登陆';
            return $this->ajaxReturn($data, 'JSON');
        }
        $taskData['num'] = $intNum;
        $taskData['jianjie'] = $_POST['jianjie'];
        $taskData['beizhu'] = $_POST['beizhu'];
        $taskData['display'] = 1;
        
        $taskData['task_buff'] = 9;
        $taskData['iswho'] = $autoTdata['user_id'];
        $taskData['typeid'] = '8888';
        
        $taskData['fatime'] = date('Y-m-d H:i:s');
        $taskData['startime'] = date('Y-m-d H:i:s');
        $taskData['id'] = $id;
        $taskData['zz_id'] = strtotime(date("Y-m-d", time())) + $autoTdata['id'];
        $runData['whi'] = 0; // 次数
                             
        // 关注0或直投1
        if ($autoTdata['type_id'] == 1) {
            $taskData['web'] = 0;
        } else {
            $taskData['web'] = 1;
        }
        if (! empty($_POST['taskPlanDay'])) {
            $runData['xsn'] = $_POST['taskPlanDay'];
        }
        $taskData['imgfile'] = json_encode($runData);
        
        $sumint = count(explode(",", $_POST['taskPlanDay'])) - 1;
        $sumadd = 0;
        if ($sumint > 0) {
            $sumadd = $sumint * 0.02;
        }
        // 判断是否为VIP或客服
        $users_model = M("users");
        // $where['login_lve'] = 2;
        $where['id'] = $id;
        $dataUser = $users_model->where($where)->find();
        // VIP
        $taskData['danjia'] = $autoTdata['ordinary_price'] + $sumadd;
        if ($dataUser['login_lve'] == 2) {
            $taskData['danjia'] = $autoTdata['vip_price'] + $sumadd;
        }
        // 客服
        if ($dataUser['qq'] == 1) {
            $taskData['danjia'] = $autoTdata['inside_price'] + $sumadd;
        }
        
        $rs = $taskM->add($taskData);
        if ($rs) {
            $t_model = M("task_str");
            $save['pid'] = $rs;
            $save['task_str'] = $autoTdata['task_str'];
            $t_model->add($save);
            
            $data['status'] = 1;
            $data['msg'] = '发布成功请下单';
            $this->ajaxReturn($data);
        }
    }

    /**
     * 创建(导出)Excel数据表格
     *
     * @param array $list
     *            要导出的数组格式的数据
     * @param string $filename
     *            导出的Excel表格数据表的文件名
     * @param array $indexKey
     *            $list数组中与Excel表格表头$header中每个项目对应的字段的名字(key值)
     * @param array $startRow
     *            第一条数据在Excel表格中起始行
     * @param [bool] $excel2007
     *            是否生成Excel2007(.xlsx)以上兼容的数据表
     *            比如: $indexKey与$list数组对应关系如下:
     *            $indexKey = array('id','username','sex','age');
     *            $list = array(array('id'=>1,'username'=>'YQJ','sex'=>'男','age'=>24));
     */
    function exportExcel($list, $filename, $indexKey, $startRow = 1, $excel2007 = false)
    {
        // 文件引入
        require_once __ROOT__ . 'simplewind/Lib/Classes/PHPExcel.php';
        require_once __ROOT__ . 'simplewind/Lib/Classes/PHPExcel/Writer/Excel2007.php';
        
        if (empty($filename))
            $filename = time();
        if (! is_array($indexKey))
            return false;
        
        $header_arr = array(
            'A',
            'B',
            'C',
            'D',
            'E',
            'F',
            'G',
            'H',
            'I',
            'J',
            'K',
            'L',
            'M',
            'N',
            'O',
            'P',
            'Q',
            'R',
            'S',
            'T',
            'U',
            'V',
            'W',
            'X',
            'Y',
            'Z',
            'AA',
            'AB',
            'AC'
        );
        // 初始化PHPExcel()
        $objPHPExcel = new \PHPExcel();
        
        // 设置保存版本格式
        if ($excel2007) {
            $objWriter = new \PHPExcel_Writer_Excel2007($objPHPExcel);
            $filename = $filename . '.xlsx';
        } else {
            $objWriter = new \PHPExcel_Writer_Excel5($objPHPExcel);
            $filename = $filename . '.xls';
        }
        // 接下来就是写数据到表格里面去
        $objActSheet = $objPHPExcel->getActiveSheet();
        array_unshift($list, $indexKey);
        // $startRow = 1;
        foreach ($list as $row) {
            $ai = 0;
            foreach ($indexKey as $key => $value) {
                
                // 这里是设置单元格的内容
                $objActSheet->setCellValue($header_arr[$ai] . $startRow, $row[$key]);
                $ai ++;
            }
            $startRow ++;
        }
        
        ob_end_clean();
        // 下载这个表格，在浏览器输出
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control:must-revalidate, post-check=0, pre-check=0");
        header("Content-Type:application/force-download");
        header("Content-Type:application/vnd.ms-execl");
        header("Content-Type:application/octet-stream");
        header("Content-Type:application/download");
        ;
        header('Content-Disposition:attachment;filename=' . $filename . '');
        header("Content-Transfer-Encoding:binary");
        $objWriter->save('php://output');
    }

    // 直接转帐冲值处理
    public function payczCode2($nosNum)
    {
        $redis = redis::getRedis();
        $user = $redis->get('user' . $_POST['id']);
        $user = json_decode($user, true);
        // 找到存在这个流水号未处理的单子没
        if (empty($nosNum)) {
            $data['code'] = 0;
            $data['msg'] = '流水号不能为空';
            return $data;
        }
        if (SLock($nosNum, 1, 30, 1000)) { // 标识 ,超时,锁时,读时(毫秒)
            $where['delta_num'] = $nosNum;
            // $where['buff'] = 1;
            // 找订单信息表
            $delPayTmpM = M('deltapaytmp');
            $delTmpData = $delPayTmpM->where($where)->find();
            if (! $delTmpData) {
                SUnlock($nosNum);
                $data['code'] = 0;
                $data['msg'] = '暂时未取得相关订单信息';
                return $data;
            }
            // 如果存在支付备注，查出这个用户。。然后自动加入定单
            $delmxM = M('deltamx');
            if (! empty($delTmpData['delta_title'])) { // 存在备注。看提交了流水号没。没就自己提交
                $whereex['delta_num'] = $nosNum;
                $delmxData = $delmxM->where($whereex)->find();
                if (! $delmxData) {
                    $map['delta_num'] = $delTmpData['delta_num'];
                    $where['user_login'] = $delTmpData['delta_title'];
                    $userm = new UsersModel();
                    $dataUser = $userm->where($where)->find();
                    if (! $dataUser) {
                        SUnlock($nosNum);
                        $data['code'] = 0;
                        $data['msg'] = 'err';
                        return $data;
                    }
                    $map['user_id'] = $dataUser['id'];
                    $map['user_sum'] = $user['ycoin'];
                    $map['delta_dz'] = 1; // 1普通2升级'
                    if ($delTmpData['delta_gateway'] == 'alipay') {
                        $map['delta_src'] = 1; // 1支付宝2微
                    } else {
                        $map['delta_src'] = 2; // 1支付宝2微
                    }
                    $map['add_time'] = date('Y-m-d H:i:s');
                    $map['buff'] = 1;
                    if (! $delmxM->add($map)) {
                        SUnlock($nosNum);
                        $data['code'] = 0;
                        $data['msg'] = '已提交重试';
                        return $data;
                    }
                } else {
                    // 打到了就置为已操作
                    $delPayTmpM->where($where)->setField('buff', 2);
                }
            }
            
            // 找用户提交流水号表
            // $where['buff'] = 1;
            $delmxData = $delmxM->where($where)->find();
            if (! $delmxData) {
                SUnlock($nosNum);
                $data['code'] = 0;
                $data['msg'] = '无用户提交此流水号';
                return $data;
            }
            $web = $this->webNum;
            // 如果是限制用户，比如十万的不进行操作
            if ($web == 5) {
                if ($delmxData['id'] == 1080) {
                    $data['code'] = 0;
                    $data['msg'] = '此用户不能操作';
                    return $data;
                }
            }
            // 判断是否可以冲值
            
            if ($web == 5 && $delTmpData['delta_bz'] = 1080) {
                $whereEx['id'] = 1080;
                $dataUser = M()->table('fskj_db.cmf_users')
                    ->where($whereEx)
                    ->find();
                if (! $dataUser) {
                    $data['code'] = 0;
                    $data['msg'] = '信息出错';
                    return $data;
                }
                $whereEx['coin'] = array(
                    'gt',
                    $delTmpData['delta_sum'] - 1
                );
                $re = M()->table('fskj_db.cmf_users')
                    ->where($whereEx)
                    ->setDec('coin', $delTmpData['delta_sum']);
                if (! $re) {
                    $data['code'] = 0;
                    $data['msg'] = '不足';
                    return $data;
                }
            }
            $saveData['buff'] = 2;
            if ($delTmpData['delta_gateway'] == 'alipay') {
                $saveData['delta_src'] = 1;
            } else {
                $saveData['delta_src'] = 2;
            }
            $saveData['delta_sum'] = $delTmpData['delta_sum'];
            $saveData['delta_bz'] = $delTmpData['delta_bz'];
            $rs = $delmxM->where($where)->setField($saveData);
            $delPayTmpM->where($where)->setField('buff', 2);
            if ($rs) {
                // 修改这个订单为完成且成功。给用户加金额
                $this->payczCodeEx($delmxData, $delTmpData, $nosNum);
                SUnlock($nosNum);
                $data['code'] = 1;
                $data['msg'] = '操作成功';
                return $data;
            } else {
                if ($web == 5 && $delTmpData['delta_bz'] = 1080) {
                    tool::debugSend('王金贵出错加回钱');
                    $whereEx = array();
                    $whereEx['id'] = 1080;
                    $re = M()->table('fskj_db.cmf_users')
                        ->where($whereEx)
                        ->setInc('coin', $delTmpData['delta_sum']);
                }
            }
            SUnlock($nosNum);
            $data['code'] = 0;
            $data['msg'] = '操作失败请重试';
            return $data;
        }
    }

    // 全自助下单
    public function autoOrdesData2()
    {
        $id = $_POST['task_id'];
        if ($id) {
            $where['id'] = $id;
            
            $autoData = M()->db(6, "mysql://baiiqwxf:@Aa223514@120.77.227.144:3306/fskj_db")
                ->table('cmf_search')
                ->where($where)
                ->find();
            
            // 判断是否可以使用
            if (! empty($autoData['yes_user'])) {
                $userArr = explode(",", $autoData['yes_user']);
                
                $tmp = true;
                foreach ($userArr as $v) {
                    if (! empty($v)) {
                        $redis = redis::getRedis();
                        $user = $redis->get('user' . $_POST['id']);
                        $user = json_encode($user);
                        if ($v == $user['user_login']) {
                            $tmp = false;
                        }
                    }
                }
                if ($tmp) {
                    $data['status'] = 0;
                    $data['msg'] = '此活动未开放';
                    return $this->ajaxReturn($data, 'JSON');
                }
            }
            if ($autoData) {
                $this->autoxdOrdesEx2($autoData);
            }
        }
    }

    function autoxdOrdesEx2($autoTdata)
    {
        $taskM = new fdtaskModel();
        $userm = new UsersModel();
        $taskData['xs_name'] = $_POST['taskPlanDay'];
        $taskData['tpurl'] = $autoTdata['active_link'];
        $taskData['name'] = $autoTdata['active_name'];
        $intNum = $_POST['num'] + 0;
        if ($intNum < 100) {
            $data['status'] = 0;
            $data['msg'] = '请输入百票以上';
            $this->ajaxReturn($data, 'JSON');
            exit(0);
        }
        if (empty($_POST['taskPlanDay'])) {
            $data['status'] = 0;
            $data['msg'] = '请选择选手';
            $this->ajaxReturn($data, 'JSON');
            exit(0);
        }
        $id = $_POST['id'];
        if (empty($id)) {
            $data['status'] = 0;
            $data['msg'] = '请登陆';
            $this->ajaxReturn($data, 'JSON');
            exit(0);
        }
        $taskData['num'] = $intNum;
        $taskData['jianjie'] = $_POST['jianjie'];
        $taskData['beizhu'] = $_POST['beizhu'];
        $taskData['display'] = 1;
        
        $taskData['task_buff'] = 9;
        $taskData['iswho'] = $autoTdata['user_id'];
        $taskData['typeid'] = '8888';
        $taskData['xzno'] = $_POST['xzno'];
        
        $taskData['fatime'] = date('Y-m-d H:i:s');
        $taskData['startime'] = date('Y-m-d H:i:s');
        $taskData['id'] = $id;
        $taskData['zz_id'] = strtotime(date("Y-m-d", time())) + $autoTdata['id'];
        $runData['whi'] = 0; // 次数
                             
        // 关注0或直投1
        if ($autoTdata['type_id'] == 1) {
            $taskData['web'] = 0;
        } else {
            $taskData['web'] = 1;
        }
        if (! empty($_POST['taskPlanDay'])) {
            $runData['xsn'] = $_POST['taskPlanDay'];
        }
        $taskData['imgfile'] = json_encode($runData);
        
        $sumint = count(explode(",", $_POST['taskPlanDay'])) - 1;
        $sumadd = 0;
        if ($sumint > 0) {
            $sumadd = $sumint * 0.02;
        }
        // 判断是否为VIP或客服
        $users_model = M("users");
        // $where['login_lve'] = 2;
        $where['id'] = $id;
        $dataUser = $users_model->where($where)->find();
        // VIP
        $taskData['danjia'] = $autoTdata['ordinary_price'] + $sumadd;
        if ($dataUser['login_lve'] == 2) {
            $taskData['danjia'] = $autoTdata['vip_price'] + $sumadd;
        }
        // 客服
        if ($dataUser['qq'] == 1) {
            $taskData['danjia'] = $autoTdata['inside_price'] + $sumadd;
        }
        
        $rs = $taskM->add($taskData);
        if ($rs) {
            $t_model = M("task_str");
            $save['pid'] = $rs;
            $save['task_str'] = $autoTdata['task_str'];
            $t_model->add($save);
            
            $data['status'] = 1;
            $data['msg'] = '发布成功请下单';
            $this->ajaxReturn($data);
        }
    }

    // 自动下单处理
    function autoOrdesCode2()
    {
        if ($_POST['tp_numlt'] > 1) {
            $_POST['tp_note'] = $_POST['tp_note'] . '_连投:' . $_POST['tp_numlt'] . '票';
        }
        if ($_POST['task_type'] == '人工审核') {
            return false;
        }
        $xs_name = $_POST['xs_name'];
        $tp_url = $_POST['tp_url'];
        $name = $_POST['name'];
        $where['task_type'] = $_POST['task_type'];
        
        $AutoOrdesData = M()->db(6, "mysql://baiiqwxf:@Aa223514@120.77.227.144:3306/fskj_db")
            ->table('cmf_addtaskauto')
            ->where($where)
            ->select();
        
        foreach ($AutoOrdesData as $v) {
            // 判断是什么类型1普通
            if ($v['user_num'] == 1) {
                if (strpos($tp_url, $v['linkurl']) !== false) {
                    // 配对成功下单
                    $this->autoxdOrdes2($v);
                }
            } else {
                if (preg_match($v['linkurl'], $tp_url)) {
                    // 配对成功下单
                    $this->autoxdOrdes2($v);
                }
            }
        }
        $data['status'] = 0;
        $data['msg'] = '识别失败请下人工审核';
        return $this->ajaxReturn($data, 'JSON');
    }

    function autoxdOrdes2($autoTdata)
    {
        $taskM = new fdtaskModel();
        $userm = new UsersModel();
        $taskData['xs_name'] = $_POST['xs_name'];
        $taskData['tpurl'] = $_POST['tp_url'];
        if (empty($taskData['tpurl'])) {
            $data['status'] = 0;
            $data['msg'] = '链接不能为空';
            return $this->ajaxReturn($data, 'JSON');
        }
        
        $taskData['name'] = $_POST['name'];
        if (empty($taskData['name'])) {
            $data['status'] = 0;
            $data['msg'] = '活动名称不能为空';
            return $this->ajaxReturn($data, 'JSON');
        }
        $intNum = $_POST['tp_number'] + 0;
        if ($intNum < 100) {
            $data['status'] = 0;
            $data['msg'] = '请输入一百票以上';
            return $this->ajaxReturn($data, 'JSON');
        }
        $taskData['num'] = $intNum;
        $taskData['jianjie'] = $_POST['tp_note'];
        $taskData['display'] = 1;
        $typeId = $this->getstrStrEnd($autoTdata['task_type'], '@', '@');
        if (empty($typeId)) {
            $taskData['task_buff'] = 9;
            $taskData['typeid'] = $_POST['typeid'];
            $taskData['iswho'] = 1;
        } else {
            if ($typeId < 2222) {
                $taskData['task_buff'] = 6;
                $str_run = '审5_活动名:' . $_POST['name'] . "\n链接:" . $_POST['tp_url'] . "\n选手:" . $_POST['xs_name'];
                $this->SendRunTask($str_run);
            } else {
                $taskData['task_buff'] = 9;
            }
            $taskData['iswho'] = 0;
            $taskData['typeid'] = $typeId;
        }
        $taskData['fatime'] = date('Y-m-d H:i:s');
        $taskData['startime'] = date('Y-m-d H:i:s');
        $taskData['id'] = $_POST['id'];
        $runData['whi'] = $_POST['tp_numlt']; // 次数
        
        if (! empty($_POST['tp_gzh'])) {
            $runData['gzh'] = $_POST['tp_gzh'];
        } else {
            $taskData['web'] = 1;
        }
        if (! empty($_POST['xs_name'])) {
            $runData['xsn'] = $_POST['xs_name'];
        }
        $taskData['imgfile'] = json_encode($runData);
        
        // 判断是否为VIP
        $users_model = M("users");
        $where['login_lve'] = 2;
        $where['id'] = $_POST['id'];
        $datalve = $users_model->where($where)->find();
        // 判断是否为VIP或客服
        $users_model = M("users");
        // $where['login_lve'] = 2;
        $where['id'] = $_POST['id'];
        $dataUser = $users_model->where($where)->find();
        // VIP
        $taskData['danjia'] = $autoTdata['user_sum'] * $this->getcsNum($_POST['tp_numlt']);
        if ($dataUser['login_lve'] == 2) {
            $taskData['danjia'] = $autoTdata['vip_sum'] * $this->getcsNum($_POST['tp_numlt']);
        }
        // 客服
        if ($dataUser['qq'] == 1) {
            $taskData['danjia'] = $autoTdata['in_sum'] * $this->getcsNum($_POST['tp_numlt']);
        }
        $rs = $taskM->add($taskData);
        if ($rs) {
            $t_model = M("task_str");
            $save['pid'] = $rs;
            $save['task_str'] = $autoTdata['task_str'];
            $t_model->add($save);
            $coin = M('users')->where([
                'id' => $_POST['id']
            ])
                ->field('coin')
                ->find();
            $data['status'] = 1;
            $data['msg'] = '发布成功请下单';
            $data['coin'] = $coin['coin'];
            return $this->ajaxReturn($data, 'JSON');
            $this->ajaxReturn($data);
        }
        $data['status'] = 0;
        $data['msg'] = '发布失败请下人工审核';
        return $this->ajaxReturn($data, 'JSON');
    }

    public function code6668($GetData)
    {
        // if (isset($GetData['is_type'])) {
        // $this->isy_code($GetData['is_type'], $GetData);
        // exit();
        // }
        // 读取帐号要关数据，写入数据库
        $wxautoM = M('wxauto');
        $where['user_login'] = $GetData['name'];
        // if (isset($GetData['mdty'])) {
        // $where['mdty'] = $GetData['mdty'];
        // }
        $web = $this->webNum;
        $wxData = $wxautoM->where($where)->find();
        if (! $wxData) {
            $data['user_login'] = $GetData['name'];
            $data['user_pass'] = '';
            $data['pass'] = '';
            $data['create_time'] = date('Y-m-d H:i:s');
            $data['run_time'] = '0000-00-00';
            $data['mode'] = 1;
            $iplook = tool::GetIpLookup(tool::GetIP());
            $data['province'] = $iplook['province'];
            $data['city'] = $iplook['city'];
            $data['user_true'] = 0;
            $data['user_false'] = 0;
            $data['user_look'] = 0;
            $data['look_count'] = 0;
            $data['drvice'] = array();
            $data['openid'] = '';
            $data['msg'] = '';
            $data['wx_type'] = 0;
            $data['is_get'] = 0;
            $data['mdty'] = 2;
            $data['language'] = 1;
            $data['buff'] = 1;
            $wxId = $wxautoM->add($data);
            $wxData = $wxautoM->where([
                'id' => $wxId
            ])->find();
            return $wxData;
        } else {
            $data['user_login'] = $GetData['name'];
            $data['create_time'] = $wxData['create_time'];
            $data['run_time'] = '0000-00-00';
            $iplook = tool::GetIpLookup(tool::GetIP());
            $data['province'] = $iplook['province'];
            $data['city'] = $iplook['city'];
            $wxautoM->save($data);
            return $wxData;
        }
    }

    // 接取任务
    public function dygettask($taskid, $userid, $outid = 1, $table_name, $timeOut = 2)
    {
        $wxordesM = M($table_name);
        // 接任务要上锁
        $taskM = new fdtaskModel();
        
        $web = $this->webNum;
        
        $olne = $this->webOlne;
        $map['task_id'] = $taskid;
        $map['task_buff'] = 1;
        if (SLock($taskid . 'TASK_ID', $timeOut, 20, 50)) { // 标识 ,超时,锁时,读时(毫秒)
            $taskData = $taskM->where($map)->find();
            if ($taskData) {
                if ($taskData['task_buff'] != 1) {
                    SUnlock($taskid . 'TASK_ID');
                    $data['status'] = 0;
                    $data['msg'] = '已结束';
                    return $data;
                }
                // 判断如果错的太多停了
                if ($taskData['no_num'] > 250) {
                    if ($taskData['n_num'] < 1) {
                        $this->setTaskOverData($taskid);
                        SUnlock($taskid . 'TASK_ID');
                        $data['status'] = 0;
                        $data['msg'] = '系统繁忙请重试';
                        return $data;
                    } else {
                        if ($taskData['no_num'] / $taskData['n_num'] > 300) {
                            $this->setTaskOverData($taskid);
                            SUnlock($taskid . 'TASK_ID');
                            $data['status'] = 0;
                            $data['msg'] = '系统繁忙请重试';
                            return $data;
                        }
                    }
                }
//                 $tmpInt = $taskData['num'] - $taskData['o_num'] - $taskData['n_num'];
//                 if ($tmpInt > 100) {
//                     $tmpTrue = $this->dygetwebolne($taskData, $olne, 3);
//                 } else {
//                     $tmpTrue = $this->dygetwebolne($taskData, $olne, 1);
//                 }
//                 if ($tmpTrue !== false) {
//                     $taskData['o_num'] = 0;//$tmpTrue;
//                 }
//                 if ($taskData['xzno'] != 0 && $taskData['o_num'] > $taskData['xzno'] + 1) {
//                     $data['status'] = 0;
//                     $data['msg'] = '已超速';
//                     SUnlock($taskid . 'TASK_ID');
//                     return $data;
//                 }
                // 判断是否限速取xzno 完成票数，时间/5 看达标没。没有就通过
//                 if ($this->gettimeout($taskData['startime'], $taskData['xznum'] + $taskData['o_num'], $taskData['xzno']) && $taskData['xzno'] != 0) {
//                     $data['status'] = 0;
//                     $data['msg'] = '已超速';
//                     SUnlock($taskid . 'TASK_ID');
//                     return $data;
//                 }
                
                $tmpInt = $taskData['num'] - $taskData['n_num'];
                SUnlock($taskid . 'TASK_ID');
                if (($tmpInt + 2) > 0) {
                    $ordesData['task_id'] = $taskData['task_id'];
                    $ordesData['user_id'] = $userid;
                    $ordesData['fuser_id'] = $taskData['id'];
                    $ordesData['getno'] = $taskData['getno'];
                    $ordesData['zz_id'] = $taskData['zz_id'];
                    $ordesData['danjia'] = $taskData['danjia'];
                    $ordesData['ta_sum'] = 0.2;
                    $ordesData['buff'] = 1;
                    $ordesData['add_time'] = date('Y-m-d H:i:s');
                    
                    // $sleepInt = $this->getTaskRunOutTimeOut($this->taskGetNum);
                    // if ($sleepInt) {
                    // tool::debugSend('task_out:' . $sleepInt);
                    // S('ALL_MYSQL_TIMEOUT_SELLP', 'is_true', $sleepInt);
                    // }
                    // $result = M()->db(1, "mysql://baiiqwxf:@Aa223514@" . $this->serverIp . ":3306/fskj_db")
                    // ->table('cmf_' . $table_name)
                    // ->add($ordesData);
                    
                    $result = $wxordesM->add($ordesData);
                    
                    if (! $result) {
                        $data['status'] = 0;
                        $data['msg'] = '开始任务出错将刷新任务';
                    } else {
                        $this->getsetS('task_run_' . $taskid . '_' . $result, 'is_r', 60 * 60 * 24);
//                         if ($tmpInt > 100) {
//                             $this->dyindcOnum($taskid, 2, 3);
//                         } else {
//                             $this->dyindcOnum($taskid, 2);
//                         }
                        // 加入任务隐藏数
                        $maptt['task_id'] = $map['task_id'];
                        $data['ta_sum'] = $ordesData['ta_sum'];
                        $data['status'] = 1;
                        $data['msg'] = '接任务成功';
                        $data['orders_id'] = $result;
                    }
                } else {
                    $data['status'] = 0;
                    $data['msg'] = '此任务已限速，领取失败';
                }
            } else {
                $data['status'] = 0;
                $data['msg'] = '接任务已过期将刷新任务';
                SUnlock($taskid . 'TASK_ID');
            }
        } else {
            $data['status'] = 0;
            $data['msg'] = '系统繁忙请重试';
        }
        return $data;
    }

    public function savedyorder($taskid, $orderid, $wxdytask, $buff = 0, $intadd = 1)
    {
        if (empty($taskid)) {
            return 0;
        }
        $redis = redis::getRedis();
        $code = $buff == 1 ? 2 : 3;
        if ($wxdytask['buff'] == 1) {
            if ($buff == 1) {
                $num = $redis->incrBy($taskid . "_N_NUM_", $intadd);
                $saveData['n_num'] =$num;
                $redis->del('task_run_' . $taskid . '_' . $orderid);
                $saveData['o_num'] = $this->getkeysNameEx($taskid);
                // $num = $redis->incrBy($taskid . "_N_NUM_", $intadd);
            } else {
                $no_num = $redis->incrBy($taskid . "_INC_TASK_ALL", $intadd);
                $saveData['no_num'] = $no_num;
                $redis->del('task_run_' . $taskid . '_' . $orderid);
                $saveData['o_num'] = $this->getkeysNameEx($taskid);
//                 return 1;
            }
        } else {
            return 0;
        }
        if (S($taskid . '_num') != 'true_is') {
            if (SLock('wxTaskisCle' . $taskid, 0, $intadd, 200)) {
                // 标识 ,超时,锁时,读时(毫秒)
                S($taskid . '_num', 'true_is', $intadd);
                // $allData = $this->delkeysNameEx($taskid,$orderid);
                $mapnew['task_id'] = $taskid;
//                 $saveData['n_num'] = S($taskid . "_N_NUM_");
                // if ($buff) {
                // $saveData['n_num'] = $num;
                // }else{
//                 $saveData['no_num'] = S($taskid . "_INC_TASK_ALL");
                // }
                M('fdtask')->where($mapnew)->setField($saveData);
                return 1;
            }
        }
        return 0;
    }

    public function dyindcOnum($taskid, $type = 1, $timeWi = 1)
    {
        if (empty($taskid)) {
            return 0;
        }
        if ($type == 1) {
            $allInt = $this->getkeyInc($taskid);
        }
        if (S($taskid . '_onum') != 'true_is') {
            if (SLock('wxTaskisCle' . $taskid, 0, $timeWi, 200)) {
                // 标识 ,超时,锁时,读时(毫秒)
                S($taskid . '_onum', 'true_is', $timeWi);
                $allData = $this->getkeysNameEx($taskid);
                $mapnew['task_id'] = $taskid;
                // $mapnew['o_num'] = array(
                // 'neq',
                // $allData
                // );
                $saveData['o_num'] = $allData;
                if ($type == 1) {
                    $saveData['no_num'] = $allInt;
                }
                M('fdtask')->where($mapnew)->setField($saveData);
            }
        }
        return 0;
    }

    function dygetwebolne($taskData, $olne, $isend = 1)
    {
        // 读取已接任务数这样做比较准
        $onumx = 0;
        S('taskapis_' . $taskData['task_id'], 'is_true', 10);
        $onumx = $this->dycleOverTask($taskData['task_id'], $isend);
        if ($onumx === false) {
            return false;
        }
        if ($taskData['o_num'] < 1) {
            if ($onumx != 0) {
                $taskData['o_num'] = $onumx;
            } else {
                $taskData['o_num'] = 1;
            }
        } else {
            if ($onumx > 0) {
                $taskData['o_num'] = $onumx;
            }
        }
        return $taskData['o_num'];
    }

    public function dycleOverTask($task_id, $sxno = 1)
    {
        $taskM = new fdtaskModel();
        $allData = false;
        if (S($task_id . '_onum') != 'true_is') {
            if (SLock('wxTaskisCle' . $task_id, 0, $sxno, 200)) { // 标识 ,超时,锁时,读时(毫秒)
                                                                  // S($task_id . '_onum', 'true_is', $sxno);
                
                $allData = $this->getkeysNameEx($task_id);
                $allInt = $this->getkeyInc($task_id, false);
                $mapnew['task_id'] = $task_id;
                $saveData['o_num'] = $allData;
                $saveData['no_num'] = $allInt;
                M('fdtask')->where($mapnew)->setField($saveData);
                return $allData;
            }
        }
        return $allData;
    }

    public function delkeysNameEx($task_id, $orderid)
    {
        $redes = redis::getRedis();
        if (empty(S('task_run_' . $task_id . '_' . $orderid))) {
            return 0;
        }
        $arrData = $redes->delete('task_run_' . $task_id . '_' . $orderid);
        if (is_array($arrData)) {
            $allData = count($arrData);
        } else {
            $allData = 0;
        }
        return $allData;
    }

    function tcodes($string, $isEncrypt = true, $key = 'baiiqwxf_code')
    {
        $dynKey = $isEncrypt ? hash('sha1', microtime(true)) : substr($string, 0, 40);
        $dynKey1 = substr($dynKey, 0, 20);
        $dynKey2 = substr($dynKey, 20);
        
        $fixKey = hash('sha1', $key);
        $fixKey1 = substr($fixKey, 0, 20);
        $fixKey2 = substr($fixKey, 20);
        
        $newkey = hash('sha1', $dynKey1 . $fixKey1 . $dynKey2 . $fixKey2);
        
        if ($isEncrypt) {
            $newstring = $fixKey1 . $string . $dynKey2;
        } else {
            $newstring = base64_decode(substr($string, 40));
        }
        
        $re = '';
        $len = strlen($newstring);
        for ($i = 0; $i < $len; $i ++) {
            $j = $i % 40;
            $re .= chr(ord($newstring{$i}) ^ ord($newkey{$j}));
        }
        
        return $isEncrypt ? $dynKey . str_replace('=', '_', base64_encode($re)) : substr($re, 20, -20);
    }
    

}



















